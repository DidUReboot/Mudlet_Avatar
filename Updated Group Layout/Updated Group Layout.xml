<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Updated Group Layout</name>
			<packageName>Updated Group Layout</packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Avatar Layout</name>
				<packageName></packageName>
				<script>-------------------------------------------------
-- Main AVATAR GUI Layout File    
-- Creates all the consoles / gauges / labels                      
-------------------------------------------------

Layout = Layout or {}
Layout.Labels = Layout.Labels or {}
Layout.DefaultFontSize = GlobalVar.FontSize or 8

styleSheetOff = {
  borderColor = 'yellow',
  backgroundColor = 'rgba(255, 0, 0, 0.5)',
  borderRadius = 3,
}

styleSheetOn = {
  borderColor = 'yellow',
  backgroundColor = 'green',
  borderRadius = 3,
}

headerStyleSheet = {
  borderColor = 'yellow',
  backgroundColor = 'black',
  borderRadius = 3
}

-- Function to generate style sheet
local function generateStyleSheet(params)
  if (not params) then traceback_detail() end
  return string.format([[
  border-width: 1px;
  border-style: solid;
  border-color: %s;
  background-color: %s;
  border-radius: %spx;
  ]], params.borderColor, params.backgroundColor, params.borderRadius)
end

-- Function to create labels
local function createLabel(name, x, y, width, height, fgColor, message, container, fontSizeAdj, styleSheetParams)
  fontSize = Layout.DefaultFontSize + tonumber(fontSizeAdj or 0)
  local parent = container or Geyser
  local label = Geyser.Label:new({
      name = name,
      x = x, y = y,
      width = width, height = height,
      fgColor = fgColor,
      message = message
  }, parent)
  if styleSheetParams then label:setStyleSheet(generateStyleSheet(styleSheetParams)) end
  label:setFontSize(fontSize)
  return label
end


function ReportRun()
  if (StatTable.Level &lt; 125) then DamageCounter.Report() end
  RunStats.Report()
  DamageCounter.ReportEcho()
end

function ResetRun()
  RunStats.Reset()
  RunStats.EchoSession()
  DamageCounter.ReportEcho()
  DamageCounter.Reset()
end

function AutoKillFunc(name)
  echo("Trigger killstyle - " .. name .. "\n")
  closeAllLevels(AutoKillLabel)

  if (name == "OFF") then
    GlobalVar.KillStyle = "kill"
    GlobalVar.AutoKill = false
  else
    GlobalVar.KillStyle = name
    GlobalVar.AutoKill = true
  end
  AutoKillSetGUI()
end

function AutoSkillToggle()
  if GlobalVar.SkillStyle == "" then
    print("AutoSkill: please set a skill style first - useage: skillstyle &lt;skill&gt;")
    return
  end

  GlobalVar.AutoSkill = not GlobalVar.AutoSkill
  AutoSkillSetGUI()
end

function AutoBashToggle()
  GlobalVar.AutoBash = not GlobalVar.AutoBash
  AutoBashSetGUI()
end

function AutoCastToggle()
  if GlobalVar.AutoCast then
    AutoCastOFF()
  else
    AutoCastON()
  end
end

function AutoKillSetGUI()
  if not GlobalVar.GUI then return end
  if not GlobalVar.KillStyle then GlobalVar.KillStyle = "kill" end
  
  local statusMessage = GlobalVar.AutoKill and GlobalVar.KillStyle or "OFF"
  local styleSheet = GlobalVar.AutoKill and styleSheetOn or styleSheetOff
  
  AutoKillLabel:echo("&lt;center&gt;AutoKill - " .. statusMessage .. "&lt;/center&gt;")
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoSkillSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoSkill and GlobalVar.SkillStyle or "OFF"
  local styleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  
  AutoSkillLabel:echo("&lt;center&gt;AutoSkill - " .. statusMessage .. "&lt;/center&gt;")
  AutoSkillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoBashSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoBash and "ON" or "OFF"
  local styleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff

  AutoBashLabel:echo("&lt;center&gt;AutoBash " .. statusMessage .. "&lt;/center&gt;")
  AutoBashLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function AutoCastSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoCast and "AutoCast - ".. GlobalVar.AutoCaster or "AutoCast OFF"
  local styleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff

  AutoCastLabel:echo("&lt;center&gt;" .. statusMessage .. "&lt;/center&gt;")
  AutoCastLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function LoadLayout()
  local mainWidth, mainHeight = getMainWindowSize()--setup. Lets get the screen space we have available and chop it up
  local LeftPanelPercent = 20 -- left side panel should be what % of available space
  local LeftPanelWidth = tonumber(mainWidth)*(LeftPanelPercent/100)  
  local RightPanelPercent = 25 -- right panel should be 25% of the available space
  local RightPanelWidth = tonumber(mainWidth)*(RightPanelPercent/100)  
  local CentrePanelWidth = mainWidth - (RightPanelWidth + LeftPanelWidth)-- the middle area left after we have 2 side panels
  local CentrePanelSize = CentrePanelWidth/20 --break the space in middle up into 20 spaces for loading stuff in 
  
  Layout.DefaultFontSize = GlobalVar.FontSize or 8
  
  -- left hand panel - full height
  setBorderLeft(LeftPanelWidth)
  
  left_container = Geyser.Container:new({
    name = "left_container",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="100%",      -- filling it up until the end
  })
  
  GroupContainer = Geyser.Container:new({
    name = "GroupContainer",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="55%",      -- filling it up until the end
  },left_container)
  
  GroupPanel_background = createLabel("GroupPanel_background", "1%", "0", "95%", "100%", "black", nil, GroupContainer, nil, headerStyleSheet)
  lowerWindow("GroupPanel_background")

  GroupPanelHeader = createLabel("GroupPanelHeader", "1%", "0", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Group&lt;&lt;/b&gt;&lt;/center&gt;]], GroupContainer, nil, headerStyleSheet)

  GroupContainerInner = Geyser.VBox:new({
    name = "GroupContainerInner",
    x="2%", y="25",                     
    width = "96%", height="99%", 
  }, GroupContainer)    
  
  
  GroupieTable = {}
  --group is set to max StaticVars.MaxGroupLabels (default 32)
  for i=1, StaticVars.MaxGroupLabels do
  


    GroupieTable[i] = Geyser.Container:new({name="groupy"..tostring(i),height="10",width="90%"},GroupContainerInner)
    GroupieTable[i].PositionLabel = Geyser.Label:new({name = "PositionLabel."..tostring(i), x = "1%", y = "4%", width = "4%", height = "80%", fgColor = "white"}, GroupieTable[i], 0, nil)
    GroupieTable[i].NameLabel = createLabel("NameLabel"..tostring(i), "5%", "0", "22%", "90%", "yellow", "&lt;left&gt; Name &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].TNLBar = createLabel("TNLBar"..tostring(i), "62%", "0", "16%", "90%", "yellow", "&lt;left&gt; TNL &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].InfoLabel = createLabel("InfoLabel"..tostring(i), "80%", "0", "16%", "90%", "yellow", "&lt;left&gt; Info &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].NameLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].InfoLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].TNLBar:setStyleSheet([[ background-color: black; ]])
    
    GroupieTable[i].HPBar = Geyser.Gauge:new({
      name="HPBar"..tostring(i),
      x="28%", y="3%",
      width="16%", height="80%",
    },GroupieTable[i])
          
    GroupieTable[i].HPBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].HPBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
         
    GroupieTable[i].HPMaskLabel = createLabel("HPMaskLabel"..tostring(i), "45%", "3%", "25%", "90%", "yellow", "", GroupieTable[i], 0, nil)
    GroupieTable[i].HPMaskLabel:setColor(0,0,0,0)
    GroupieTable[i].HPMaskLabel:setToolTip("Click the HP Bar to provide a divinity / comfort to target", 10)
    
    GroupieTable[i].ManaBar = Geyser.Gauge:new({
    name="ManaBar"..tostring(i),
    x="45%", y="3%",
    width="16%", height="80%",
    },GroupieTable[i])
              
    GroupieTable[i].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].ManaBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
      
      GroupieTable[i].TNLBar = Geyser.Gauge:new({
      name = "TNLBar"..tostring(i),
      x = "62%", y = "3%",
      width = "16%", height = "80%",
      }, GroupieTable[i]) -- this is where we tell it what container to go into
      
      GroupieTable[i].TNLBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #af33ff, stop: 0.1 #591685, stop: 0.49 #2e0e43, stop: 0.5 #591685, stop: 1 #af33ff);
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 2;
        padding: 3px;]])
      GroupieTable[i].TNLBar.back:setStyleSheet([[[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #363532, stop: 0.3 #ffffff, stop: 1 #363532);
        border-width: 1px;
        border-color: black;
        border-style: solid;
        border-radius: 2;
        padding: 3px;]])
      
      GroupieTable[i]:hide()

  end
  
  --LEFT MIDDLE START container on left for info
  left_container_middle = Geyser.Container:new({
    name = "left_container_middle",
    x=0, y="55%",                 
    width = "100%", height="15%", 
  }, left_container)
  
  left_container_middle_background = createLabel("left_container_middle_background", "1%", "1%", "95%", "98%", "black", nil, left_container_middle, nil, headerStyleSheet)
  lowerWindow("left_container_middle_background")
  leftmiddlePanelHeader = createLabel("leftmiddlePanelHeader", "1%", "1%", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Room Info&lt;/b&gt;&lt;/center&gt;]], left_container_middle, nil, headerStyleSheet)

  local styleSheetHidden = {
    borderColor = 'black',
    backgroundColor = 'black',
    borderRadius = 1,
  }

  RoomLabel = createLabel("RoomLabel", "3%", "22", "90%", "18", "white", [[&lt;center&gt;Room&lt;/center&gt;]], left_container_middle, nil, styleSheetHidden)
  ExitListLabel = createLabel("ExitListLabel", "3%", "40", "90%", "18", "yellow", [[&lt;left&gt;&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim1Label = createLabel("Victim1Label", "3%", "60", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim2Label = createLabel("Victim2Label", "3%", "80", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim3Label = createLabel("Victim3Label", "3%", "100", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  
  Victim1Label:hide()
  Victim2Label:hide()
  Victim3Label:hide()
  
  --bottom container on left for spell effects
  left_container_bottom = Geyser.Container:new({
    name = "left_container_bottom",
    x=0, y="70%",                 
    width = "100%", height="30%", 
  }, left_container)
  
  left_container_background = createLabel("left_container_background", "1%", "0", "95%", "100%", "black", nil, left_container_bottom, nil, headerStyleSheet)
  lowerWindow("left_container_background")
  leftlowerPanelHeader = createLabel("leftlowerPanelHeader", "1%", "0", "95%", "18", "orange", [[&lt;center&gt;&lt;b&gt;Affects&lt;/b&gt;&lt;/center&gt;]], left_container_bottom, nil, headerStyleSheet)

  local affectLabelHeight = 15
  local rowSpacing = affectLabelHeight + 3
  local rowStartY = 26

  -- affect labels
  MoveHiddenLabel = createLabel("MoveHiddenLabel", "3%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Move Hidden&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SneakLabel = createLabel("SneakLabel", "34%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sneak&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvisLabel = createLabel("InvisLabel", "65%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invis&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SancLabel = createLabel("SancLabel", "3%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sanctuary&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FrenzyLabel = createLabel("FrenzyLabel", "34%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Frenzy&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WaterLabel = createLabel("WaterLabel", "65%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;WaterBreath&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FortLabel = createLabel("FortLabel", "3%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Fortitudes&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FociLabel = createLabel("FociLabel", "34%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Foci&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  AwenLabel = createLabel("AwenLabel", "65%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Awen&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvincLabel = createLabel("InvincLabel", "3%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invinc&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  BarkLabel = createLabel("BarkLabel", "34%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Barkskin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SteelLabel = createLabel("SteelLabel", "65%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Steel Skel&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  IronLabel = createLabel("IronLabel", "3%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Iron Skin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  ConcentrateLabel = createLabel("ConcentrateLabel", "34%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Concentrate&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WerreLabel = createLabel("WerreLabel", "65%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Werrebocler&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)

  --START SPECIFICS
    -- Create an empty table to store the Layout.Labels
  local labelIndex = 1  -- Counter for label names
  rowStartY = rowStartY + 5 * rowSpacing
  
  for row = 1, 4 do
    for column = 1, 3 do
      local x, y
      if column == 1 then
        x = "3%"
      elseif column == 2 then
        x = "34%"
      else
        x = "65%"
      end
      
      
      local y = tostring(rowStartY + (row - 1) * rowSpacing)
  
      Layout.Labels[labelIndex] = createLabel("Skill" .. labelIndex .. "Label", x, y, "28%", affectLabelHeight, "white", "Extra Label", left_container_bottom, nil, styleSheetOn)
      Layout.Labels[labelIndex]:hide()
  
      labelIndex = labelIndex + 1
    end
  end

  -- RIGHT CONTAINER 
  setBorderRight(RightPanelWidth)
  
  -- Top border
  right_container = Geyser.Container:new({
    name = "right_container",
    x = mainWidth - RightPanelWidth, y = 0,
    width = RightPanelWidth, height = "100%",
  })
  
  -- RightOutline
  RightOutline = createLabel("LeftBorder", "0", "0", "100%", "100%", "black", [[&lt;center&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  lowerWindow("RightOutline")


  -- Channel Consoles
  local function createChatWindow(name, x, y, width, height, parent)
    return Geyser.MiniConsole:new({
      name = name,
      x = x, y = y,
      autoWrap = true,
      color = "black",
      scrollBar = true,
      fontSize = Layout.DefaultFontSize,
      width = width, height = height,
    }, parent)
  end
  
  PublicChannels = createChatWindow("Channels", "1%", "2%", "99%", "23%", right_container)
  GroupChat = createChatWindow("GroupChat", "1%", "27%", "99%", "23%", right_container)
  BuddyChat = createChatWindow("BuddyChat", "1%", "52%", "99%", "23%", right_container)
  GameChat = createChatWindow("GameChat", "1%", "77%", "99%", "23%", right_container)

  ChannelLabel = createLabel("ChannelLabel", "0", "0", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Public Channels&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GroupLabel = createLabel("GroupLabel", "0", "25%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Group Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  BuddyLabel = createLabel("BuddyLabel", "0", "50%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Buddy Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GameLabel = createLabel("GameLabel", "0", "75%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Game Messages&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
    
  --BOTTOM STAT PANEL
  setBorderBottom(129)
  
  Bottom_container = Geyser.Container:new({
    name = "Bottom_container",
    x = LeftPanelWidth -10, y= mainHeight-129,                    -- makes the container start where left panel ends
    width = CentrePanelWidth, height="135",      -- filling it up until the end
  })
  
  FillLabel = createLabel("FillLabel", "0", "0", "100%", "95%", "black", "&lt;center&gt;&lt;/center&gt;", Bottom_container, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})
  
  CharPanel = Geyser.Container:new({
    name="CharPanel",
    x="0", y="0",
    width="100%", height="50",
  }, Bottom_container)
  
  CharBackGround = createLabel("CharBackGround", "0", "0", "100%", "100%", "black", "&lt;center&gt;&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})

  -- Lower windows after creation
  lowerWindow("CharBackGround")
  lowerWindow("FillLabel")

  CharNameLabel = createLabel("CharNameLabel", "0", "0", CentrePanelSize*3, "50", "black", "&lt;center&gt;char name&lt;/center&gt;", CharPanel, 6, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharInfoLabel = createLabel("CharInfoLabel", CentrePanelSize*3, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char info&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharLevelLabel = createLabel("CharLevelLabel", CentrePanelSize*3, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharHitDamLabel = createLabel("CharHitDamLabel", CentrePanelSize*6, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Hit/Dam&lt;/center&gt;", CharPanel, 1, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharACLabel = createLabel("CharACLabel", CentrePanelSize*6, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Armor Class&lt;/center&gt;", CharPanel, 3, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  RunXPLabel = createLabel("RunXPLabel", CentrePanelSize*9, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run XP&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunKillsLabel = createLabel("RunKillsLabel", CentrePanelSize*9, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Kills&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunLevelsLabel = createLabel("RunLevelsLabel", CentrePanelSize*11, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunStatsLabel = createLabel("RunStatsLabel", CentrePanelSize*11, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Stat&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})

  -- Clickable Labels
  RunReportLabel = createLabel("RunReportLabel", CentrePanelSize*13, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Report&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunReportLabel:setClickCallback("ReportRun")

  RunResetLabel = createLabel("RunResetLabel", CentrePanelSize*14, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Reset&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunResetLabel:setClickCallback("ResetRun")

  
  --SECTION FOR HANDLING AUTOKILL OPTIONS

  -- AutoKillLabel creation

  local function createKillLabel(name, message, callbackArg)
    local killLabel = AutoKillLabel:addChild({name=name, height=30, width=CentrePanelSize*2, layoutDir="TV", flyOut=true, message=message})
    killLabel:setClickCallback("AutoKillFunc", callbackArg)
    killLabel:setStyleSheet([[
        border-width: 1px;
        border-style: solid;
        border-color: yellow;
        background-color: green;
        border-radius: 3px;
    ]])
    killLabel:setFontSize(Layout.DefaultFontSize)
    return killLabel
  end

  AutoKillLabel = Geyser.Label:new({
      name = "AutoKillLabel",
      x = CentrePanelSize*15, y = "0",
      width = CentrePanelSize*2, height = "25",
      fgColor = "white",
      message = [[&lt;center&gt;AutoKill OFF&lt;/center&gt;]],
      nestable = true
  }, CharPanel)
  
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheetOn))
  -- Add other AutoKillLabel configurations here...
  
  KillLabel1 = createKillLabel("KillLabel1", "Kill", "Kill")
  KillLabel2 = createKillLabel("KillLabel2", "Surp", "Surp")
  KillLabel3 = createKillLabel("KillLabel3", "Backstab", "BS")
  KillLabel4 = createKillLabel("KillLabel4", "Bash", "Bash")
  KillLabel5 = createKillLabel("KillLabel5", " ", "OFF")
  KillLabel6 = createKillLabel("KillLabel6", "AUTO OFF", "OFF")
  
  -- AutoSkillLabel creation
  local autoSkillStyleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  local autoSkillMessage = GlobalVar.AutoSkill and "&lt;center&gt;AutoSkill " .. GlobalVar.SkillStyle .. "&lt;/center&gt;" or "&lt;center&gt;AutoSkill OFF&lt;/center&gt;"

  AutoSkillLabel = createLabel("AutoSkillLabel", CentrePanelSize*17, 0, CentrePanelSize*3, 25, "white", autoSkillMessage, CharPanel, nil, autoSkillStyleSheet)
  AutoSkillLabel:setClickCallback("AutoSkillToggle")
  

  -- AutoBashLabel creation
  local autoBashStyleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff
  local autoBashMessage = GlobalVar.AutoBash and "&lt;center&gt;AutoBash ON&lt;/center&gt;" or "&lt;center&gt;AutoBash OFF&lt;/center&gt;"

  AutoBashLabel = createLabel("AutoBashLabel", CentrePanelSize*15, 25, CentrePanelSize*2, 25, "white", autoBashMessage, CharPanel, nil, autoBashStyleSheet)
  AutoBashLabel:setClickCallback("AutoBashToggle")

  -- AutoCastLabel creation
  local autoCastStyleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff
  local autoCastMessage = GlobalVar.AutoCast and "&lt;center&gt;AutoCast - ".. GlobalVar.AutoCaster .. "&lt;/center&gt;" or "&lt;center&gt;AutoCast OFF&lt;/center&gt;"

  AutoCastLabel = createLabel("AutoCastLabel", CentrePanelSize*17, 25, CentrePanelSize*3, 25, "white", autoCastMessage, CharPanel, nil, autoCastStyleSheet)
  AutoCastLabel:setClickCallback("AutoCastToggle")
  
  LagLabel = createLabel("LagLabel", 10, 55, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Comm Lag&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  QiLabel = createLabel("QiLabel", 10, 80, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Qi&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  SavespellLabel = createLabel("SavespellLabel", 10, 105, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Savespell&lt;/center&gt;", Bottom_container, nil, styleSheetOff)

  
  -- Gauges
  local commonFrontStyle = [[
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
  ]]
  local commonBackStyle = [[
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
  ]]
   
  local barTable = {
    MainHPBar = {
      x = 2, y = "55", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    MainMPBar = {
      x = 2, y = "80", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    MoveBar = {
      x = 8, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #78bd33, stop: 0.1 #6ebd20, stop: 0.49 #4c9900, stop: 0.5 #387000, stop: 1 #4c9900)",
    },
    TNLBar = {
      x = 8, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff9900, stop: 1 #990000)",
    },
    MonitorBar = {
      x = 14, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff00ff, stop: 0.3 #ff33cc, stop: 1 #cc0066)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffffff, stop: 1 #ffccff)",
    },
    EnemyBar = {
      x = 14, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    WeightBar = {
      x = 2, y = "105", width = 5.5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #467387, stop:.04 #69b7db, stop:.09 #9feae5, stop:.28 #2addd1, stop:.46 #31f9f9, stop:.67 #29bbce, stop:1 #045f89)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    ItemsBar = {
      x = 8, y = "105", width = 5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #8a2f2f,stop: .22 #581111,stop: .48 #641414,stop: .68 #7e1919,stop: 1 #b17575)",
    },
    AlignmentBar = {
      x = 14, y = "105", width = 5, height = "20",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",

    },
  }
  
  -- Bar styles
  local barStyles = {}
  for barName, barVars in pairs(barTable) do
    barStyles[barName] = {
      x = CentrePanelSize * barVars.x,
      y = barVars.y,
      width = CentrePanelSize * barVars.width,
      height = barVars.height,
      front = "background-color: "..barVars.front..";"..commonFrontStyle,
      back = "background-color: "..barVars.back..";"..commonBackStyle,
    }
  end
  
  -- Bar creation function
  function createBar(name, styles, parent)
    local bar = Geyser.Gauge:new({
      name=name,
      x=styles.x, y=styles.y,
      width=styles.width, height=styles.height,
    }, parent)
    
    bar.front:setStyleSheet(styles.front)
    bar.back:setStyleSheet(styles.back)
    return bar
  end
  
  MainHPBar = createBar("MainHPBar", barStyles["MainHPBar"], Bottom_container)
  MainMPBar = createBar("MainMPBar", barStyles["MainMPBar"], Bottom_container)
  MoveBar = createBar("MoveBar", barStyles["MoveBar"], Bottom_container)
  TNLBar = createBar("TNLBar", barStyles["TNLBar"], Bottom_container)
  MonitorBar = createBar("MonitorBar", barStyles["MonitorBar"], Bottom_container)
  EnemyBar = createBar("EnemyBar", barStyles["EnemyBar"], Bottom_container)
  WeightBar = createBar("WeightBar", barStyles["WeightBar"], Bottom_container)
  ItemsBar = createBar("ItemsBar", barStyles["ItemsBar"], Bottom_container)
  AlignmentBar = createBar("AlignmentBar", barStyles["AlignmentBar"], Bottom_container)

end

Layout.FirstLoad = Layout.FirstLoad or false
if GlobalVar.GUI and not Layout.FirstLoad then LoadLayout(); Layout.FirstLoad = true end

--registerAnonymousEventHandler("sysWindowResizeEvent", LoadLayout)</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Group Update</name>
				<packageName></packageName>
				<script>-------------------------------------------------
-- Group GUI Update Script   
-- Updates all the groupmate info in the group container
-------------------------------------------------

local SmallScreen = true

-- called on update to GMCP_Group()
function UpdateGroupGUI(GroupieTableIndex, Player)
  local player_name = Player.name
  local player_level = tonumber(string.sub(Player.level,1,3))
  local player_tier = (string.sub(Player.level,5))
  if StatTable.CharName == Player.name then
    player_name = "&lt;left&gt;&lt;span style='color: rgb(255,255,255)'&gt;" .. Player.name .. "&lt;/span&gt;"
    if Player.leader then player_name = "&lt;b&gt;" .. player_name .. "&lt;/b&gt;" end
  elseif Player.leader then
    player_name = "&lt;b&gt;&lt;left&gt;&lt;span style='color: rgb(255,0,0)'&gt;" .. Player.name .. "&lt;/span&gt;&lt;/b&gt;"
  
  end
  
  if AR.Status then
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(10,126,242)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name .. "&lt;/left&gt;")
  else
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(125,125,125)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name  .. "&lt;/left&gt;")
  end
  
  GroupieTable[GroupieTableIndex].NameLabel:setClickCallback(function() send("r " .. Player.name) end)
--  GroupieTable[GroupieTableIndex].InfoLabel:echo("&lt;left&gt;" ..player_level .. ":".. Player.race .. "-" .. Player.class .. "&lt;/left&gt;")
  if player_tier == "Hero" and player_level &lt;= 101 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;red&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Hero" and player_level &gt;= 950 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;green&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Lord" and player_level &gt;= 999 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;red&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Lord" and player_level &lt; 999 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;purple&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  else
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;white&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  end
  GroupieTable[GroupieTableIndex].InfoLabel:setClickCallback(function() OnMobDeathQueue("monitor " .. Player.name) end)

  RaceTNL = Player.race
    if RaceTNL ~= "Fdk" then
      MaxTnl = tnlByRace[RaceTNL]
    else
      if player_tier ~= "Hero" and player_tier ~= "Lord" and player_level &lt;= 25 then
        MaxTnl = 8333
      elseif player_tier ~= "Hero" and player_tier ~= "Lord" and player_level &lt;= 50 then
        MaxTnl = 6250
      elseif player_tier == "Hero" and player_level &lt;= 250 then
        MaxTnl = 5000
      elseif player_tier == "Hero" and player_level &lt;= 500 then
        MaxTnl = 4166
      elseif player_tier == "Hero" and player_level &lt;= 750 then
        MaxTnl = 3703
      elseif player_tier == "Hero" and player_level &lt;= 999 then
        MaxTnl = 3448
      elseif player_tier == "Lord" and player_level &lt;= 250 then
        MaxTnl = 3225
      elseif player_tier == "Lord" and player_level &lt;= 500 then
        MaxTnl = 3030
      elseif player_tier == "Lord" and player_level &gt; 500 then
        MaxTnl = 2857
      end
    end
 
  local PlayerMaxHP = tonumber(Player.maxhp)
  local PlayerHP = math.min(tonumber(Player.hp), PlayerMaxHP)
  local Playertnl = tonumber(Player.tnl)
  local MaxTNL = tonumber(MaxTnl)
  
  temptnlmax = MaxTNL
    if(tonumber(Player.tnl)&gt;tonumber(MaxTnl)) then
      temptnlmax = Player.tnl
    end
  

  GroupieTable[GroupieTableIndex].TNLBar:setValue(Playertnl, tonumber(temptnlmax),"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(250,250,250)'&gt;".. Player.tnl .. " TNL &lt;/center&gt;")
  --GroupieTable[GroupieTableIndex].TNLLabel:cecho("&lt;center&gt;&lt;white&gt;" .. Player.tnl .. "/" .. MaxTnl .. "&lt;/center&gt;")
  GroupieTable[GroupieTableIndex].HPBar:setValue(PlayerHP, PlayerMaxHP,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(250,250,250)'&gt;".. Player.hp .. "/" .. Player.maxhp .. (SmallScreen and "" or "/" .. PlayerMaxHP) .. "&lt;/center&gt;")
  local HPBar_HealSpell = StatTable.Level == 125 and "cast comfort " .. Player.name or "cast divinity ".. Player.name
  GroupieTable[GroupieTableIndex].HPMaskLabel:setClickCallback(function() send(HPBar_HealSpell) end)
  
  local PlayerMaxMana = tonumber(Player.maxmp)
  local PlayerMana = math.min(tonumber(Player.mp), PlayerMaxMana)    
      
  if(PlayerMaxMana == nil or PlayerMaxMana == 0) then
    GroupieTable[GroupieTableIndex].ManaBar:setValue(1,1,"&lt;center&gt;&lt;font-size ='5px'&gt;No MP&lt;/center&gt;")
  else
    GroupieTable[GroupieTableIndex].ManaBar:setValue(PlayerMana,PlayerMaxMana,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(0,0,0)'&gt;".. Player.mp .. "/" .. Player.maxmp .. (SmallScreen and "" or "/" .. PlayerMaxMana) .. "&lt;/center&gt;")
  end

  if (Player.class == "Sor" or Player.class == "Mag" or Player.class == "Wzd" or Player.class == "Psi" or Player.class == "Mnd" or Player.class == "Stm") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);]])
  elseif (Player.class == "Prs" or Player.class == "Cle" or Player.class == "Dru" or Player.class == "Pal" or Player.class == "Viz") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900);]])           
  else
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3399ff, stop: 0.1 #3399ff, stop: 0.49 #92c7fc, stop: 0.5 #178bff, stop: 1 #17aaff);]])
  end

local path = getMudletHomeDir() .. "/images"
if(Player.position == "STUN") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/images/stun.png")]]
elseif(Player.position == "Busy") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/busy.png")]]
elseif(Player.position == "Rest") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/resting.png")]]
elseif(Player.position == "Fight") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/fighting.png")]]
elseif(Player.position == "Stand") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/standing.png")]]
elseif(Player.position == "Sleep") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/griff/.config/mudlet/images/sleeping.png")]]
end

  GroupieTable[GroupieTableIndex]:show()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>tnlByRace</name>
				<packageName></packageName>
				<script>tnlByRace = {
  Cen = 2857,
  Dgn = 1111,
  Drc = 1515,
  Drw = 1176,
  Due = 1111,
  Dwf = 1111,
  Elf = 1250,
  Ent = 20000,
  Gar = 2857,
  Gia = 1428,
  Gno = 1111,
  Gob = 800,
  Har = 1515,
  Hel = 1052,
  Hlf = 1111,
  Hor = 1111,
  Hum = 1000,
  Kob = 666,
  Kzn = 1538,
  Liz = 1052,
  LsI = 5000,
  Mir = 2857,
  Ogr = 1333,
  Orc = 1176,
  Trg = 1052,
  Dem = 1515,
  Drg = 10000,
  Dsd = 1515,
  Fae = 3125,
  Gol = 2000,
  Grf = 4000,
  Gth = 1666,
  HiE = 2000,
  Hob = 1000,
  Ign = 2857,
  Min = 1428,
  Spr = 1052,
  Trl = 1333,
  Tua = 1538,
  MnI = 4000,
  DtI = 3333,
  WvI = 2857,
  VpI = 2857,
  Dri = 2857,
  PyI = 2500,
  LsE = 2500,
  PaE = 2040,
  FrG = 1428,
  FiG = 1428,
  ClG = 1428,
  StG = 1428,
  BkD = 10000,
  BuD = 10000,
  GrD = 10000,
  WhD = 10000,
  Ill = 3225,
}</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
