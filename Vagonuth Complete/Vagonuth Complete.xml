<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Vagonuth-Inventory-Mgmt</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>Vagonuth-Inventory-Mgmt</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Vagonuth Inventory &amp; Alleg Management Triggers</name>
				<script>-- Only works on characters lord and below (eg not legends)</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>return not (gmcp.Char and gmcp.Char.Status and gmcp.Char.Status.level and tonumber(gmcp.Char.Status.level) &gt; 125)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>4</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Worship</name>
					<script>AltList.UpdateWorship(matches.worship, (matches.devoted == "devoted worshipper" and true or false))
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are \d+ years old \(\d+ real life hours?\) and a (?&lt;devoted&gt;devoted worshipper|worshipper) of (?&lt;worship&gt;.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Worship - Atheist</name>
					<script>AltList.UpdateWorship("Atheist", false)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You are \d+ years old \(\d+ real life hours?\) .$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>On Insig</name>
					<script>
if not OnInsig.isOpen then   -- this checks for the first line, and initializes your variables
   OnInsig.len = 1
   OnInsig.isOpen = true
   if not OnInsig.Lock then OnInsig.InsigArray = {} end
end

OnInsig.len = OnInsig.len + 1   -- this keeps track of how many lines the trigger is capturing

if not OnInsig.IsPrompt(line) then
  OnInsig.ArrayAddLine(line)
else
  OnInsig.ArrayFinish()
  OnInsig.len = 0
  OnInsig.isOpen = false
end

setTriggerStayOpen("On Insig",OnInsig.len)   -- this sets the number of lines for the trigger to capture

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>10</conditonLineDelta>
					<mStayOpen>10</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your insignia:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg - Lock</name>
					<script>--print("\nAlleg lock called (" .. matches[2] .. ")")
if matches[2] == "a ruby" then
  AltList.GivenAllegRuby = true
else
  AltList.GivenAllegItem = true
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You give (.*) to Allegaagse.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg Lookup</name>
					<script>if clue == "What do I need?"
   or clue == "Exactly what I wanted, thank you."
   or clue == "Here is something for your trouble."
   or clue == "Fine, I will find someone else to get that for me." 
   or clue == "Now go away. Maybe I will see if you can be useful some other time."
   or clue == "You have done such a good job that I have raised my estimation of your worth as a searcher."
   or clue == "Hah, \"seen\", get it?'" then return end
   
if AltList.GivenAllegRuby then 
  
  item, item_plane = findItemAndPlane(matches.clue)
  --print("DEBUG: Alleg Lookup (" .. matches.clue .. ")")
  
  if item and item_plane then
    printMessage("\nAlleg's request", item .. " (" .. item_plane .. ")", "yellow", "white")
    
    printGameMessage("Alleg's request", item .. " (" .. AltList.GetCharName() .. ")", "yellow")
    AltList.AllegRecordRequest(item)
    AltList.GivenAllegRuby = false
    
    if not InventoryList.SearchReport(item) then
     --print("Not found, consider giving up?")
    end
    
    AltList.ReportNextAvailableAlleg()
    raiseEvent("AllegRecordRequest")
  end
 end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Allegaagse says '(?&lt;clue&gt;.*)'$</string>
						<string>^Allegaagse asks '(?&lt;clue&gt;.*)'$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg - Gave Up</name>
					<script>if AltList.GivenAllegRuby then 
  AltList.GivenAllegRuby = false
  AltList.AllegRecordGiveUp()
  print("\n")
  AltList.ReportNextAvailableAlleg()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'Feel free to continue paying me for my time though.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg Clear</name>
					<script>--You give an aurora bow to Allegaagse.                                            [ALLEG - Medium]

--&lt;7738/7738hp 24763/24839ma 12361v 796&gt; 0 lag - - surge off 

--Allegaagse says 'Exactly what I wanted, thank you.'
--Allegaagse says 'Here is something for your trouble.'
--You have received an award of 5 practice points!

if AltList.GivenAllegItem then
  AltList.AllegRecordCleared()
  send("insig", false)
  AltList.GivenAllegItem = false
  print("\n")
  AltList.ReportNextAvailableAlleg()
  raiseEvent("AllegRecordCleared")
end

--Allegaagse says 'You have done such a good job that I have raised my estimation of your worth as a searcher.'
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'Here is something for your trouble.'</string>
						<string>Allegaagse says 'You have done such a good job that I have raised my estimation of your worth as a searcher.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Gold</name>
					<script>-- You have 38955 gold coins in hand and 2160189 gold coins in the bank.
--^account which now totals (?&lt;bank&gt;\d+) coins.$
local gold = matches.bank + (matches.onhand and matches.onhand or 0)
AltList.UpdateGold(gold)
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have (?&lt;onhand&gt;\d+) gold coins in hand and (?&lt;bank&gt;\d+) gold coins in the bank.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Bank deposit</name>
					<script>sendGMCP("Char.Status")

local gold = matches.bank 

-- give gmcp.Char.Status.gold 2 seconds to update itself
tempTimer(2, function()
  gold = gold + (tonumber(gmcp.Char.Status.gold) or 0)
  AltList.UpdateGold(gold)
end)
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\w+, you deposit \d+ coins( and gemstones)?. Your account now has (?&lt;bank&gt;\d+) coins.$</string>
						<string>^has a total of (?&lt;bank&gt;\d+) coins in it.$</string>
						<string>^(account )?which now totals (?&lt;bank&gt;\d+) coins.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Pracs</name>
					<script>AltList.UpdatePracs(matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You need \d+ experience to level and have (\d+) practices.$</string>
						<string>'You have (\d+) practice sessions left.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>QP</name>
					<script>AltList.UpdateQP(matches[2])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have (\d+) quest points?.$</string>
						<string>^You have (\d+) quest points? remaining.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Receive QP</name>
					<script>-- You have received an award of 5 quest points!

local QP = AltList.Chars[AltList.GetCharName()].QP + matches[2]
printGameMessage("QP!", "Received " .. matches[2] .. " QP", "yellow", "white")
AltList.UpdateQP(QP)
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You have received an award of (\d+) quest points!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Server time</name>
					<script>-- This trigger will calculate the timezone difference between the server and the player whenever the "time" command is used
-- It'll save this difference between different play sessions

-- Function to convert date string to seconds since epoch (Unix timestamp)
local function convertToTimestamp(dateStr)
    -- Define month names and their numeric representations
    local monthNames = {
        Jan = 1, Feb = 2, Mar = 3, Apr = 4, May = 5, Jun = 6,
        Jul = 7, Aug = 8, Sep = 9, Oct = 10, Nov = 11, Dec = 12
    }

    -- Extract date components from the string
    local day, monthName, dayOfMonth, time, year = dateStr:match("(%a+) (%a+)  ?(%d+) (%d+:%d+:%d+) (%d+)")

    -- Get the numeric month value
    local month = assert(monthNames[monthName], "Invalid month name")

    -- Extract time components
    local hour, minute, second = time:match("(%d+):(%d+):(%d+)")

    -- Create a date table with the extracted components
    local dateTable = {
        year = tonumber(year),
        month = tonumber(month),
        day = tonumber(dayOfMonth),
        hour = tonumber(hour),
        min = tonumber(minute),
        sec = tonumber(second)
    }

    -- Calculate the Unix timestamp (seconds since epoch)
    local timestamp = os.time(dateTable)

    return timestamp
end

-- some timezones are 30 mins off (eg Newfoundland, India)
local function roundToNearestHalf(number)
    local floorValue = math.floor(number)
    local fractionalPart = number - floorValue

    if fractionalPart &lt; 0.25 then
        return floorValue
    elseif fractionalPart &lt; 0.75 then
        return floorValue + 0.5
    else
        return floorValue + 1
    end
end

local timestamp = convertToTimestamp(matches.time) -- parse the server time reported in the command "time"

local timediff = roundToNearestHalf((os.time() - timestamp)/3600) -- take the difference between local time and servertime and calc the hour diff

if timediff &gt; 24 or timediff &lt; -24 then
  error("Trigger: Server time (timezone difference greater than 24 hours)")
  return
end

AltList.TimeZone = timediff

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^The System time \(EST\) is currently:           (?&lt;time&gt;.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>On Locker</name>
					<script>
if not OnLocker.isOpen then   -- this checks for the first line, and initializes your variables
   OnLocker.len = 1
   OnLocker.isOpen = true
   OnLocker.LockerArray = {}
end

OnLocker.len = OnLocker.len + 1   -- this keeps track of how many lines the trigger is capturing

if line ~= "" then
  local locker_item = string.match(line, "%d+  (.+)")
  if locker_item ~= nil then 
    locker_item = string.gsub(locker_item, '^%s*(.-)%s*$', '%1')
    table.insert(OnLocker.LockerArray,{name = locker_item})
  end
else  
   InventoryList.AddLocker(OnLocker.LockerArray)
   OnLocker.len = 0
   OnLocker.isOpen = false
end

setTriggerStayOpen("On Locker",OnLocker.len)   -- this sets the number of lines for the trigger to capture



</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>10</conditonLineDelta>
					<mStayOpen>10</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Your locker contains (\d+) items:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Existing Character.</name>
					<script>sendGMCP("Char.Group.List")
sendGMCP("Char.Status")
sendGMCP("Char.Vitals")

tempTimer(4, function()

  local char_name = string.lower(gmcp.Char.Status.character_name):gsub("^%l", string.upper)

  if char_name == "" then 
  cecho("&lt;yellow&gt;Vagonuth-Inventory-Mgmt error: &lt;white&gt;could not get character name, gmcp returning &lt;red&gt;" .. char_name .. "\n")
  cecho("If this is different than the name you logged in with, try reconnecting to AVATAR\n")
  error("gmcp.Char.Status.character_name not returning character name"); return false; end

  -- Sometimes gmcp.Char.Status bugs out and requires a relog. We can check this against gmcp.Char.Group.List
  for _,Player in ipairs(gmcp.Char.Group.List) do
    if Player.name == char_name then
      return true
    end
  end
  
  cecho("&lt;yellow&gt;Vagonuth-Inventory-Mgmt error: &lt;white&gt;could not get character name, gmcp returning &lt;red&gt;" .. char_name .. "\n")
  cecho("If this is different than the name you logged in with, try reconnecting to AVATAR\n")
  display(gmcp.Char.Group.List)

  error("gmcp.Char.Status is not matching gmcp.Char.Group")
  return false

end)

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Existing Character.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Welcome Back</name>
					<script>AltList.LoginName = string.lower(matches.charname):gsub("^%l", string.upper)
InventoryList.LoginName = string.lower(matches.charname):gsub("^%l", string.upper)
if GlobalVar.Debug then printMessage("Debug", "Character is " .. AltList.GetCharName()) end

if AltList.TimeZone == 0 then tempTimer(5, function() send("time"); end); end
if not AltList.Chars[AltList.LoginName] then
  print("\n")
  printGameMessage("InvMgmt", "Running info collection commands on first login (" .. AltList.LoginName .. ")")
  printGameMessage("InvMgmt", "Please wait 10 seconds before logging in with a different alt")
  printGameMessage("InvMgmt", "Type ihelp for a full list of commands")  
  tempTimer(5, function() send("score" .. getCommandSeparator() .. "worth" .. getCommandSeparator() .. "questpoints" .. getCommandSeparator() .. "insig", false); end)
  tempTimer(10, function() printGameMessage("InvMgmt", "Info collected, thank you!") end)
  
  AltList.WelcomeTimer = AltList.WelcomeTimer or nil

  local function killWelcomeTimer()
    if AltList.WelcomeTimer then
      killTimer(AltList.WelcomeTimer)
    end
  end
  killWelcomeTimer()
  
  AltList.WelcomeTimer = tempTimer(5, function()
    InventoryList.UpdateItems("inv", false)
  end)
  
  registerAnonymousEventHandler("sysDisconnectionEvent", killWelcomeTimer, true)
end







</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Welcome( back)? to the AVATAR System(, Hero|, Lord|, Lady|, Legend)? (?&lt;charname&gt;\w+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Reconnecting</name>
					<script>AltList.LoginName = nil
InventoryList.LoginName = nil
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Reconnecting.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Lotto Pinfo Inventory Count</name>
					<script>-- Zaffer's format:
--  1 * a shaleskin arm guard (3) 
-- Hydro's format:
-- 2. a sandblasted emerald



local items_owned = 0
items_owned = InventoryList.ItemsOnHand(matches.item)
--print(matches.item)

if items_owned &gt; 0 then
  deleteLine()
  cecho("\n&lt;ansi_yellow&gt;" .. matches[1] .. " " .. "&lt;yellow&gt;[Owned: " .. items_owned .. "]\n")
  cecho("\n")
--else
  --cecho("&lt;ansi_yellow&gt;" .. line .. "\n")
--  cecho("&lt;ansi_yellow&gt;" .. line .. " " .. "&lt;yellow&gt;[None]\n")
--  echo("\n")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^#\d+ \(x\d+\) (?&lt;item&gt;.*)$</string>
						<string>^\d+. \(x\d+\)  (?&lt;item&gt;.*)$</string>
						<string>^ ?\b\d{1,2}\b\.? (\*|\+|\-|\$|\@)? ?(?&lt;item&gt;.+?)(?:\s+\(\d+\))?$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg says remind me</name>
					<script>if AltList.GivenAllegRuby then
  TryAction("say remind me", 2)
  TryAction("get ruby", 2)
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'If you don't remember the task just say REMIND ME.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>venison</name>
					<script>tempTimer(1, function() cecho("&lt;yellow&gt;Type 'run-venison' to collect turn in venison\n") end)</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'Where's the beef? Actually, I prefer some venison.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>QP transfer</name>
					<script>local transferee = GMCP_name(matches[3])

if AltList.PlayerExists(transferee) then
  local transferee_qp = AltList.Chars[transferee].QP or 0
  transferee_qp = transferee_qp + matches[2]
  AltList.UpdateQP(transferee_qp, transferee)
else
  printGameMessage("Debug", "QP transferee not found, never logged in with this package on that alt?")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\d+) Quest Points transferred to (\w+) and a fee of 0 quest points were automatically subtracted.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg Reward</name>
					<script>printGameMessage("Alleg's reward", matches[2] .. " (" .. AltList.GetCharName() .. ")", "yellow", "white")

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Allegaagse gives you (.*).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg Reward XP</name>
					<script>
local reward_xp = multimatches[2][2]

printGameMessage("Alleg's reward", "XP: " .. reward_xp .. " (" .. AltList.GetCharName() .. ")", "yellow")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>6</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'Here is something for your trouble.'</string>
						<string>^You have received an award of (\d+) experience points!$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Alleg Accepts Give Up</name>
					<script>raiseEvent("AllegGiveUp")

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Allegaagse says 'Now go away. Maybe I will see if you can be useful some other time.'</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Vagonuth-Package</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName>Vagonuth-Package</packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Vagouth Package</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Priority Triggers</name>
					<script>-- this Trigger folder should be at the top of your list</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Automaton / servitor death</name>
						<script>if (GlobalVar.GroupLeader == StatTable.CharName) then
  send("emote is killing elemental.")
  send(GlobalVar.KillStyle .. " elemental")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A servitor is DEAD!!</string>
							<string>A mighty automaton of earth is DEAD!!</string>
							<string>A furious automaton of fire is DEAD!!</string>
							<string>A sizzling automaton of acid is DEAD!!</string>
							<string>A frosty ice automaton is DEAD!!</string>
							<string>A crackling lightning automaton is DEAD!!</string>
							<string>A crashing water automaton is DEAD!!</string>
							<string>A bellowing air automaton is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>rescue trigger on emote</name>
						<script>if (AR.Status and StatTable.CharName ~= matches[2]) then
  AR.Rescue(string.lower(matches[2]))
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) is killing (\w+).</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Migraine</name>
						<script>
if (StatTable.WaterBreathingExhaust == nil) then
  Battle.NextAct("cast 'water breathing'", 5)

elseif IsClass({"Priest", "Paladin", "Ripper", "Druid",}) then
  if (StatTable.CureLightExhaust == nil) then
    Battle.NextAct("cast 'cure light'", 5)
  elseif (StatTable.CureSeriousExhaust == nil) then
    Battle.NextAct("cast 'cure serious'", 5)
  elseif (StatTable.CureCriticalExhaust == nil) then
    Battle.NextAct("cast 'cure critical'", 5) 
  end
else 
  if (StatTable.FireballExhaust == nil) then
    Battle.NextAct("cast fireball", 5)
  elseif StatTable.AcidBlastExhaust == nil then
    Battle.NextAct("cast 'acid blast'", 5) 
  elseif StatTable.ChillTouchExhaust == nil then
    Battle.NextAct("cast 'chill touch'", 5)
  elseif StatTable.BurningHandsExhaust == nil then
    Battle.NextAct("cast 'burning hands'", 5)  
  elseif StatTable.LightningBoltExhaust == nil then
    Battle.NextAct("cast 'lightning bolt'", 5)  
  end
end


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel a slight headache growing stronger...</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Battle Triggers</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>In Combat</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (Battle.Combat)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>BattleEnd</name>
								<script>raiseEvent("EndCombat")


</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>is DEAD!!</string>
									<string>You have been KILLED!!</string>
									<string>You flee</string>
									<string>^(\w+) bellows out a bloodcurdling roar!</string>
									<string>You sleep.</string>
									<string>has fled</string>
									<string>You have been calmed by</string>
									<string>You form a magical vortex and step into it...</string>
									<string>Cast the spell on whom?</string>
									<string>You sense something large flying at you, and realize, with a thud, that it is the ground!</string>
									<string>You recall from combat!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>1</integer>
									<integer>2</integer>
									<integer>0</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>MobFled</name>
								<script>-- A hideous hunchback has fled down! 
raiseEvent("OnMobFled")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(.*) has fled (\w+)!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Out of Combat</name>
							<script>-- Additionally, attacks picked up by the DamageCounter will also raise OnCombat</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return not (Battle.Combat)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>BattleStart</name>
								<script>
if string.find(line,"Your attack flow is enhanced for identical cutting weapons of weight") ~= nil then
  return
end

raiseEvent("OnCombat")

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>is in excellent condition.</string>
									<string>has a few scratches.</string>
									<string>has some small wounds and bruises.</string>
									<string>has quite a few wounds.</string>
									<string>has some big nasty wounds and scratches.</string>
									<string>looks pretty hurt.</string>
									<string>is in awful condition.</string>
									<string>Screaming a battle-cry, you enter the fray!</string>
									<string>Your attack</string>
									<string>You start fighting</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>BattleStart - Solitude Trigger</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>if StatTable.Solitude then return true end</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>4</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>BattleStart - Groupmates</name>
									<script>if IsGroupMate(matches.attacker) then
  raiseEvent("OnCombat")
end</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>^(?&lt;attacker&gt;.*)'s attacks? strikes?</string>
										<string>^(?&lt;attacker&gt;.*)'s bash strikes?</string>
										<string>^(?&lt;attacker&gt;.*)'s (?&lt;spell&gt;.*) strikes?</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>1</integer>
										<integer>1</integer>
										<integer>1</integer>
									</regexCodePropertyList>
								</Trigger>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>OnLook is DEAD (MOVE LATER)</name>
							<script>target = string.lower(matches[2])



if not IsGroupMate(target) then
  local count = 0
  local index = nil
  local allmobsonone = false
  for i, j in pairs(Battle.EnemiesAttacking) do
    if j[1] == target then 
      count = count + 1
      
      -- a bit of a hack, but if there's more than one mob with the same name and they're all attacking the same player, we can safely
      -- remove it from Battle.EnemiesAttacking even though we maybe be remove the wrong "numbered" mob name (i.e. Player[k].name)
      if (count &gt; 1) then
        if (j[2] == Battle.EnemiesAttacking[index][2]) then 
            allmobsonone = true
        else
            allmobsonone = false
        end
      end
       
      index = i
    end
  end
  if count &gt; 1 then
    Battle.MobCount = Battle.MobCount - 1
    if allmobsonone then
    --  print("allmobsonone")
      Battle.GroupiesUnderAttack[Battle.EnemiesAttacking[index][2]] = Battle.GroupiesUnderAttack[Battle.EnemiesAttacking[index][2]] - 1
      Battle.EnemiesAttacking[index] = nil -- we don't actually know if this is the right "numbered" name so we'll issue a look after anyways 
    else
       -- print("duplicate mob name attacking more than one player")
    end
    TryLook()
  elseif count == 1 then
    Battle.GroupiesUnderAttack[Battle.EnemiesAttacking[index][2]] = Battle.GroupiesUnderAttack[Battle.EnemiesAttacking[index][2]] - 1 
    Battle.EnemiesAttacking[index] = nil
    Battle.MobCount = Battle.MobCount - 1
  else
    --print("not our mob")
  end
 -- print("OnLook is DeaD:")
 -- TableShow(Battle.GroupiesUnderAttack)
 -- TableShow(Battle.EnemiesAttacking)
 -- print("Battle.MobCount = " .. Battle.MobCount)

end





  

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.*) is DEAD!!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Profile reset</name>
						<script>ProfileResetWait = ProfileResetWait or false

if ProfileResetWait then return end

printGameMessage("Profile Reset", "Attempted to cast a spell this class shouldn't attempt, reseting profile")
safeTempTimer("ProfileResetTimerID", 300, function() ProfileResetWait = nil; end)
Init.GlobalVars()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Casting (brimstone|torment|maelstrom|disintegrate|comfort) requires knowledge, and you will NEVER learn it!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On Plane</name>
						<script>raiseEvent("OnPlane")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You form a magical vortex and step into it...</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>glares and snarls</name>
						<script>local function getWord(str)
    local firstWord, secondWord = string.match(str, "(%S+)%s*(%S*)")
    
    if secondWord and #secondWord &gt; 0 then
        return secondWord
    else
        return firstWord
    end
end

-- if a mob glares and snarls and we're not in combat, try attacking it
if Battle.Combat then return end

mob_target = getWord(matches[2])

if mob_target == "Someone" then
  if gmcp.Room.Info.zone == "{*HERO*} Ibn     Aculeata Jatha-La" then mob_target = "wasp"
  else return; end
end




if (StatTable.current_health / StatTable.max_health) &lt; 0.5 then return end

if GlobalVar.AutoKill and GlobalVar.KillStyle and (GlobalVar.KillStyle ~= "kill" or AR.Status) then
  TryAction(GlobalVar.KillStyle .. " " .. mob_target, 5)
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>(.*) GLARES at \w+ and SNARLS!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>RunStats Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>RunStats - XP Gain</name>
						<script>RunStats.RunXp = (RunStats.RunXp + matches[2])
RunStats.RunKills = RunStats.RunKills + 1
RunXPLabel:echo(RunStats.RunXp)
RunKillsLabel:echo(RunStats.RunKills)

--^You gain (\d+) experience points for aiding your team in winning this epoch
--^You gain (\d+) experience points for aiding your team in conquering this node</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You receive (\d+) experience points\.$</string>
							<string>^You have received an award of (\d+) experience points!$</string>
							<string>^You gain (\d+) experience points for aiding your team</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="yes" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>RunStats - Level Gain</name>
						<script>RunStats.RunLevels = (RunStats.RunLevels + 1)
RunStats.RunHP = (RunStats.RunHP + matches[2])
RunStats.RunMP = (RunStats.RunMP + matches[4])
RunStats.RunMV = (RunStats.RunMV + matches[6])
RunStats.RunPrac = (RunStats.RunPrac + matches[8])
RunLevelsLabel:echo(RunStats.RunLevels .. " Levels")
RunStatsLabel:echo(RunStats.RunHP .. "HP / " .. RunStats.RunMP .. "MP" )

RunStats.HPGain = matches[2]
RunStats.HPMax = matches[3]
RunStats.MPGain = matches[4]
RunStats.MPMax = matches[5]
RunStats.MVGain = matches[6]
RunStats.MVMax = matches[7]
RunStats.PracGain = matches[8]
RunStats.PracMax = matches[9]

-- TODO: rewrite level DB someday
--tempTimer( 5, [[DBman.AddNewLevel(gmcp.Char.Status.character_name,gmcp.Char.Status.race,gmcp.Char.Status.class,gmcp.Char.Status.level,gmcp.Char.Status.sublevel,gmcp.Char.Status.area_name)]] )


if not GlobalVar.Silent then send("emote gained |BR|".. matches[2] .."|R| hp, |BB|" .. matches[4] .." |B|mana|N|, and |BW|" .. matches[8] .. "|W| pracs|N|.") end


printGameMessage("Level!", StatTable.CharName .. " [" .. (RunStats.RunStartLevel + RunStats.RunLevels) .. "]: " .. matches[2] .. "HP / " .. matches[4] .. "Ma")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile>C:/Users/griff/.config/Mudlet/sounds/Final Fantasy 1- Victory Music.mp3</mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your gain is: (\d+)\/(\d+) hp, (\d+)\/(\d+) m, (\d+)\/(\d+) mv (\d+)\/(\d+) prac.</string>
							<string>^You raise a level!!  Your gain is: (\d+)\/(\d+) hp, (\d+)\/(\d+) m, (\d+)\/(\d+) mv (\d+)\/(\d+) prac.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>RunStats - Heal XP</name>
						<script>RunStats.RunXp = RunStats.RunXp + tonumber(matches[2])
RunStats.RunHealXp = RunStats.RunHealXp + tonumber(matches[2])
RunXPLabel:echo(RunStats.RunXp)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Tul-Sith grants you (\d+) exp!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Spell Level Proc</name>
						<script>RunStats.SpellLevelProcs = RunStats.SpellLevelProcs + 1</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel a surge of might, empowering your spell beyond its limits!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Autoloot &amp; Quests</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>bits</name>
						<script>send("get bit")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The automaton falls to pieces</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem</name>
						<script>if not (GlobalVar.GroupMates[GMCP_name(matches[2])]) then
  send("get " .. matches[3])
  printGameMessage("PGEM!", "Perfect " .. matches[3] .. " left behind", "purple", "white")
  --if (StatTable.Level &lt; 125 and not GlobalVar.Silent) then
  --  send("gtell |BP|o|P|oOO|BP|oo|P|OO|BP|oo|P|O|BP|Oo|P|o |N|a |BW|perfect " .. matches[3] .. "|N|!")
  --end
end




</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) leaves behind a perfect (diamond|emerald|ruby|amethyst|sapphire)!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem - Art Blessing</name>
						<script>if not (GlobalVar.GroupMates[GMCP_name(matches[2])]) then
  send("get " .. matches[3])
  printGameMessage("PGEM!", "Perfect " .. matches[3] .. " left behind due to artificer blessing", "purple", "white")

end




</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) leaves behind a perfect (diamond|emerald|ruby|amethyst|sapphire) due to an artificer blessing!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem Pickup</name>
						<script>if (GlobalVar.GroupMates[GMCP_name(matches[2])]) then
  printGameMessage("PGEM!", "Perfect " .. matches[3] .. " picked up by " .. matches[2], "purple", "white")
  --if (StatTable.Level &lt; 125 and not GlobalVar.Silent) then
  --  send("gtell |BW|" .. matches[2] .. "|N| picks up the perfect |BP|" .. matches[3] .. "|N|!")
  --end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) gets a perfect (diamond|emerald|ruby|amethyst|sapphire)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem Pickup by me</name>
						<script>if (Grouped() and not GroupLeader()) then
  printGameMessage("PGEM!", "Perfect " .. matches[2] .. " picked up by me!", "purple", "white")
  send("give " .. matches[2] .. " " .. (IsMDAY() and StaticVars.PGemHolder or GlobalVar.GroupLeader))
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You get a perfect (diamond|emerald|ruby|amethyst|sapphire)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem pass</name>
						<script>printGameMessage("PGEM!", matches[2] .. " passes the perfect " .. matches[3] .. " to " .. matches[4], "purple", "white")

--if (GlobalVar.GroupMates[GMCP_name(matches[2])] and StatTable.Level &lt; 125 and not GlobalVar.Silent) then
  --send("gtell |BW|" .. matches[2] .. "|N| passes the perfect |BP|" .. matches[3] .. "|N| to |BW|" .. matches[4] .. "|N|!")
--end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) gives a perfect (diamond|emerald|ruby|amethyst|sapphire) to (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem to me</name>
						<script>if IsMDAY() then send("put perfect pgem") end

printGameMessage("PGEM!", matches[2] .. " passes the perfect " .. matches[3] .. " to me", "purple", "white")

--if (GlobalVar.GroupMates[GMCP_name(matches[2])]  and StatTable.Level &lt; 125 and not GlobalVar.Silent) then
--  send("gtell |BW|" .. matches[2] .. "|N| passes the perfect |BP|" .. matches[3] .. "|N| to |BW|me|N|. Thank you ".. matches[2] .."!")
--end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) gives you a perfect (diamond|emerald|ruby|amethyst|sapphire)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pgem passed by you</name>
						<script>printGameMessage("PGEM!", "You passed the perfect " .. matches[2] .. " to " .. matches[3], "purple", "white")

--if (GlobalVar.GroupMates[GMCP_name(matches[2])]  and StatTable.Level &lt; 125 and not GlobalVar.Silent) then
--  send("gtell |BW| I |N| passed the perfect |BP|" .. matches[2] .. "|N| to |BW|" .. matches[3] .. "|N|. Congrats ".. matches[3] .."!")
--end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You give a perfect (diamond|emerald|ruby|amethyst|sapphire) to (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On Mob Death</name>
						<script>if GlobalVar.GroupMates[GMCP_name(matches[2])] == nil then -- name not in grouplist, either a mob or a non-groupmate's death

  if (StatTable.Class == "Vizier" and GlobalVar.VizMonitor ~= "" and string.lower(GlobalVar.VizMonitor) ~= string.lower(StatTable.Monitor)) then
    send("monitor " .. GlobalVar.VizMonitor)
  end

  raiseEvent("OnMobDeath")
  
  if (GlobalVar.GUI) then
    Victim1Label:hide()
    Victim2Label:hide()
    Victim3Label:hide()
    Victim1Label:setClickCallback("")
    Victim2Label:setClickCallback("")
    Victim3Label:setClickCallback("")
  end


end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) is DEAD!!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Autoloot on Death</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return not GlobalVar.PerformanceMode</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Rapiers</name>
								<script>send("get rapier corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A frantic pirate is DEAD!!</string>
									<string>An insane pirate is DEAD!!</string>
									<string>A cursed pirate is DEAD!!</string>
									<string>One of Lord Audis' sailors is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fae Runes</name>
								<script>send("get rune corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^A memory of (\w+) is DEAD!!</string>
									<string>A young Fae is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Nectar</name>
								<script>send("get nectar corpse")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Heruta Skash Gzug is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Wafer</name>
								<script>send("get wafer corpse")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Administrator Gru-Dzek is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Storm Gems</name>
								<script>send("get gem")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A lightning gale is DEAD!!</string>
									<string>A lightning tempest is DEAD!!</string>
									<string>A howling storm head is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an object falls, shattering against the ground.</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>get amulet</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an object falls, shattering against the ground.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>medallion of justice</name>
								<script>send("get medal corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Zan and Jayna is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Flaming pants</name>
								<script>send("get pants corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The blazing man is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sceptre of Igecsoz</name>
								<script>send("get sceptre cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Queen Hcuyj is DEAD!!  </string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>The animated crab shell is DEAD!!</name>
								<script>send("get corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The animated crab shell is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>heroic dragonscale skirt</name>
								<script>send("get scale corpse")
send("get diamond corpse")


</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Nigurathus is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>bow crafted of willow bark</name>
								<script>send("get bow corpse")
send("get potion corpse")

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A guardian specter is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an orb of amorphous essence</name>
								<script>send("get orb cor")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The changeling is DEAD!!</string>
									<string>Vagonuth is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Symbol of Darkness</name>
								<script>send("get symbol corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Belag is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>The Priestess Queen is DEAD!!</name>
								<script>send("get arc corpse")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The Priestess Queen is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Zurik the Elder Shaman is DEAD!!</name>
								<script>send("get cowl cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Zurik the Elder Shaman is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ruddloaf Mortlock</name>
								<script>send("get dagger corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Ruddloaf Mortlock is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Stinkin' Human is DEAD!!</name>
								<script>send("get all corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Stinkin' Human is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>A treasure seeking adventurer is DEAD!!</name>
								<script>send("get key corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A treasure seeking adventurer is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>ulexite-shelled turtle</name>
								<script>send("get corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A ulexite-shelled turtle is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>LeMans Seal</name>
								<script>send("get seal cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The Beast LeMans is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>sanc staff</name>
								<script>send("get staff corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Binbinka, the village shaman is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>half-pint sized sling</name>
								<script>send("get half corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Kwikua is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Red bone Bow</name>
								<script>send("get bow cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Statue of the Red Archer is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Purity Ring</name>
								<script>send("get ring cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Mavis Wariso is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mother slag</name>
								<script>send("get cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The mother slagslug is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Carb Breastplate</name>
								<script>send("get carb corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Jackal is DEAD!!</string>
									<string>Panther is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Talisman</name>
								<script>send("get talis corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Groundskeeper Chalmers is DEAD!!</string>
									<string>Groundskeeper Skaggs is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Emerland Sceptre</name>
								<script>send("get scept cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Statue of Utami is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Aranor Bow</name>
								<script>send("get bow corpse")
send("get emerald corpse")
send("get pearl corpse")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Kalimindroph is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Antharian Signet Ring</name>
								<script>send("get ring corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>An Antharian Knight is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Teardrop Helm</name>
								<script>send("get helm corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The Sad Man is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fatewalkers Part 3</name>
								<script>send("get rod corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Lachesis is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fatewalkers Part 2</name>
								<script>send("get thread corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Clotho is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fatewalkers Part 1</name>
								<script>send("get golden corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Atropos is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Bone Necklace</name>
								<script>send("get bone corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Aruna is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>A village watchman is DEAD!!</name>
								<script>send("get bracers corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A village watchman is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glacial Milk</name>
								<script>send("get milk corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A Glacial Guardian is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Tourach Sword</name>
								<script>send("get sword cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The Frozen Demon Tourach is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>White marble corss</name>
								<script>send("get cross corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The guardian of the white temple is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Loot Keys</name>
								<script>send("get key cor")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A spectator beholder is DEAD!!</string>
									<string>A Beholder overseer is DEAD!!</string>
									<string>The guardian of Daido's tomb is DEAD!!</string>
									<string>Cyskadella is DEAD!!</string>
									<string>DeSant is DEAD!!</string>
									<string>Guy of Gisbourne is DEAD!!</string>
									<string>'Armless 'Arry is DEAD!!</string>
									<string>Ironhomme is DEAD!!</string>
									<string>Ghost of a Greased Pig Quest is DEAD!!</string>
									<string>Ghost of a Trivia Quest is DEAD!!</string>
									<string>Ghost of a Scavenger Quest is DEAD!!</string>
									<string>Ghost of a Combat Quest is DEAD!!</string>
									<string>Animated Quest Potion is DEAD!!</string>
									<string>Animated Quest Sword is DEAD!!</string>
									<string>Animated Silver Token is DEAD!!</string>
									<string>Animated Gold Token is DEAD!!</string>
									<string>The ogre shaman is DEAD!!</string>
									<string>A royal half-orc guard is DEAD!!</string>
									<string>A circle of shamans is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dark ring of ice-blue fire</name>
								<script>send("get ash corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A dark ring of ice-blue fire is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Quests</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Restoring Dwarfanity</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Restoring Dwarfanity torch</name>
								<script>send("get torch")
cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Restoring Dwarfanity]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A discarded half-orc torch.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Restoring Dwarfanity steak</name>
								<script>send("get steak corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Akrikto the Butcher is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Halfling Detective</name>
							<script>--</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 51 or StatTable.Level == 125)</string>
								<string>return gmcp.Room.Info.zone == "{51  51} Doolen  Mountain Tunnels"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Halfling Detective misty elixir</name>
								<script>send("get elixir")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This misty elixir emits a soft glow.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Halfling Detective Part 3</name>
								<script>send("get journal corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A halfling slave is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Halfling Detective Part 1</name>
								<script>send("get commission corpse")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A nervous adventurer is DEAD!!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sanc Insig</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 51)</string>
								<string>return gmcp.Room.Info.zone == "{51  51} WntRose Sun God Altar"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>History</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>say history</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>1. History of this place...</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Insane</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>say insane</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>5. Insane!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>convinced</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>say convinced</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>10. Actually, it is me who is convinced.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>root</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>say root</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>10. The root of your problems lies with ulexite.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>cowl</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>give cowl seneca</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Seneca Rotberry says 'Bring me proof their leader is ... neutralized.'</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dag</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand>give dagger seneca</mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Seneca Rotberry says 'Bring me his dagger.'</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Seneca - complete</name>
								<script>tempTimer(5, function() send("open south"); send("south"); send("sleep") end)
send("pinfo + Sanc insig until past level " .. (StatTable.SubLevel + 74))</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Seneca Rotberry pins a clay token onto your armor.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Erogora Insigs</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 51)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Animal Handler</name>
								<script>send("inno")
tempTimer(3, [[send("inno")]])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>... Unless you are bold enough to proclaim your innocence to the thousands of mutilated carcasses.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Safety</name>
								<script>tempTimer(1, [[send("tell pilgrim reward")]])
tempTimer(5, [[send("tell pilgrim reward")]])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Pilgrim says 'Each group member should send me a tell stating "reward".'</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wise Travelers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>WT - Recipe</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [WT - Recipe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the mad ramblings of Prosenia Elm</string>
									<string>a dangerous looking contraption</string>
									<string> Jgukto's crossbow repair notes</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Merc Fang</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;green&gt; [WT - Metallic]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A large wolf walks through the halls.</string>
									<string>mercury wolf fangs</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sept</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sept tea</name>
								<script>tempTimer(2, [[send("say tea")]])




</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Septarch Kyxial says 'I come from a bush, and am in a bag in a pot - but mostly I'm in a cup,'</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sept Dwarf Kingdom</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Septarch Kyxial asks 'Was the name of the last king of the dwarven kingdom sometimes referred to as Kangtan?'</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lord Quests</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 125)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Conundrum Casting - auto off</name>
								<script>beep()
printGameMessage("AutoCast", "Turned off, don't target quest mob", "red", "white")
AutoCastOFF()

safeTempTrigger("AutoCastAfterQuestSuperHeroes", "\"Sanctum, how sweet. Torch it.\"", function() AutoCastON() end, "begin", 1)</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^You (brimstone|maelstrom|mindwipe) quest fellowship of superheroes</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shape Sorting</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 125)</string>
								<string>return gmcp.Room.Info.zone == "{ LORD } Ctibor  Domain of Law"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Cuboid</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Cuboid]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The square hole extends straight down, keeping the same</string>
									<string>shape down below.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Tetrahedron</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Tetrahedron]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The hole is a perfect triangle shape with triangular, wedged sides cut</string>
									<string>into the wall.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Dodecahedron</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Dodecahedron]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The depression has a pentagonal shape with eleven of the exacting</string>
									<string>same shape revealed inside the hole.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Rhombus</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Rhombus]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The hole looks like a cube would fit inside if it has been</string>
									<string>warped slightly from its perfect shape.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Cylinder</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Cylinder]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The circular hole extends straight down, keeping the same</string>
									<string>shape down below.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 1 - Icosahedron</name>
								<script>--The square hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Icosahedron]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A score of triangles are cut into the white surface.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 2 - Triangular Prism</name>
								<script>--The three-sided hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Triangular Prism]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The three-sided hole extends straight down, keeping the same</string>
									<string>shape down below.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 2 - Cube</name>
								<script>--The three-sided hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Cube]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The interior of the indentation is perfectly regular. Each of the</string>
									<string>cube hole's five square sides meets at a right angle.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 2 - Cone</name>
								<script>--The three-sided hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Cone]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The indentation appears to be a perfect circle that gets</string>
									<string>smaller and smaller until the hole ends at a point.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 2 - Frustum</name>
								<script>--The three-sided hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Frustum]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The indentation appears to be a perfect circle that gets</string>
									<string>smaller and smaller until the hole ends at a smaller circle.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 2 - Sphere</name>
								<script>--The three-sided hole extends straight down, keeping the same
--shape down below.

cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Sphere]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>It appears that a globe would be needed to fill the hole.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 3 - Torus</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Torus]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A large, white, circular channel has been eaten into the</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 3 - Square Pyramid</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Square Pyramid]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The cavity appears to be a perfect square that gets</string>
									<string>smaller and smaller until the hole ends at a point.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 3 - Hexagonal Prism</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Hexagonal Prism]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The six-sided hole extends straight down, keeping the same</string>
									<string>shape down below.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 3 - Ellipsoid</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Ellipsoid]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The egg-shaped cavity may have given birth to one of the</string>
									<string>creatures wandering about.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Room 3 - Octahedron</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .."&lt;yellow&gt; [Octahedron]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Gazing into the trianglur cavity you can see that something gouged</string>
									<string>out a hole that has uniform dimensions on all eight sides.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Gulch</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 125)</string>
								<string>return gmcp.Room.Info.zone == "{ LORD } Mimir   Patriarchs' Gulch"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an olive branch</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [Ticket #1/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an olive branch</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>dusty work gloves</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [Ticket #2/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>dusty work gloves</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a well-oiled leather sheath</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [Ticket #3/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a well-oiled leather sheath</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>evenly balanced scale</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [Ticket #4/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>evenly balanced scale</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>keys</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [key]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>golden scarab medallion</string>
									<string>well-maintained pickaxe</string>
									<string>A heap of ancient stoneworking tools lies here, slowly turning to rust.</string>
									<string>This elegant key consists of interlocking metallic leaves.</string>
									<string>the key to the royal burial chamber</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>inpu turnin</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [inpu turnin]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a stray chess piece</string>
									<string>handle of a broken knife</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>A crown falls to the ground as the Patriarch is vanquished.</name>
								<script>send("get crown")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A crown falls to the ground as the Patriarch is vanquished.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shattered Mirror</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Level == 125)</string>
								<string>return gmcp.Room.Info.zone == "{ LORD } Mirlion The Shattered Mirror"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shattered Mirror pieces</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Shattered Mirror]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A nihilistic cultist sits entranced, staring into a gap in thevoid.</string>
									<string>A man in purple robes.</string>
									<string>Time Tempest</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Misc Quests</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Rascal - Orphanage</name>
								<script>send("tickle rascal")
tempTimer(1, [[send("tickle rascal")]])
tempTimer(4,[[send("where rascal")]])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>An orphan holds something that OBVIOUSLY doesn't belong to them.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Owen Cheer</name>
								<script>GlobalVar.OwenCheer = GlobalVar.OwenCheer or 0
GlobalVar.OwenCheer = GlobalVar.OwenCheer + 1

cecho (string.rep (" ",55-tonumber(string.len(line))) .."&lt;white&gt;[ " .. GlobalVar.OwenCheer .. " ]")



safeEventHandler("ResetOwenCounterID", "CustomProfileInit", function() GlobalVar.OwenCheer = 0 end, true)
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You hear a loud cheer emanate from Owen's home.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
					</TriggerGroup>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>A golden token sits here.</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand>get token</mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A golden token sits here.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>black coal</name>
						<script>send("get coal")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A coal-black hand rests in a shallow saucer of water.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>ashes</name>
						<script>send("get ashes")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>leaves behind (sulfurous|consecrated) ashes!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>crystal ball</name>
						<script>if SafeArea() then return end

send("get crystal")

safeTempTrigger("GetCrystalBallID", "You get crystal ball.", function()
  if IsMDAY() or not Grouped() then
    send("put 'crystal ball' " .. StaticVars.AllegBagName)
  else
    if GlobalVar.GroupLeader ~= StatTable.CharName then 
      send("give 'crystal ball' " .. GlobalVar.GroupLeader)
    end
  end
end, "begin", 1)

safeTempTrigger("GetCrystalBallMissedID", "I see no crystal here", function()
  safeKillTrigger("GetCrystalBallID")
  end, "begin", 1)


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A clear ball of crystal stands here glowing softly.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Item Pickup</name>
						<script>--You get a kzinti pickaxe from corpse of A kzinti miner.
--You get 129 gold coins from corpse of A kzinti guardian.
-- You get omayra's kit from corpse of the broken Oni.

local AllegExceptionList = {
  ["baleflame"] = true,
  ["massive slate-grey sledgehammer"] = true,
}
  

if matches.mobname == StatTable.CharName then return end

if StatTable.Level == 125  then

  if type(checkItemIsAlleg) == "function" and checkItemIsAlleg(matches.item) then
    printGameMessage("Alleg!", "Looted " .. matches.item, "yellow", "white")
    alleg_item = getAllegKeyword(matches.item)
    if IsMDAY() or not Grouped() then
      send("put '" .. alleg_item .. "' " .. StaticVars.AllegBagName)
    else
      if GlobalVar.GroupLeader ~= StatTable.CharName and not AllegExceptionList[alleg_item] then 
        send("give '" .. alleg_item .. "' " .. GlobalVar.GroupLeader)
      end
    end
    
  elseif StaticVars.Junk[matches.item] then 
    send("drop '" .. StaticVars.Junk[matches.item] .. "'")
    printGameMessageVerbose("Junk", "Dropped " .. matches.item)
  end
end


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You get (an|a|the|\d+)? ?(?&lt;item&gt;.*) from corpse of (?&lt;mobname&gt;.*)\.$</string>
							<string>^You make (an|a|the|\d+)? ?(?&lt;item&gt;.*) from the corpse!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Item passed to you</name>
						<script>if IsGroupMate(matches.mobname) and not IsMDAY() then 
  printGameMessageVerbose("Item Given", matches[1])
  return
end

if StatTable.Level == 125 and type(checkItemIsAlleg) == "function" and checkItemIsAlleg(matches.item) then
  
  if matches.mobname ~= "Allegaagse" then 
    printGameMessageVerbose("Alleg Recvd", matches[1], "yellow", "white")
  end
  
  alleg_item = getAllegKeyword(matches.item)
  send("put '" .. alleg_item .. "' " .. StaticVars.AllegBagName)
  return
else
  if matches.mobname ~= "Allegaagse" then
    printGameMessageVerbose("Item Recvd", matches[1], "yellow", "white")
  end 
end

    


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;mobname&gt;.*) gives you (an|a|the)? ?(?&lt;item&gt;.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Drop junk item on rc</name>
						<script>if StatTable.Level ~= 125 then return end

local item_name = RemoveArticle(multimatches[1][2])

-- if we just RC'd an alleg item, either put it in our bag or pass it to leader.
if type(checkItemIsAlleg) == "function" and checkItemIsAlleg(item_name) then

  alleg_item = getAllegKeyword(item_name)
  
  if IsMDAY() or not Grouped() then
    send("put '" .. alleg_item .. "' " .. StaticVars.AllegBagName)
  elseif GlobalVar.GroupLeader ~= StatTable.CharName then 
      send("give '" .. alleg_item .. "' " .. GlobalVar.GroupLeader)
  else
    pdebug("Trigger (Drop Junk item on rc): not expected to be here, debug")
  end

-- if its junk, drop it
elseif StaticVars.Junk[item_name] then 
  send("drop '" .. StaticVars.Junk[item_name] .. "'")
  printGameMessageVerbose("Junk", "Dropped " .. item_name)
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>1</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your (.*) glows blue\.$</string>
							<string>You feel an unclean aura lift from you.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>drop_junk</name>
						<script>if not OnDropJunk then
  OnDropJunk.len = 1
  OnDropJunk.isOpen = true
end

OnDropJunk.len = OnDropJunk.len + 1

if line ~= "" then
  local item_qty = string.match(line, "^%(%s*(%d+)%s*%)")
  local parsed_line = OnDropJunk.parseLine(line)

  -- Now parsed_line should contain the cleaned-up text.
  if type(checkItemIsAlleg) == "function" and checkItemIsAlleg(parsed_line) then
    alleg_item = getAllegKeyword(parsed_line)
    if item_qty then alleg_item = "all." .. alleg_item end
    table.insert(OnDropJunk.Queue, "put '" .. alleg_item .. "' " .. StaticVars.AllegBagName)
  elseif StaticVars.Junk[parsed_line] then
  
    local drop_item = StaticVars.Junk[parsed_line]
    if item_qty then drop_item = "all." .. drop_item end
    table.insert(OnDropJunk.Queue, "drop '" .. drop_item .. "'")
    printGameMessageVerbose("Junk", "Dropped " .. parsed_line)

  end
  
else
  OnDropJunk.len = 0
  OnDropJunk.isOpen = false
  disableTrigger("drop_junk")
  -- If not already processing, start sending commands from the queue.
  if not OnDropJunk.isProcessing and #OnDropJunk.Queue &gt; 0 then
    OnDropJunk.isProcessing = true
    OnDropJunk.sendNext()
  end
  

end

setTriggerStayOpen("drop_junk",OnDropJunk.len)   -- this sets the number of lines for the trigger to capture

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>10</conditonLineDelta>
						<mStayOpen>10</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You are carrying:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Mob Decept Drop</name>
						<script>-- The Lord of the Earth Elementals is so disgusted with the earthen mace of might it tries to drop it!

if StatTable.Level == 125  then
  if type(checkItemIsAlleg) == "function" and checkItemIsAlleg(matches.item) then
    alleg_item = getAllegKeyword(matches.item)
    printGameMessage("Decept!", "Mob dropped " .. matches.item .. ", attempting to pick it up", "yellow", "white")
    TryAction("get '" .. alleg_item .. "'", 5)
  end
end
    </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;mobname&gt;.*) is so disgusted with (an|a|the) (?&lt;item&gt;.*) it tries to drop it!$</string>
							<string>^(?&lt;mobname&gt;.*) is so disgusted with (?&lt;item&gt;.*) it tries to drop it!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>loot your corpse</name>
						<script>if matches[2] == StatTable.CharName then
  TryAction("get all " .. StatTable.CharName .. cs .. "wear all", 30)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^     The corpse of (\w+) is lying here</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Colours and Descriptions</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return not GlobalVar.PerformanceMode</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>DamageLabel</name>
						<script>if matches.dmgdesc == "terminal" or matches.dmgdesc == "your" then return end

if not DamageVerbTable[matches.dmgdesc] then 
  if Battle.Combat and GlobalVar.Debug then 
    printMessage("DamageLabel Error", "Unknown verb: " .. matches.dmgdesc) 
  end
  return
end

local low_num = DamageVerbTable[matches.dmgdesc][1]
local high_num = DamageVerbTable[matches.dmgdesc][2]
local num_colour = DamageVerbTable[matches.dmgdesc][3]


cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;"..num_colour.."&gt; ["..low_num.." - "..high_num.."]")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.*'s .* strikes .* with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^.*'s attacks? strikes? .* \d+ times?, with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^Your attacks? strikes? .* \d+ times?, with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^Your shot hits .* with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^You \w+ .* with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^.*'s .* hits .* with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Areas</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return gmcp.Room</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Arcanists</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if (gmcp.Room.Info.zone == "{51  51} Wiseman Ruin of the Arcanists") then return true end</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Adult Elemental</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;red&gt; [AGGIE] Adult")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Blazing brightly, this fire elemental hisses and growls.</string>
									<string>Sizzling and spitting, this acid lake swells and splatters.</string>
									<string>A crystalline ice matrix crackles angrily here.</string>
									<string>Glaring about with a featureless face, this elemental growls.</string>
									<string>Snapping and cracking against the crystals, this bolt is angry!</string>
									<string>This heavy wave crashes against the stone around it, roaring.</string>
									<string>This howling wind whips all before it.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Nascent Elemental</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;white&gt; Nascent")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This small pool of acid licks at the rock hungrily.</string>
									<string>Flickering and leaping, these flames look around for more fuel.</string>
									<string>This rock moves of its own will, hither and yon.</string>
									<string>A tiny spark zaps from one crystal to the next, building its charge.</string>
									<string>This breeze twirls about playfully.</string>
									<string>This clump of snowflakes drifts silently about.</string>
									<string>This rivulet of water trickles across the ground, gathering droplets.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Larval Elemental</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;yellow&gt; Larval")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Fuming steadily, this sizzling elemental devours more rock.</string>
									<string>This shard of ice clings to the wall, ready to lacerate someone.</string>
									<string>This bonfire dashes about, lapping at the stones hungrily.</string>
									<string>This boulder shudders and shakes. It's alive!</string>
									<string>An arc of energy crackles, happily absorbing smaller sparks.</string>
									<string>Gusting here and there, this air this air elemental grows slowly.</string>
									<string>This jet of water splashes to and fro gleefully.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earth Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Jug")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Larger than all the others, this juggernaut bellows a challenge.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fire Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Inferno")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This mighty inferno lashes about furiously, enraged.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Acid Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Acid")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Barely visible amongst acrid fumes, this immense acid elemental screams.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Thunder Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Light")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This thunderbolt and lightning is very, very frightening.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Water Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Water")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This vortex of water drags everything to annihilation.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Air Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Gale")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This gale shrieks and howls as it rages about.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ice Boss</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [BOSS] Ice")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This mighty edifice of ice glares at you coldly.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sect</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;red&gt; [AGGIE] Disciple")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This disciple of a forgotten sect only watches... for now.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Man</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;yellow&gt; Man")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Sparks dance across the shoulders of this tall man's silvery robe.</string>
									<string>Pacing and muttering, this green-robed man frowns thoughtfully.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Woman</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;yellow&gt; Woman")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A mist of frost follows in the wake of this woman's pale blue robe.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>the Rim</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if (gmcp.Room.Info.zone == "{51  51} Scevine The Rim") then return true end</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Coiled Electrolobe Tentacles</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [SKIN] Coiled Elec.")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A floating brain trails long tentacles through the water below it.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>electro-lobe</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [SKIN] electro-lobe")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Sparks fly from a large brain hovering over the water's surface.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>restless</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [SKIN] restless")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>An apparition floats out of the sea and into the salty air...</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>rimwhale blubber</name>
								<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;purple&gt; [SKIN] rimwhale blubber")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A green rimwhale swims just below the water's surface.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Oddity</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if (gmcp.Room.Info.zone == "{35  35} Dev     Zin's Hall of Oddities") then return true end</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Oddity</name>
								<script>cecho ("[Oddity]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>An Ogre admires her svelte and slim form.</string>
									<string>A Dwarf with no beard strolls down the street.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Abnormality</name>
								<script>cecho ("[Abnormaility]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You see a Troll doing a graceful pirouette.</string>
									<string>An Orc is here, preaching Love and Understanding.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Irregularity</name>
								<script>cecho ("[Irregularity]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A halfling trips over her own feet.</string>
									<string>A drow is here, admiring her suntan.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Curiosity</name>
								<script>cecho ("[Curiosity]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A sprite starts pushing you around the room. Almost daring you to fight.</string>
									<string>A kzinti wanders about, looking for her fur.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Peculiarity</name>
								<script>cecho ("[Peculiarity]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A giant casts 'create food' on others to amuse himself.</string>
									<string>An elf is here, trimming his mustache.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Freak</name>
								<script>cecho ("[Freak]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A gnome looms over you.</string>
									<string>This trog smells like a bed of roses.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Exploration Outpost</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if (gmcp.Room.Info.zone == "{51  51} Ginta   Exploration Outpost") then return true end</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>shark</name>
								<script>if not GlobalVar.Silent then
  send("emote  " .. texttocolour("R", " SHARK") .. "|N|!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A hungry shark dives at your kill!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mega-shark</name>
								<script>if not GlobalVar.Silent then
  send("gtell " .. texttocolour("R", "MEGA-SHARK") .. " |BW|popped!")
end</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>All this blood has attracting a beast from the deepest seas, its visage refracting within the Ulexite Forest!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>A black robed scholar pores through the books in front of her.</name>
							<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;red&gt; [FLASH] Scholar")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A black robed scholar pores through the books in front of her.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Quiet Rooms</name>
							<script>cecho (string.rep (" ",85-tonumber(string.len(line))) .."&lt;red&gt; [QUIET]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Spire of Knowledge Apex</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fingerbone of Kra</name>
							<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;green&gt; [Fingerbone of Kra]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Eragora - Restoring Dwarfanity</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You surge your spell!</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#00ffff</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You surge your spell!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>A trauma upon your spirit</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>A trauma upon your spirit</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You harness the chaos of battle!</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ffaa00</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You harness the chaos of battle!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Tingles</name>
						<script>printGameMessage("Tingle!", matches[2], "purple", "yellow")
TingleBeep()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#aa007f</mFgColor>
						<mBgColor>transparent</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You feel more confidence in your ability with (.*)\.$</string>
							<string>^Your mastery of (.*) has improved!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Flee</name>
						<script>--You flee east! What a COWARD! You lose 146 exps!
if (GlobalVar.GUI) then
  printGameMessage("Flee!", "You fled &lt;yellow&gt;" .. string.upper(matches[2]) .. "&lt;ansi_white&gt;! (XP Loss:&lt;red&gt;" .. matches[3] .. "&lt;ansi_white&gt;)")
end
QuickBeep()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#000000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You flee (\w+)! What a COWARD! You lose (\d+) exps!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Items</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Potions</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Light Brown Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;white&gt; [18HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>light brown vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Orange-Brown Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;white&gt; [37HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>orange-brown vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Reddish-Brown Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;white&gt; [61HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>reddish-brown vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Orange-Red Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;white&gt; [79HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>orange-red vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Red Striped Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [100HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>red striped vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Yellow-Brown Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [118HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>yellow-brown vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Yellow Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [136HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>yellow vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Yellow-Orange Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [161HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>yellow-orange vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Orange Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [172HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string> orange vial</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Red-Brown Vial Of Healing</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; **[250 HP]**")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>red-brown vial</string>
									<string>a piece of golden crystal</string>
									<string>an enchanted stem</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>crushed rose petals</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [200HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>potion of crushed rose petals</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glacial Milk</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [200HP]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>glacial Milk</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a vial of starmetal impurities</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Steel Skel]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a vial of starmetal impurities</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>yorial tongue</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Esuna]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>yorial tongue</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Quest Items</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Halfling Detective Quest</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Halfling]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a commission to explore the mountains</string>
									<string>a torn out journal entry</string>
									<string>a misty elixir</string>
									<string>This misty elixir emits a soft glow.</string>
									<string>A halfling searches the area for clues</string>
									<string>This half-orc walks nervously up the mountain.</string>
									<string>A halfling slave has fled</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sanc insig</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Sanc Insig]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>soul splitting spike dagger</string>
									<string>zurik's Cowl</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fatewalkers</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Fatewalkers]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>golden scissors of fate</string>
									<string>spindle of golden thread</string>
									<string>rod of fate</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Shard Of Ulexite</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Shard Of Ulexite]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>corpse of a ulexite-shelled turtle</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Restoring Dwarfanity</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Restoring Dwarfanity]")

-- Stalks required:
-- Mammoth
-- Medium
-- Baby</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a silver key</string>
									<string>an ornate lockbox</string>
									<string>a juicy steak</string>
									<string>a half-orc torch</string>
									<string>The mammoth iwei guards its den with deadly ferocity.</string>
									<string>a luminescent stalk</string>
									<string>a baby eyestalk</string>
									<string>a limp eyestalk</string>
									<string>A small uwei darts by.</string>
									<string>A medium uwei eyes you thrice.</string>
									<string>A medium uwei swims powerfully through the undercurrents.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Orosca's Enchanted Wrist Guard Quest</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Orosca's Wristguard]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an antique emerald tiara</string>
									<string>an antique emerald necklace</string>
									<string>an antique emerald brooch</string>
									<string>an antique emerald earring</string>
									<string>an antique emerald bracelet </string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Black Circle Treasure Map Quest</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Black Circle]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>You see three red glowing eyes watching!</string>
									<string>A shimmering humanoid outline circles you inquisitively.</string>
									<string>A translucent shape changes color to match its surroundings.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Great White Axe Quest</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Great White Axe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a broken large axe blade</string>
									<string>a broken and warped axe blade</string>
									<string>a broken axe blade</string>
									<string>a broken axe shaft</string>
									<string>a broken axe head</string>
									<string>a broken blackened axe shaft</string>
									<string>a broken axe handle burned white</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Glyntaff Pass</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList />
								<regexCodePropertyList />
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Lightning strike</name>
									<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Lightning Strike]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>a length of chain and an anchor</string>
										<string>a long, crystal shaft</string>
										<string>(White Aura) Clawing at his own flesh, this gnome craves blood.</string>
										<string>(White Aura) Snarling like a wild animal, this gnome comes right for you.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
										<integer>0</integer>
										<integer>0</integer>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Clan Gwenci Honourary Member - insig</name>
									<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Clan Gwenci Insig]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>a bundle of love letters</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Flower Shop</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>moonstone bouquet of Angel's breath</name>
								<script> cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Flower: 6000]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>moonstone bouquet of Angel's breath</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>small amethyst flower</name>
								<script> cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Flower: 2000]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>small amethyst flower</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an emerald lotus</name>
								<script> cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Flower: 15000]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an emerald lotus</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a topaz chrysanthemum</name>
								<script> cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;purple&gt; [Flower: 4000]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a topaz chrysanthemum</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Utility</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Utility</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;blue&gt; [Utility]")

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a white marble cross</string>
									<string>unholy symbol</string>
									<string>a Githyanki bone staff</string>
									<string>a consecrated white lily</string>
									<string>the white staff of peace</string>
									<string>a strand of the Sun</string>
									<string>a helmet with a light attached</string>
									<string>the red-eyed jewel</string>
									<string>blood-mithril core</string>
									<string>ritual purification wand</string>
									<string>dragonfish skeleton</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Consecrated Ashes</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;blue&gt; [Immune: Animation]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>consecrated ashes</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sulfurous Ashes</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;blue&gt; [Immune: Corpse Eaters]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>sulfurous ashes</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sanc Staff</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;blue&gt; [Sanc Brandish]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a pearl-tipped staff</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Heal Brandish</name>
								<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;blue&gt; [Heal Brandish]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the emerald sceptre of light</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Pool</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;blue&gt; [Pool]")

--if (StatTable.Class == "Vizier") then
--  if (tonumber(StatTable.Level) == 51 and tonumber(StatTable.SubLevel) &gt; 100) then
--    send("cast 'sanguen pax' pool")
--  elseif(tonumber(StatTable.Level) &gt; 51) then
--    send("cast 'sanguen pax' pool")
--  end
--end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>(Magical) An eerie pool of blood has formed here!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Throwable</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;red&gt; [Throw]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the Slicer</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ticket - Conundrum</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;cyan&gt; [Ticket-Conundrum]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>itches of darkness</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hero Gear</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>torch of Flames</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc/Hit: 4/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>torch of Flames</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an ice ring</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 0/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an ice ring</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>medallion of Justice</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 2/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>medallion of Justice</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>ultimoose Power</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 0/5]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>ultimoose Power</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>helm of Cherubims</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 0/5]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>helm of Cherubims</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>flaming pants</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 1/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>flaming pants</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fatewalkers</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [Tank/Hit: 0/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Fatewalkers</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a robe of greatness</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 2/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a robe of greatness</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>the Ouroburos' Tail</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 1/2]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the Ouroburos' Tail</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>the symbol of darkness</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 3/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the symbol of darkness</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>banner of the Lone Wolf</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 8/8]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>banner of the Lone Wolf</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>heroic dragonscale sleeves</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 3/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>heroic dragonscale sleeves</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>killing gloves</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc/Hit: 5/5]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>killing gloves</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a blood-soaked rapier</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 9/9]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a blood-soaked rapier</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Orkenfyr signet ring</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc/Hit: 3/2]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Orkenfyr signet ring</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>barbed crescent talisman</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 5/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>barbed crescent talisman</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a silver breast plate</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc/Hit: 4/4]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a silver breast plate</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>diadem with an arching snake</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 4/2]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>diadem with an arching snake</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Crimsonscale skirt</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 4/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Crimsonscale skirt</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>slagwalkers</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 4/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>slagwalkers</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mithril web gloves</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 5/5]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>mithril web gloves</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an alienskin arm brace</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 3/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an alienskin arm brace</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a tigerskin cloak</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 3/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a tigerskin cloak</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>a jeweled scabbard</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 3/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>a jeweled scabbard</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an aura of Elemental Power</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 4/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an aura of Elemental Power</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>orb of the Shogun</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;red&gt; [Tank: -50AC]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>orb of the Shogun</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>AC Rings</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;red&gt; [Tank: -20AC]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Templar Ring</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>necklace</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;red&gt; [Tank: -25AC]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>carved bone necklace</string>
									<string>Turtle shell amulet</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>carburized steel plate armor</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;red&gt; [Tank: -75AC]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>carburized steel plate armor</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>the ring of Purity</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Hit: 3/3]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>the ring of Purity</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>an ice scale bracer</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;cyan&gt; [Arc: 5/0]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>an ice scale bracer</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Treasure Hunter</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [Treasure Hunter]")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>naeadonna's choker</string>
								<string>a floating circle of books</string>
								<string>exaltra's mirror</string>
								<string>some astral powder</string>
								<string>the amulet of the Cat's Eye</string>
								<string>crown of crystal</string>
								<string>an orb of gith</string>
								<string>a jade bracer</string>
								<string>the armband of the Unseen</string>
								<string>sandblasted emerald</string>
								<string>Treaty of purity of faith</string>
								<string>Orb of Bravery</string>
								<string>a green silken sarong</string>
								<string>a silver iguana</string>
								<string>Rod of the wicked rulers</string>
								<string>(Black Aura) A demon kicks debris in the empty vault, looking quite disgruntled.</string>
								<string>A darkenbeast feeds on a burnt corpse.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>2</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Vault Thief's Bane</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [Thief Bane]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>soft nubuc hide</string>
								<string>glazed gith hide</string>
								<string>embossed hide</string>
								<string>whole hide of a merman</string>
								<string>hide of an unlucky human</string>
								<string>corpse of a gith thief</string>
								<string>corpse of Zlatan</string>
								<string>corpse of a merman thief</string>
								<string>corpse of The unlucky adventurer</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lightning Strike</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [Lightning Strike]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a length of chain and an anchor</string>
								<string>a long, crystal shaft</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Info</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>buddy info</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffff00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[BUDDY INFO]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Death Info</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#888888</mFgColor>
							<mBgColor>transparent</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[DEATH INFO]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>group info</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#00aaff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[GROUP INFO]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lord info</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffffff</mFgColor>
							<mBgColor>transparent</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[LORD INFO]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hero Info</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#55aa00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[HERO INFO]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shortened Lord</name>
							<script>selectString("The shadow of ", 1)
setBgColor(getBgColor())
setFgColor(getFgColor())
replace()</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff5500</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The shadow of Lord</string>
								<string>^The shadow of Lady</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Status</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Translucent)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#55aaff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Translucent)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(White Aura)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffffff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(White Aura)</string>
								<string>(Sharp)</string>
								<string>(Spiritlink)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Invis)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#00ffff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Invis)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Flying)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#5555ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Flying)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Hide)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#818181</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Hide)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Magical)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff55ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Magical)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Glowing)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffff00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Glowing)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Demonic)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonic)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Humming)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa55ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Humming)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Sneak)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#818181</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Sneak)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>&lt; AFK &gt;</name>
							<script>fg("red")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>&lt; AFK &gt;</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Black Aura)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Black Aura)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Pink Aura)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff00ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Pink Aura)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Demonfire)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#55007f</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonfire)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Green Aura)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#00aa00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Green Aura)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>(Poisoned)</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Poisoned)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AllegLabels</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alleg - Common</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [ALLEG - Common]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a sacrificial knife</string>
								<string>a glowing iron skewer</string>
								<string>a bloodletter flail</string>
								<string>a buckler bracelet</string>
								<string>a dagger of dark rites</string>
								<string>an ethereal blade</string>
								<string>axe of the third plane</string>
								<string>an iron web shield</string>
								<string>green psi-blade</string>
								<string>yellow psi-blade</string>
								<string>clear psi-blade</string>
								<string>blue psi-blade</string>
								<string>a heavy shroud</string>
								<string>black master's hood</string>
								<string>the black sword of the keep</string>
								<string>dark purple robe</string>
								<string>a crude spear</string>
								<string>crystal ball</string>
								<string>a shard-embedded whip</string>
								<string>a black etched tablet</string>
								<string>a blueish-white stone</string>
								<string>amulet with a small silver sword inscribed on it</string>
								<string>a pair of kzinti slaughter gloves</string>
								<string>a golden bow</string>
								<string>assassin's armband</string>
								<string>a whirl of elusive feathers</string>
								<string>a devilish talisman</string>
								<string>silver dagger with a golden handle</string>
								<string>blood red robe</string>
								<string>black wand with a grinning skull</string>
								<string>an ice bow</string>
								<string>a incantation note</string>
								<string>coarse leather boots</string>
								<string>Faerie script</string>
								<string>shaleskin arm guard</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alleg - Uncommon</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [ALLEG - Uncommon]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>an iron dha</string>
								<string>a seething ball of blue flame</string>
								<string>a rock hammer</string>
								<string>a cape of angel feathers</string>
								<string>a lavabomb</string>
								<string>a green web veil</string>
								<string>clasp of eternal anguish</string>
								<string>an ice hound's tooth</string>
								<string>a small steam gun</string>
								<string>a unicorn horn</string>
								<string>an ice collar</string>
								<string>Ring of the white flame</string>
								<string>a diamond dagger</string>
								<string>a black whip</string>
								<string>a dancing katana</string>
								<string>a dancing rapier</string>
								<string>a stone hammer</string>
								<string>golden sleeves</string>
								<string>the Blade of Discord</string>
								<string>exotic robes</string>
								<string>devilish lance</string>
								<string>an aurora bow</string>
								<string>a radiance of wickedness</string>
								<string>stone platemail</string>
								<string>a dancing dagger</string>
								<string>a flametongue called 'Firebrand'</string>
								<string>signet of the Pure Flame</string>
								<string>the whip, "Death-Tamer"</string>
								<string>the staff of the lower planes</string>
								<string>panthrodrine-skin leggings</string>
								<string>an air gun</string>
								<string>vial of unfinished portal serum</string>
								<string>the mark of madness</string>
								<string>a storm-skin cloak</string>
								<string>a decaying vest made from cracked leather</string>
								<string>steel broadsword</string>
								<string>a crumpled note</string>
								<string>a viper fang</string>
								<string>a pair of wind-ravaged boots</string>
								<string>a stone disc</string>
								<string>shaleskin arm guard </string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alleg - Rare</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [ALLEG - Rare]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a bloodstained blindfold</string>
								<string>the broken blade of Karnath</string>
								<string>the sceptre of creation</string>
								<string>a show of loyalty</string>
								<string>a suit of dress plate</string>
								<string>a dress of silk and velvet rags</string>
								<string>havynne's lantern</string>
								<string>a ram's head staff</string>
								<string>the Netherworld Dagger</string>
								<string>the staff of prophecy</string>
								<string>aura of domination</string>
								<string>signet of the oblivious defender</string>
								<string>ring of minor imagery</string>
								<string>omayra's kit</string>
								<string>sultan's Turban</string>
								<string>an obsidian sledgehammer</string>
								<string>the earthen mace of might</string>
								<string>a flaming phoenix feather</string>
								<string>a sun staff</string>
								<string>a red bracer</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alleg - Trivial</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [ALLEG - Trivial]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>baleflame</string>
								<string>a massive slate-grey sledgehammer</string>
								<string>side of venison</string>
								<string>a grim bone shield</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>EquipLabels</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Armor Tier 0</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [AC - T0]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>obsidian Dragonscale leggings</string>
								<string>adamantine gauntlets</string>
								<string>boots of the Onyx Bastion</string>
								<string>Carapace of Molten Rock</string>
								<string>the girth of Karnath</string>
								<string>a spectral vambrace</string>
								<string>an Open Palm</string>
								<string>diova's Sacrifice</string>
								<string>a golden marionette wire</string>
								<string>the Spirit Guard</string>
								<string>A ring of nightmares</string>
								<string>quest amulet of</string>
								<string>the Gambit Declined</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Armor Tier 1</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [AC - T1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a kzintium blade bracer</string>
								<string>an Inferno stone</string>
								<string>an elemental earth ring</string>
								<string>the Ruling Glyph</string>
								<string>a silver armor chestplate</string>
								<string>the jeweled crown of Aziz-Ra</string>
								<string>boots of the conquerer</string>
								<string>a black armband</string>
								<string>a pair of stone wings</string>
								<string>a blazing balteus</string>
								<string>the Lodestone</string>
								<string>a gold belly chain</string>
								<string>the shield of Shadows</string>
								<string>the Shield of Lords</string>
								<string>soggy robe of wizardry</string>
								<string>Bonk's Battle Buckler</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Armor Tier 2</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [AC - T2-3]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a starshard</string>
								<string>scale mail of coral</string>
								<string>a silver helm</string>
								<string>billowing sleeves of vapor</string>
								<string>the jeweled crown of the Patriarchy</string>
								<string>the Great Shield, "Tyranny"</string>
								<string>reinforced gloves</string>
								<string> the master imager's robe</string>
								<string>comb made from bone</string>
								<string>silver leggings</string>
								<string>a lesser silver armor chestplate</string>
								<string>a pitch black scarf</string>
								<string>a gleam of fading hope</string>
								<string>sultan's Greaves</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Archer Tier 1</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Archer T0-1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a gauntlet of icicles</string>
								<string>Troublemaker</string>
								<string>a kzintium circlet</string>
								<string>a pair of Tuataur battle pants</string>
								<string>the long bow, "Deep Shadow"</string>
								<string>Visor of Piercing Sight</string>
								<string>a strand of Haghair</string>
								<string>Amulet of Guiding Wind</string>
								<string>eagle-eye pendant</string>
								<string>an enchanted soul</string>
								<string>guard of the Demogorgon</string>
								<string>finn's Crossbow</string>
								<string>a silver crossbow</string>
								<string>pelt of flame's perfection</string>
								<string>hazy crystal sleeves</string>
								<string>lava striders</string>
								<string>mithril crusted tool belt</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Archer Tier 2</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Archer T2-3]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>slaughtering gloves</string>
								<string>amulet of imagery</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hit Tier 0</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Hit T0]")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a Champions Gauntlets</string>
								<string>the talisman of chaos</string>
								<string>a ghostly disk</string>
								<string>gossamer leggings</string>
								<string>the Ring that Time Forgot</string>
								<string>the mark of insanity</string>
								<string>the gauntlets of mad certainty</string>
								<string>Scales of Scalamandrix</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hit Tier 1</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Hit T0-1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a crown of wire and broken glass</string>
								<string>the broken shackles of tyranny</string>
								<string>the ring of higher power</string>
								<string>the sceptre of Blazing Fury</string>
								<string>a necklace of severed Fae ears</string>
								<string>the Black Widow Bodice</string>
								<string>a belt of souls</string>
								<string>a severed githyanki hand</string>
								<string>shadow boots</string>
								<string>a watermark tattoo</string>
								<string>boots of planewalking</string>
								<string>the robe of magnificence</string>
								<string>majestre's crop</string>
								<string>Yorimandil's Blindfold</string>
								<string>twice coiled rat tail</string>
								<string>lightspeed handwraps</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hit Tier 2</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Hit T2-3]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a cloud of dancing shards</string>
								<string>the helm of the oblivious defender</string>
								<string>the ring of the Burning River</string>
								<string>a Tuataur battle tunic</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mana Tier 1</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Mana T1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a Golden Dragonskull</string>
								<string>a lord's head chalice</string>
								<string>a glimmer of hellfire</string>
								<string>the rod of elemental power</string>
								<string>a watershape</string>
								<string>belt of sorcery</string>
								<string>a staff of ancient magicks</string>
								<string>the quarterstaff, "Wanderer"</string>
								<string>the cloak of darkness</string>
								<string>wraith essence</string>
								<string>Phoenix-Feather Greaves</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mana Tier 2</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Mana T2]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the ring of the Wise</string>
								<string>crown of the Ages</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Caster Tier 1</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [Caster - T0-1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the Eye of the Oni</string>
								<string>an icy gray staff</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mixed Gear</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [AC/HIT T1]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Zarradyn's Gauntlets</string>
								<string>the living daemonstone</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Manifest</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [MANIFEST]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>jean's Ruby Ring</string>
								<string>dawiz's Sceptre of Might</string>
								<string>ironhand's Emblazoned Armor</string>
								<string>ferret's Hood</string>
								<string>guiding Light of Ronan</string>
								<string>szi's Armband of Wickedness</string>
								<string>runic First Cycle Bracelet</string>
								<string>amulet of Malyse</string>
								<string>a silver scepter</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>HP Gear</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [HP Gear]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>sceptre of life</string>
								<string>dark but see through cloak</string>
								<string>silver leggings</string>
								<string>rough-hewn belt of thick, hairy hide</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Rare Items</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [RARES]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a perfect amethyst</string>
								<string>QuestPoint</string>
								<string>a demonic lapis lazuli</string>
								<string>a perfect sapphire</string>
								<string>a perfect ruby</string>
								<string>a perfect emerald</string>
								<string>a perfect diamond</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>KDR Gear</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;purple&gt; [KDR Gear]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the habiliments of purity</string>
								<string>pure psi-blade</string>
								<string>an ant chakram</string>
								<string> wings of superior elegance</string>
								<string>a pink ice ring</string>
								<string>nothing$</string>
								<string>a blue-green demonscale wrap</string>
								<string>a ring of major imagery</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>1</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Tokens</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;blue&gt; [TOKEN]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the fae rune for 'Hope'</string>
								<string>heart of Heat</string>
								<string>half of the Sundered Ring</string>
								<string>blood-mithril shackle</string>
								<string>blood-mithril shackle</string>
								<string>old double-curved sword</string>
								<string>a demon fang</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Transmog</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;blue&gt; [TRANSMOG]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>whip of thorns</string>
								<string>aura of corruption</string>
								<string>A golden torque</string>
								<string>The Heart of the Forest</string>
								<string>A kyanite gauntlet</string>
								<string>beta glimmerskin</string>
								<string>Bhyss Knight skin coat</string>
								<string>a jade gauntlet</string>
								<string>a lordly leggings engraved cube</string>
								<string>an axinite gauntlet</string>
								<string>A malachite gauntlet</string>
								<string>Verdant Gloves</string>
								<string>engraved cube</string>
								<string>violet psi-blade</string>
								<string>gamma glimmerskin</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Xp Runes</name>
							<script>local xpvalue = 300

if matches[2] == "Chaos" or matches[2] == "Obfuscation" then
  xpvalue = 400
elseif matches[2] == "Power" or matches[2] == "Wrath" then
  xpvalue = 250
elseif matches[2] == "Influence" or matches[2] == "Corruption" then
  xpvalue = 200
elseif matches[2] == "Misfortune" or matches[2] == "Blood" or matches[2] == "Silence" or matches[2] == "Apathy" or matches[2] == "Ice" or matches[2] == "Vengeance" then
  xpvalue = 100
end

cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [" .. xpvalue .. "XP Rune]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the fae rune for '(Blood|Misfortune|Silence|Apathy|Ice|Vengeance|Entropy|Charm|Wrath|Power|Regeneration|Fatigue|Chaos|Obfuscation|Influence|Corruption|Darkness|Drought|Fear)'</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>QP Runes</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [QP Rune]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a orderly dragon scale</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>QP Runes II</name>
							<script>local qpvalue = 0

if matches[2] == "Destruction" or matches[2] == "Enslavement" then
  qpvalue = 12
elseif matches[2] == 'Despair' then
  qpvalue = 10
else
  qpvalue = 5
end

cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [" .. qpvalue .. "QP Rune]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>the fae rune for '(Insanity|Fire|Disease|Pain|Destruction|Enslavement|Despair)'</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lord Weapons</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [WEAPONS]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>"Howl, the Windhammer"</string>
								<string>an ancient dragon claw</string>
								<string>a head on a stick</string>
								<string>a silver sword</string>
								<string>the Sting that Time Forgot</string>
								<string>a ruby dagger</string>
								<string>pick of the Mastodor</string>
								<string>the Chain of Thorns</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hero Mana Gear</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Hero Mana]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a small toe-ring</string>
								<string>the eye of the beholder</string>
								<string>a random ring</string>
								<string>a talisman of innocent blood</string>
								<string>a white leather dress</string>
								<string>a grand serpent hood</string>
								<string>waterlace leggings</string>
								<string>silver astral gauntlets</string>
								<string>black bracer</string>
								<string>the Swirl of Fumes</string>
								<string>pitch-black robe</string>
								<string>a sprite ribcage</string>
								<string>the Grey Orb of Stone</string>
								<string>a mystical desert stone</string>
								<string>a red velvet cape</string>
								<string>an ancient ring</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hero Hit Gear</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;blue&gt; [Hero Hit]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a drow headdress</string>
								<string>david's sling</string>
								<string>a barbed crescent talisman</string>
								<string>black leather gloves</string>
								<string>torch of Flames</string>
								<string>an Orkenfyr signet ring</string>
								<string>leather of Crecy</string>
								<string>an amethyst circlet</string>
								<string>Crimsonscale skirt</string>
								<string>slagwalkers</string>
								<string>an alienskin arm brace</string>
								<string>Mistress Machadae's War Banner</string>
								<string>a jeweled scabbard</string>
								<string>an ice scale bracer</string>
								<string>seven-league boots</string>
								<string>a helm of Cherubims</string>
								<string>medallion of Justice</string>
								<string>flaming pants</string>
								<string>a scorpion tattoo</string>
								<string>the ring of Purity</string>
								<string>skinning gloves</string>
								<string>an ice ring</string>
								<string>death armor</string>
								<string>a dark dwarven brand</string>
								<string>a chained steel collar</string>
								<string>the symbol of darkness</string>
								<string>a shard of black Doom marble</string>
								<string>Fatewalkers</string>
								<string>ultimoose Power</string>
								<string>heroic dragonscale sleeves</string>
								<string>symbol of darkness</string>
								<string>banner of the Lone Wolf</string>
								<string>killing glove</string>
								<string>robe of greatness</string>
								<string>a great white battle axe</string>
								<string>a silver breast plate</string>
								<string>an orb of amorphous essence</string>
								<string>a half-pint sized sling</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Hero Manifest</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;purple&gt; [Hero Manifest]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>akeris' Symbol of Strength</string>
								<string>dizzy's Black Leather Skirt</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Grandfathered</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;pink&gt; [Grandfathered]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a Magical Kangaroo Pouch</string>
								<string>the girdle of might</string>
								<string>a fire red choker</string>
								<string>poison clan insignia</string>
								<string>gauntlets of ogre power</string>
								<string>thieves patch</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>XP - broken bits</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;green&gt; [100XP - Knut]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>broken bits</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wizard books</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;blue&gt; [Wzd Book]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a dusty tome of forgotten lore</string>
								<string>rediscovering Ether</string>
								<string>the book of Flash</string>
								<string>the book of Force Field</string>
								<string>the book of shard storm</string>
								<string>the book of Rune</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bags</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;white&gt; [Bag]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>a satchel</string>
								<string>a cracked black urn</string>
								<string>a bodybag</string>
								<string>Gems</string>
								<string>Tank Gear</string>
								<string>a backpack</string>
								<string>@xxxx[{:::::::::::::::The Pit::::::::::::&gt;</string>
								<string>a bag of holding</string>
								<string>.oO(Allegaagse)Oo.</string>
								<string>ExtraHit Gear</string>
								<string>ExtraArc Gear</string>
								<string>Idle's bodybag</string>
								<string>a floating icesphere</string>
								<string>A Community Conquest Canister</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Highlighted Actions</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Attack Color</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>2</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffaa00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your attack.*</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Gets warm and hums</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#00ffff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The .* gets warm and hums.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gear Condition</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Pristine  ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffffff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Pristine  ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Fine      ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffaa00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Fine      ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Worn     ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Worn      ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Excellent ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aaff00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Excellent ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Good      ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffff7f</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Good      ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Average   ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Average   ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Used      ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Used      ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>[Battered  ]</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>[Battered    ]</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>IGN - innervate active</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your body surges with absorbed heat energy!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Migraine - Spell Lost</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Suddenly, blistering pain courses through your skull!</string>
							<string>Your spell is lost!</string>
							<string>Your migraine slowly subsides.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>BLD tempo change</name>
						<script>printGameMessage("Epiphany", matches[2] .. " granted you an epiphany!", "yellow", "white")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s tempo change grants you an epiphany!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other Revive</name>
						<script>--Beburos's body appears to be reviving itself!
printGameMessageVerbose("Combat", matches[2] .. " is reviving!")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s body appears to be reviving itself!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>reset</name>
						<script>if (GlobalVar.GUI) then
  printGameMessage("Reset!", "Server reset", "purple", "yellow")
  beep()
end

--Somewhere on distant planes, a disturbance is felt.
--Bosses, once defeated have returned anew.</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ffff00</mFgColor>
						<mBgColor>#aa00ff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Bosses, once defeated have returned anew.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lord Triggers</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>if StatTable.Level == 125 then return true end</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Stormlords</name>
							<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .. "&lt;blue&gt; [Shatter]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>This realm guardian flows here, fluid and graceful</string>
								<string>Bliksem</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Demon Crafter</name>
							<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .. "&lt;yellow&gt; [Crafter]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Black Aura) A demon chisels obscenities about Bo'vul onto the wall.</string>
								<string>(Demonic) (Black Aura) A demon chisels obscenities about Bo'vul onto the wall.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shard unlock</name>
							<script>if (GlobalVar.GUI) then
  printGameMessage("Shard!", "Shard unlocked", "purple", "yellow")
end

--Somewhere on distant planes, a disturbance is felt.
--Bosses, once defeated have returned anew.</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffff00</mFgColor>
							<mBgColor>#aa00ff</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Somewhere in the distance, you hear a being of energy cry out as the final seal to another realm breaks</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Air essence</name>
							<script>
if not GlobalVar.Silent then send("emote |BC| Air essence lit!",false) end

printGameMessage("Essence", "Air essence has been lit!", "white", "cyan")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The air elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fire Essence</name>
							<script>
if not GlobalVar.Silent then send("emote |BR| Fire essence lit!",false) end

printGameMessage("Essence", "Fire essence has been lit!", "white", "red")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The fire elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Water Essence</name>
							<script>
if not GlobalVar.Silent then send("emote |BB| Water essence lit!",false) end

printGameMessage("Essence", "Water essence has been lit!", "white", "blue")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The water elemental's energy erupts from its corpse and drifts off toward distant planes.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Earth essence</name>
							<script>if not GlobalVar.Silent then send("emote |BY| Earth essence lit!",false) end

printGameMessage("Essence", "Earth essence has been lit!", "white", "yellow")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The earth elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Outland Mist</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A mist of ancient dreams beckons you to enter</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shard Unlocks</name>
							<script>printGameMessage("Unlocks", "tialoc/queen z/dstone/duke z/commander")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A being of energy says 'Dark Fae Duke; Dwarf; Gith Commander; Queen;'</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shard Unlocks 2</name>
							<script>printGameMessage("Unlocks", "nubuc/kzinti war/garden/unmaker/air royalty")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A being of energy says 'Nubuc; Conqueror Kzin; winged Garden bust;'</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Shard Unlocks 3</name>
							<script>printGameMessage("Unlocks", "pyramid/gulch/sphinx/adrial/eelord")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A being of energy says 'Karnathian pyramid, gulch, and sphinx house three;'</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sphere Popped</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The pain elemental's essence collapses to form a glowing sphere of energy!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Alleg helpers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GroupLeader()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>night hag</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Talisman]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A night hag reaches out to steal your soul.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>leader of the east</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Black wand]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A half breed githzerai sits here making decisions for the east.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>mistress of the south</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Purple Robe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The mistress of the south sits here balancing her dagger.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Obs Sledgehamer</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Obs Sledgehamer]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Energy crackles and lava oozes from this molten man.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>crude spear</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Crude Spear]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Native to this plane, a strange breed of lizard man stalks about.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Devilish Lance</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Devilish Lance]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Soaring overhead, an imp scans for signs of life.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Exotic Robe</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Exotic Robe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Robed in exotic clothing, a Fae weaves a tale to his companions.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Black hood</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Black hood]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A black robed githzerai stands here watching his pupils.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Krakor</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Mark of Madness]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Granting no rest for the workers, a huge ogre patrols the halls.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Soggy Robe</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Soggy Robe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>(Demonic) (Black Aura) The animated corpse of Faraday wanders here.</string>
									<string>   (Demonic) (Black Aura) The animated corpse of Faraday wanders here.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Sultan directions</name>
								<script>cecho (string.rep (" ",20-tonumber(string.len(line))) .. "&lt;yellow&gt; [Sultan - dirs: dnnun [Rest - e, Mob - ne]]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Cold as Ice (Underwater)</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Elder Cult</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Widow]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A nihilistic cultist drifts in vast expanse of nothing.</string>
									<string>Full of rage and discontent, the elder cultist is here.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Malarauko / Vala</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Clasp]")
 </script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A demon of fire destroys everything it surveys.</string>
									<string>A demon of fire lashes out at its enemies.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Ralthar</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Steel broadsword]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A self-confident warrior scans for signs of danger.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Iron Dha</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Iron dha]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Staggering to and fro, a sunburnt wretch begs for death.</string>
									<string>Whipping his own bloody back, a poor soul lurches about.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>A darkenbeast feeds on a burnt corpse.</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Sandblasted Emerald]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A darkenbeast feeds on a burnt corpse.</string>
									<string>A blurred denizen steps out of the wasteland, savage and hungry!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>This oni was ritually blinded in order to commune with the spirit world.</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Blindfold]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>This oni was ritually blinded in order to commune with the spirit world.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Yormandil</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Yorimandil]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A wiry Fae sits here, meditating. A blindfold is tied around his head.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Apprentice Verte</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [ring]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Apprentice Verte is polishing a mirror.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Obsidian Arena, the stands</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>return gmcp.Room.Info.zone == "{ LORD } Dev     Obsidian Arena; Stands"</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>4</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Havynne</name>
									<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Havynne]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>The Fae Lady's blood red hair has been cropped very short.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Naeadonna</name>
									<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Naeadonna]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>This Fae Lady regards those around her with a watchful eye.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Exaltra</name>
									<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Exaltra]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>An extraordinarily beautiful young Fae recoils in horror when she sees you.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
								<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>New trigger2</name>
									<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; []")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ff0000</mFgColor>
									<mBgColor>#ffff00</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>test</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Axe of the third plane</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Axe]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>Gore-covered, a squatty demon looks up from snacking on a corpse.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Rock Hammer</name>
								<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .. "&lt;yellow&gt; [Rock Hammer]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A massive earthen statue dominates the room.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Lord Keys</name>
							<script>cecho (string.rep (" ",80-tonumber(string.len(line))) .."&lt;yellow&gt; [Garden]")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>cold iron key</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Transmog Portals</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return gmcp.Room.Info.name == "The Center of Thorngate Square"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Flayer Keep</name>
								<script>cecho (string.rep (" ",70-tonumber(string.len(line))) .. "&lt;yellow&gt; [Flayer Keep]")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>     Thorngate's circular brickwork dissolves into a portal to An underground complex!</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Stone Triggers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GlobalVar.PlaneName == "Stone"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Earth essence</name>
								<script>if not GlobalVar.Silent then send("emote |BY| Earth essence lit!",false) end

printGameMessage("Essence", "Earth essence has been lit!", "white", "yellow")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The earth elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Air Triggers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GlobalVar.PlaneName == "Air"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Air essence</name>
								<script>
if not GlobalVar.Silent then send("emote |BC| Air essence lit!",false) end

printGameMessage("Essence", "Air essence has been lit!", "white", "cyan")

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The air elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Fire Triggers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GlobalVar.PlaneName == "Air"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Fire Essence</name>
								<script>
if not GlobalVar.Silent then send("emote |BR| Fire essence lit!",false) end

printGameMessage("Essence", "Fire essence has been lit!", "white", "red")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The fire elemental's energy erupts from its corpse and drifts off towards distant planes.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Water Triggers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GlobalVar.PlaneName == "Water"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Water Essence</name>
								<script>
if not GlobalVar.Silent then send("emote |BB| Water essence lit!",false) end

printGameMessage("Essence", "Water essence has been lit!", "white", "blue")
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>The water elemental's energy erupts from its corpse and drifts off toward distant planes.</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>2</integer>
								</regexCodePropertyList>
							</Trigger>
							<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Lodestone keys</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>return gmcp.Room.Info.zone == "{ LORD } Yevaud  The Reckoning"</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>4</integer>
								</regexCodePropertyList>
								<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
									<name>Lodestone Keys</name>
									<script>cecho (string.rep (" ",65-tonumber(string.len(line))) .."&lt;yellow&gt; [Lodestone key]")</script>
									<triggerType>0</triggerType>
									<conditonLineDelta>0</conditonLineDelta>
									<mStayOpen>0</mStayOpen>
									<mCommand></mCommand>
									<packageName></packageName>
									<mFgColor>#ffff00</mFgColor>
									<mBgColor>transparent</mBgColor>
									<mSoundFile></mSoundFile>
									<colorTriggerFgColor>#000000</colorTriggerFgColor>
									<colorTriggerBgColor>#000000</colorTriggerBgColor>
									<regexCodeList>
										<string>A roaring flame dances to and fro, blindingly bright.</string>
										<string>A huge amorphous creature of water radiates deadly power.</string>
										<string>A face forms from the air, ringed by noxious green gases.</string>
										<string>Defying all logic, a collosus of earth moves quickly to attack.</string>
									</regexCodeList>
									<regexCodePropertyList>
										<integer>0</integer>
										<integer>0</integer>
										<integer>0</integer>
										<integer>0</integer>
									</regexCodePropertyList>
								</Trigger>
							</TriggerGroup>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Outland Triggers</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return GlobalVar.PlaneName == "Outland"</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>Outland Mist</name>
								<script></script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>A mist of ancient dreams beckons you to enter</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>0</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Gearbox</name>
							<script>if (GlobalVar.GUI) then
  printGameMessage("Unlock", "Gearbox unlocked", "purple", "yellow")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The seal on the next gate is released as the Deathwish crumples to the ground.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Game Messages - Info Only</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Soul Cleansed</name>
							<script>printGameMessage("SoulCleanse", matches[2] .. " soul has been cleansed!", "yellow", "white")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) soul has been cleansed!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>demonfire</name>
							<script>local msg_txt = "has"
if matches[2] == "You" then msg_txt = "have" end

printGameMessage("Demonfire", matches[2] .. " " .. msg_txt .. " demonfire!", "red", "white")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+) is surrounded by black flames!!!</string>
								<string>^(\w+) are surrounded by black flames!!!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Mob poisoned</name>
							<script>if not IsGroupMate(matches[2]) then
  printGameMessageVerbose("Mob Poisoned!", matches[2])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.*) succumbs to poison and shivers\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Flash Highlight ON</name>
							<script>if not IsGroupMate(matches[2]) then
  printGameMessageVerbose("Mob Flashed!", matches[2])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#0055ff</mFgColor>
							<mBgColor>#ffffff</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The eyes of (.*) dim and turn milky white\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Flash Highlight OFF</name>
							<script>if not IsGroupMate(matches[2]) then
  printGameMessageVerbose("Mob Eyes Clear!", matches[2])
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffffff</mFgColor>
							<mBgColor>#0055ff</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The eyes of (.*) brighten and clear\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Det text</name>
							<script>printGameMessage("Det Alert!", matches[2] .. " vanishes suddenly!", "red", "white")

if IsMDAY() then
  send("gtell " .. matches[2] .. " detted!")
end

--Moments before detonation, your the Ruling Glyph vanishes suddenly!</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Moments before detonation, your (.*) vanishes suddenly!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Unrest</name>
							<script>if SafeArea() then
  for _, player in ipairs(StaticVars.PrsBots) do
    if gmcp.Room.Players[player] then
      TryAction("tell " .. player .. " clarify", 15)
      break
    end
  end
elseif not GlobalVar.Silent then
  TryAction("gtell clarify", 60)
end

printGameMessage("Unrest", "There is no rest for the cursed!", "red", "white")

if not IsMDAY() then QuickBeep() end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>There is no rest for the cursed!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shatterspell strikes</name>
							<script>if not IsGroupMate(matches[2]) then
  printGameMessageVerbose("Mob shattered!", matches[3], "yellow", "white")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)'s shatterspell strikes (.*)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>web</name>
							<script>if not IsGroupMate(matches[2]) then return end

printGameMessage("Web Alert!", matches[2] .. " is webbed!", "red", "white")

if IsMDAY() then
  send("gtell " .. matches[2] .. " webbed!")
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Sticky strands shoot forth from an abyssal skulker's hands, smothering (\w+) in a web!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Misc Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Connecting to AVATAR</name>
						<script>local function set_save_spell(wait)
  local wait = wait or 8
  if not gmcp.Char or gmcp.Char.Status or not gmcp.Char.Status.level then return end
  if (tonumber(gmcp.Char.Status.level) == 125) then
    safeTempTimer("ConfigSavespellOnLogin", wait,[[send("config -savespell")]])
  else
    safeTempTimer("ConfigSavespellOnLogin", wait,[[send("config +savespell")]])
  end
  
  --safeTempTrigger("SetSaveSpell", "Ok, your savespell is now set to", function() safeKillTimer("ConfigSavespellOnLogin") end, "begin", 1) -- kills the timer if we manually set our savespell 
  safeEventHandler("KillSafeSpellIfRelog", "sysDisconnectionEvent", function() safeKillTimer("ConfigSavespellOnLogin") end, true)
end

-- on very first login, gmcp.Char won't be set, wait 5 seconds before trying
if not gmcp.Char or not gmcp.Char.Status then 
  safeTempTimer("SetSaveSpellDelayed", 5, set_save_spell())
else
  set_save_spell()
end

safeTempTrigger("SetSaveSpell", "Ok, your savespell is now set to", function() safeKillTimer("ConfigSavespellOnLogin"); safeKillTimer("SetSaveSpellDelayed"); end, "begin", 1) -- kills the timer if we manually set our savespell 
  
  



 </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Existing Character.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Your Password</name>
						<script>if GlobalVar.Password then
  send(GlobalVar.Password, false)
  tempTimer(0.5, [[send("")]])
  tempTimer(0.7, [[send("look")]])
  
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your Password: </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Savespell State</name>
						<script>StatTable.Savespell = (matches[2] == "ON") and true or false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Ok, your savespell is now set to (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gurney</name>
						<script>if (StatTable.Position == "Sleep" or StatTable.Position == "Rest") then send("stand") end
send("get all " .. StatTable.CharName)
TryLook()
send("wear all")

if matches[1] == "Your corpse appears in a burst of blue light!" then send("train") end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s Gurney has moved you to your corpse!</string>
							<string>Your corpse appears in a burst of blue light!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Threned corpse</name>
						<script>if (matches[2] == StatTable.CharName) then
  send("get all corpse")
  send("get all " .. StatTable.CharName)
  TryLook()
  send("wear all")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\[LORD INFO\]: \w+ finishes Threnody, moving corpse of (\w+) to safety.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>beckon</name>
						<script>if IsMDAY() then 
  if (StatTable.Position == "Sleep") then send("stand") end
  send("fol " .. matches[2])
else
  QuickBeep()
  printGameMessage("QuickBeep", "You were beckoned by " .. matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) beckons for you to follow</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Auto-continue</name>
						<script>deleteLine()
send("c",false)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>[B]ack,[H]elp,[R]efresh, or [C]ontinue:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Clickable URL's</name>
						<script>for i,v in ipairs(matches) do
  selectString(matches[i], 1)
  setLink([[openUrl("]]..matches[i]..[[")]], matches[i])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#5500ff</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>\b(?:(?:(?:https?|ftp|telnet)://[\w\d:#@%/;$()~_?\+\-=&amp;]+|www|ftp)(?:\.[\w\d:#@%/;$()~_?\+\-=&amp;]+)+|[\w\d._%+\-]+@[\w\d.\-]+\.[\w]{2,4})\b</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Please hit enter to continue</name>
						<script>send("look")
tempTimer(1,[[send("look")]])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Please hit enter to continue</string>
							<string>Please press &lt;enter&gt; to continue</string>
							<string>When you have read this, please press &lt;RETURN&gt; to continue ----&gt;</string>
							<string>************************************************************************</string>
							<string>|()()()()()()()()()()( Press &lt;enter&gt; to continue. )()()()()()()()()()()|</string>
							<string>|()()()()()()()()()( Press &lt;enter&gt; to continue. )()()()()()()()()()()()|</string>
							<string> |()()()()()()()()()( Press &lt;enter&gt; to continue. )()()()()()()()()()()()|</string>
							<string>       The fun never stops, so stay sharp, stay vigilant, and most</string>
							<string> ======================================================================</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>3</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You have to stand up before you do that</name>
						<script>send("stand")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have to stand up before you do that</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Autotrack</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>if(GlobalVar.AutoTrack ~= "off") then return true end</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AutoTrack - Give Up</name>
							<script>GlobalVar.AutoTrackTarget = ""</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You give up hunting your quarry.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Autotrack</name>
							<script>if (GlobalVar.AutoTrack == "on" or GlobalVar.AutoTrack == "kill") then
  send(matches[2])
elseif (GlobalVar.AutoTrack == "echo") then
  if (GlobalVar.AutoTrackTarget ~= "") then
    send("gtell Tracking |BW|" .. GlobalVar.AutoTrackTarget .. "|N|... |BR|" .. matches[2] .. "|N|!")
  else
    send("gtell Tracking |N|... |BR|" .. matches[2] .. "|N|!")
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You see your quarry's trail head (\w+) from here!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Autotrack - kill</name>
							<script>send("gtell Found |N|... |BW|" .. GlobalVar.AutoTrackTarget .. "|N|!")
if (GlobalVar.AutoTrack == "kill") then send(GlobalVar.KillStyle .. " " .. GlobalVar.AutoTrackTarget) end
GlobalVar.AutoTrackTarget = ""</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You have found your quarry!!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>stomp report</name>
						<script>-- As a rampaging mastador's foot comes down, TICKLE FIGHT vanishes suddenly!
-- A rampaging mastador viciously stomps on a military cloak and destroys it!
-- A rampaging mastador viciously stomps on crushed piece of armor until it is no more!

-- ^.* viciously stomps on (.*) and destroys it!$
-- ^.* viciously stomps on (.*) until it is no more!$

-- Produces a lot of spam reporting. Testing out if "vanishes" is for more important items

--if not GlobalVar.Silent then
--  send("gtell |BW|" .. matches[2] .. "|N| just got |BR|stomped|N|! I hope you have insurance...",false)
--end

printGameMessageVerbose("Stomp!", matches[2] .. " just got destroyed by a mob!", "red", "white")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.*'s foot comes down, (.*) vanishes suddenly!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>dark embrace</name>
						<script>if SafeArea() then return end

if not (StatTable.Class == "Beserker" or StatTable.Class == "Priest" or StatTable.Class == "Paladin" or StatTable.Class == "Druid") then
  TryCast("cast 'dark embrace'",5)
else
 if not GlobalVar.Silent then
  TryAction("gtell dark embrace please",300)
 end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You can't take the bright sunlight!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>beep</name>
						<script>
TryFunction("BeepedAlert", alert, nil, 5)
TryFunction("BeepedSound", beep, nil, 5)


printGameMessage("Beep!", "You've been beeped by &lt;cyan&gt;" .. matches[2] .. "&lt;ansi_cyan&gt;!", "cyan")

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.You are being BEEPED by (\w+)!.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Shatter Alert</name>
						<script>local shatter_enemy = matches[2]

if IsGroupMate(shatter_enemy) then return end

printGameMessage("Stormlord!!", "Target " .. shatter_enemy, "red", "white")

if IsClass({"Psionicist","Mindbender"}) then
  if GlobalVar.AutoCast then
    safeTempTrigger("ShatterAlertID", shatter_enemy .. " is DEAD!!", function() AutoCastON() end, "begin", 1)
    AutoCastOFF()
  end
  local quicken = false
  if StatTable.current_mana &gt; 10000 then send("quicken 5"); quicken = true end
  shatter_enemy = string.lower(shatter_enemy)
  shatter_enemy = " " .. shatter_enemy .. " "
  shatter_enemy = string.gsub(shatter_enemy, " of ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " the ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " with ", " ")
  shatter_enemy = string.gsub(shatter_enemy, "A ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " a ", " ")
  shatter_enemy = string.gsub(shatter_enemy, '^%s*(.-)%s*$', '%1')
  send("cast shatterspell " .. shatter_enemy)
  if quicken then send("quicken off") end
  
end

if not IsMDAY() or GroupLeader() then
  beep()
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Torrents of jagged ice cascade down upon (.*)'s enemies!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Force Field</name>
						<script>local shatter_enemy = matches[2]

if IsGroupMate(shatter_enemy) then return end

printGameMessage("Forcefield", "Psi/Mnd to shatter " .. shatter_enemy)

if IsClass({"Psionicist","Mindbender"}) then
  if GlobalVar.AutoCast then
    safeTempTrigger("ShatterAlertID", shatter_enemy .. " is DEAD!!", function() AutoCastON() end, "begin", 1)
    AutoCastOFF()
  end
  local quicken = false
  if StatTable.current_mana &gt; 10000 then send("quicken 5"); quicken = true end
  shatter_enemy = string.lower(shatter_enemy)
  shatter_enemy = " " .. shatter_enemy .. " "
  shatter_enemy = string.gsub(shatter_enemy, " of ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " the ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " with ", " ")
  shatter_enemy = string.gsub(shatter_enemy, "A ", " ")
  shatter_enemy = string.gsub(shatter_enemy, " a ", " ")
  shatter_enemy = string.gsub(shatter_enemy, '^%s*(.-)%s*$', '%1')
  send("cast shatterspell " .. shatter_enemy)
  if quicken then send("quicken off") end
  
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) summons a force field to protect (it|him|her) from harm!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Open door</name>
						<script>--Dojo picks the gate above you.
--You unlock the door to the south.

local dir = matches[3]

if dir == "above" then dir = "up"
elseif dir == "below" then dir = "down" end

send("open " .. dir)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ (pick|unlock)s? the \w+ (above|below) you\.$</string>
							<string>^\w+ (pick|unlock)s? the \w+ to the (west|east|south|north)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cursed Items</name>
						<script>-- When you encounter a cursed item
-- 1. if you're a sorcerer, cast remove curse
-- 2. if you're in a safe area, see if there's a druid to help
-- 3. If it's mday, ask group for rc

if StatTable.Class == "Sorcerer" and StatTable.Level &gt;= 18 then
  Battle.DoAfterCombat("cast 'remove curse'")
  return
end

if SafeArea() then
  local Players = gmcp.Room.Players
  for _, player in ipairs(StaticVars.DruidBots) do
    if Players[player] then
      send("tell " .. player .. " rc")
      break
    end
  end
  return
end

if IsMDAY() and Grouped() then
  send("gtell rc")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You can't let go of</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Holiday Tokens</name>
						<script>send("touch token")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You have earned an item! \(a .* token\)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Woken by Mob</name>
						<script>QuickBeep()
printGameMessage("Beep!", "Woken by mob!", "red", "white")
send("stand")

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You stand up and face your attacker.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>*** A LITTLE VARIETY IN COMMANDS PLEASE!!! ***</name>
						<script>send("score")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>*** A LITTLE VARIETY IN COMMANDS PLEASE!!! ***</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Run Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>kill trigger</name>
						<script>-- Autokill is off or autotargetting, ignore
if not GlobalVar.AutoKill or GlobalVar.AutoTarget then
  return
end

-- Already in combat
if Battle.Combat then
  return
end



-- Only pick up emotes from GroupLeader
if GMCP_name(matches.attacker) ~= GlobalVar.GroupLeader and not GroupLeader() then
  return
end

if GroupLeader() then return end

local ks = string.lower(GlobalVar.KillStyle)
local NextActionLag = 1

-- Only pounce if we're above 50% hp
if ks == "pounce" and (StatTable.current_health / StatTable.max_health) &lt; 0.5 then
  ks = "kill"
elseif ks == "shadowcast" then
  if(StatTable.Class == "Black Circle Initiate" and (StatTable.SubLevel &gt; 101 or StatTable.Level == 125)) then
    ks = "Shadowcast fear"
  else
    ks = "surp"
  end
end

if GlobalVar.AutoBash then ks = "bash" end

local NextAction = ks .. " " .. matches.victim

Battle.NextAct(NextAction, NextActionLag)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>3</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;attacker&gt;\w+) is killing (?&lt;victim&gt;.+?)(?:\.)?$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sanc down</name>
						<script>-- Rewrite 28 Aug 2023

AutoCross = AutoCross or false

if AutoCross then
  local was_asleep = false
  if StatTable.Position == "Sleep" then send("rest"); was_asleep = true end 
  send("cross")
  if was_asleep then send("sleep") end
  return 
end

function KillSancSelfAtLordTimer()
  safeKillTimer("SancSelfAtLord")
end

-- Function that waits till you're not fighting to cast sanctuary (will cast immediately if out of combat)
local function CastAfterCombat(spell)
  if not Battle.Combat and tonumber(gmcp.Char.Vitals.lag) == 0 and StatTable.Position ~= "Sleep" then
    send("cast " .. spell)
  else
    OnMobDeathQueuePriority("cast " .. spell)
  end
end

-- Function to sanc self at lord only if we don't receive sanc after 30 seconds
function SancSelfAtLord()
  if StatTable.Class == "Berserker" or StatTable.Class == "Sorcerer" then return end

  safeTempTimer("SancSelfAtLord", 30, function()
  safeEventHandler("SancSelfAtLordEventID", "OnQuit", "KillSancSelfAtLordTimer", true)
    if not StatTable.Sanctuary then
      if IsMDAY() then send("gtell not sanced!"); return end
      
      if StatTable.Class == "Monk" or StatTable.Class == "Shadowfist" then
        CastAfterCombat("'iron monk'")
      else
        CastAfterCombat("sanctuary")
      end
    end
  end)
end

local function PreachSancOnRun()
  if StatTable.Sanctuary then return end -- we got sanc somewhere else
  if Battle.Combat and not StatTable.Solitude then
    send("quicken 9" .. getCommandSeparator() .. "cast inno" .. getCommandSeparator() .. "quicken off")
  end
  send("preach sanc")
end

if SafeArea() then return end
if not StatTable.Fortitude and StatTable.Level &lt; 125 then return end
if StatTable.Level == 250 then CastAfterCombat("sanctuary"); return end

if not GlobalVar.Silent then send("emote is no longer in |BW|Sanctuary|N|.",false) end

-- At Lord, if we're a Priest, we'll preach sanc, otherwise we'll let someone us sanc us
if StatTable.Level == 125 then
  -- We'll sanc ourselves if we're at Lord unless we don't receive it after 30 seconds
  if StatTable.Class ~= "Priest" then SancSelfAtLord(); return end

  -- If we're a Priest, we'll preach sanc (though we need to be at least Lord 25 to do so)
  if StatTable.SubLevel &lt; 25 or not Grouped() then return end
  StatTable.Sanctuary = nil
  PreachSancOnRun()
  safeTempTimer("PreachSancOnRun", 15, function() PreachSancOnRun() end) -- do a check in 15 seconds to make sure we did indeed preach sanc
  return
else -- Hero and Low mort

  -- If we're a Monk or Shadowfist, we'll use iron Monk (though we need to be at least Level 30 to do so)
  if (StatTable.Class == "Monk" or StatTable.Class == "Shadowfist") and StatTable.Level &gt;= 30 then CastAfterCombat("'iron monk'"); return; end

  -- Cleric, Priest, Druid, and Vizier can use sanctuary at low mort
  if (StatTable.Class == "Cleric" or StatTable.Class == "Priest" or StatTable.Class == "Druid" or StatTable.Class == "Vizier") 
     and StatTable.Level &gt;=23 then CastAfterCombat("sanctuary"); return; end
  
  -- Everyone else gets sanc at Hero 45
  if StatTable.Class ~= "Berserker" and StatTable.SubLevel &gt;= 45 then CastAfterCombat("sanctuary"); return; end

  -- We aren't able to cast sanc on ourselves, ask for sanc
  if not GlobalVar.Silent and Grouped() then send("gtell |BW|Sanctuary|N| is down - please sanc me",false) end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The protective aura fades from around your body.</string>
							<string>Your Iron Monk style fades.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Frenzy down</name>
						<script>if GlobalVar.AutoFrenzy == false or SafeArea() then return end

if AR.Status and not StatTable.Class == "Berserker" then return end

if not (gmcp.Char.Status.area_name == "{ ALL  } AVATAR  Sanctum") then
  if StatTable.Class == "Berserker" and not GlobalVar.Silent then
    send("gtell frenzy")
  elseif (StatTable.Fortitude and 
         (StatTable.Level &gt; 51 or StatTable.SubLevel &gt; 41) or
         (StatTable.Level &gt;= 21 and (StatTable.Class == "Cleric" or StatTable.Class == "Druid" or StatTable.Class == "Vizier"))) then
      if (StatTable.Class == "Paladin") then 
        Battle.DoAfterCombat("cast fervor")
      else
        Battle.DoAfterCombat("cast frenzy")
      end
  end
  if not GlobalVar.Silent then send("emote is no longer |BR|Enraged|N|.") end
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You slowly come out of your rage.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Mystical down</name>
						<script>
if StatTable.Fortitude then
  OnMobDeathQueue("cast mystical")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your mystical barrier shimmers and is gone.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>locks</name>
						<script>send("unlock " .. matches[2])
send("open " .. matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'un\w* (\w+)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On Level</name>
						<script>if (GlobalVar.LevelGear) then 
  send("unlevel")
  tempTimer(10,[[GlobalVar.LevelReady = false]])
end



if (StatTable.Class == "Sorcerer" and not SafeArea() and StatTable.Foci and StatTable.Foci &gt; 15 and StatTable.Level &gt; 39 and not StatTable.TaintedExhaust and (StatTable.current_mana / StatTable.max_mana) &gt; 0.25 and Grouped()) then
  if GroupSize() &lt;= 3 and StatTable.Level == 125 then return end
  send("cast tainted")
  if (StatTable.DeathShroud == nil) then    
      OnMobDeathQueue("cast 'death shroud'")
  end
end

raiseEvent("OnLevel")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile>C:/Users/griff/Dropbox/mudlet/sounds/Final Fantasy 1- Victory Music.mp3</mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your powers increase!!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>autolook</name>
						<script>TryLook()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>drifts into the room</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>roar</name>
						<script>if (StatTable.Race == "Dragon") then
  send("racial roar")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'roar'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>rearm</name>
						<script>printGameMessage("Disarmed!", "Weapon was disarmed!", "red", "white")
send("rearm")
send("get all")
send("wield all")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>disarms you and sends your weapon flying!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sneak</name>
						<script>if not (gmcp.Room.Info.zone == "{ ALL  } AVATAR  Sanctum" or gmcp.Room.Info.zone == "{ LORD } Dev     Rietta's Wonders") then
  if StatTable.Fortitude then
    TryQueue("sneak",60)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You no longer feel stealthy.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Move Hidden</name>
						<script>if not (gmcp.Room.Info.zone == "{ ALL  } AVATAR  Sanctum" or gmcp.Room.Info.zone == "{ LORD } Dev     Rietta's Wonders") then
  if StatTable.Fortitude then
    TryQueue("move hidden",60)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You no longer move hidden.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lotto pinfo</name>
						<script>local lottobot = matches[2] -- can't use matches inside tempTimer

if matches[3] == StatTable.CharName then
  print("YOUR PICK!!!")
  QuickBeep()
end

-- For the first round of lotto, always check out the lottobot
local FirstPeek = TryAction("pinfo " .. lottobot, 600)
if FirstPeek then beep() end

-- Otherwise Check the lottobot when its almost our turn
if not FirstPeek then
  if not matches[4] and matches[3] == StatTable.CharName then
    tempTimer(1,function() send("pinfo " .. lottobot) end)
    return
  end

  if (matches[3] == StatTable.CharName or
      matches[4] == StatTable.CharName or
      matches[5] == StatTable.CharName or
      matches[6] == StatTable.CharName) then
    
    tempTimer(1,function() send("pinfo " .. lottobot) end)
  end
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group '(\w+)'s pick\. Check my pinfo and gt # to pick\.( Upcoming: )?(\w+)?,? ?(\w+)?,? ?(\w+)?</string>
							<string>^\*?(\w+)\*? tells the group '(\w+) - Pick an item from Pinfo \w+( - Upcoming: )?(\w+)?,? ?(\w+)?,? ?(\w+)?</string>
							<string>^\*?(\w+)\*? tells the group '(\w+)'s pick.'</string>
							<string>^\*?(\w+)\*? tells the group '(\w+)'s pick! Check pinfo \w+ and gtell &lt;#&gt; or gtell pass. Next up: (\w+)?,? ?(w\+)?, ?(\w+)?,? ?(\w+)?</string>
							<string>^\*?(\w+)\*? tells the group '(\w+)'s pick. Upcoming winners: (\w+)?,? ?(w\+)?, ?(\w+)?,? ?(\w+)?</string>
							<string>^\*?(\w+)\*? tells the group '(\w+)'s pick. Please 'playerinfo \w+' for a list. Grouptell commands: 'info &lt;item #&gt;' for additional information \(if available\)., 'pass' to pass.'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cure Poison</name>
						<script>-- Stay out of lag if rescueing
if AR.Status then return; end
if Battle.Combat then return; end

-- Stay out of lag if leading the group
if (GlobalVar.GroupLeader ~= StatTable.CharName and GlobalVar.GroupMates[GMCP_name(matches[2])] and StatTable.current_mana &gt; 100) then

  -- Do you have access to cure poison? Excluded caster classes (as it'll interupt their casting) and Viz (could mess up their mana management)
  if (StatTable.Class == "Cleric" or StatTable.Class == "Druid" or StatTable.Class == "Warrior" or StatTable.Class == "Paladin" or 
      StatTable.Class == "Rogue" or StatTable.Class == "Monk"or StatTable.Class == "Archer" or StatTable.Class == "Soldier" or 
      StatTable.Class == "Fusilier" or StatTable.Class == "Assassin" or StatTable.Class == "Black Circle Initiate" or StatTable.Class == "Rogue") then
    
    TryAction("cast 'cure poison' " .. matches[2], 5)
  end
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) shivers and suffers\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Group Portal</name>
						<script>if (StatTable.Class == "Mage" or StatTable.Class == "Cleric" or StatTable.Class == "Wizard" or
    StatTable.Class == "Druid" or StatTable.Class == "Stormlord" or StatTable.Class == "Vizier"
    --or StatTable.Class == "Priest" -- Prs is out of class but often helpful
    ) then
    
    

  if StatTable.current_mana &gt; 100 then
    send("cast portal " .. matches[2])
    if not GlobalVar.Silent then send("gtell ool") end
  else
    printGameMessage("Group Portal", "mana less than 100, portal not cast")
  end
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'pp (.*)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Portal Popped</name>
						<script>-- A blood stained portal to Darker Castle has congealed here!
send("get portal")

if matches[2] then
  printGameMessage("Portal!", "A portal to " .. matches[2] .. " popped here!")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^A blood stained portal to (.*) has congealed here!</string>
							<string>A portal congealed from blood.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Alertness down</name>
						<script>if SafeArea() then return end

if not StatTable.Fortitude then return end

if StatTable.current_moves &lt; 1000 then return end

if Battle.Combat then
  OnMobDeath("alertness")
else
  send("alertness")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel less perceptive.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On My Death - XP Loss</name>
						<script>printGameMessage("Death!", "Death Loss XP: &lt;white&gt;" .. matches[2], "red", "ansi_white")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Death sucks (\d+) experience points from you as payment for resurrection.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Hellbreach Rewards</name>
						<script>
--cecho("GroupChat","&lt;yellow&gt;&lt;b&gt;" .. multimatches[2][1] .. "\n")

printGameMessage("AutoLotto!", "You received " .. multimatches[2][2], "yellow", "white")

--
--The amulet evaporates in a marvelous puff of smoke!$You have received an award of 5 quest points!
--The amulet evaporates in a marvelous puff of smoke!$You have received: a perfect ruby! </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The amulet evaporates (.*)$</string>
							<string>^You have received:? (.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Earned Items</name>
						<script>if (matches.item == "a hellbreach amulet") then 
  send("touch amulet")
  return 
end

earned_item = RemoveArticle(matches.item)

printGameMessage("AutoLoot!", "You received: " .. earned_item, "yellow", "white")
QuickBeep()


if StatTable.Level == 125 and type(checkItemIsAlleg) == "function" and checkItemIsAlleg(earned_item) then
  alleg_item = getAllegKeyword(earned_item)
  send("put '" .. alleg_item .. "' " .. StaticVars.AllegBagName)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You have earned an item! \((?&lt;item&gt;.*)\)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Earthbind</name>
						<script>if Battle.Combat then
  printGameMessage("Earthbind", "You've lost fly!", "red", "white")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You slowly float to the ground.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You are blind!!!</name>
						<script>printGameMessage("Battle", "You are blind!!!")

if StatTable.Class == "Sorcerer" or StatTable.Class == "Berserker" or AR.Status then
  if not GlobalVar.Silent then TryAction("gtell cb", 5) end
elseif StatTable.Class == "Priest" and (StatTable.Level == 125 or StatTable.SubLevel &gt; 500) then
  Battle.DoAfterCombat("preach panacea")
elseif StatTable.Class == "Ripper" then
  Battle.DoAfterCombat("cast 'mass aid'")
else
  Battle.DoAfterCombat("cast 'cure blindness'")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You are blind!!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Decepted</name>
						<script>QuickBeep()
printGameMessage("Decepted!", matches[2])
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You frantically attempt to remove (.*)!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Grouping Trigger</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="yes" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Group Leader Commands</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group '(.*)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Group Commands</name>
							<script>send(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(recall set|recall|sanctum|look|quaff|drink|sneak|movehidden|inno|salute|tell pilgrim reward|kneel|die|save)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sleep</name>
							<script>if (SafeArea() and (StatTable.Sneak or StatTable.MoveHidden)) then
  send("visible",false)
end

if StatTable.Savespell == nil or StatTable.Savespell then send("config -savespell",false); StatTable.Savespell = false end

if (StatTable.Position ~= "Sleep") then
  if not (StatTable.Level == 125 and StatTable.Class == "Bladedancer" and StatTable.current_mana &gt; 2000 and not SafeArea() and BldDancing()) then 
   send("sleep",false)
  else
    if StatTable.Bladetrance then
      send("bladetrance break")
    end
    if not IsMDAY() then
      QuickBeep()
      printGameMessage("QuickBeep", "BLD didn't sleep, still dancing", "yellow", "white")
    end 
  end
end



</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>sleep</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bld Sleep</name>
							<script>if StatTable.Class ~= "Bladedancer" then return end

if (SafeArea() and (StatTable.Sneak or StatTable.MoveHidden)) then
  send("visible",false)
end

if StatTable.Savespell == nil or StatTable.Savespell then send("config -savespell",false); StatTable.Savespell = false end

if (StatTable.Position ~= "Sleep") then
   send("sleep",false)
end


</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>bld sleep</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wake</name>
							<script>if (StatTable.Position == "Sleep") then send("stand") end
if (StatTable.Level == 125 and not SafeArea()) then
    OnMobDeathWake()
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>wake</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Savespell On</name>
							<script>if StatTable.Savespell == nil or StatTable.Savespell == false then send("config +savespell",false); StatTable.Savespell = true end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>spellsave on</string>
								<string>savespell on</string>
								<string>pss</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Savespell Off</name>
							<script>if StatTable.Savespell == nil or StatTable.Savespell then send("config -savespell",false); StatTable.Savespell = false end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>spellsave off</string>
								<string>savespell off</string>
								<string>mss</string>
								<string>tick off</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
								<integer>3</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Portal Enter</name>
							<script>if (gmcp.Char.Status.area_name == "{ ALL  } AVATAR  Sanctum" and StatTable.Position == "Sleep") then send("stand") end

portal_action = matches.colour_code ~= "" and (string.gsub(matches.colour_code,"/", "|") .. matches.portal_string) or matches.portal_string

if string.sub(matches.portal_string,1,2) == "ne" or string.sub(matches.portal_string,1,2) == "mi" then
  TryAction("enter " .. portal_action, 15)
else
  send("enter " .. portal_action)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^ent?e?r? (?&lt;colour_code&gt;\/\w+\/)?(?&lt;portal_string&gt;\w+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Spellcheck</name>
							<script>expandAlias("spellcheck")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>spellcheck</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>2s</name>
							<script>Try2sLock = Try2sLock or nil

if Try2sLock == true then return end

Try2sLock = true
tempTimer(10, [[Try2sLock = nil]])

coroutine.wrap(function()
    local RoomName = gmcp.Room.Info.name    
    if (RoomName == "Outside a Vent") then
      if (StatTable.current_health &lt; 5000) then 
        local time_to_wait = math.max(5-math.floor(StatTable.current_health/1000),1)
        wait(time_to_wait) 
      end
      repeat
        local lag = tonumber(gmcp.Char.Vitals.lag)
        if lag == 0 then
          send("south")
          send("south")
          TryLook()
        end
        wait(2)
        RoomName = gmcp.Room.Info.name        
      until (RoomName == "Within the Nest")
    else
      pdebug("Trigger [Outside a Vent]: Not outside a vent, ignore 2s call")
    end
end)()
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>2s</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Sanc d w</name>
							<script>send("sanctum")
send("down")
send("west")
if StatTable.Savespell == nil or StatTable.Savespell then send("config -savespell",false); StatTable.Savespell = false end
send("sleep")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>sanc d w</string>
								<string>ok sanctum</string>
								<string>sanc dw</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>3</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>surge level</name>
							<script>local SurgeUpMana = (30000 * Battle.GetSpellCostMod("arcane")) or 30000 
local surgelevel = tonumber(matches[3]) or matches[3]

if (StatTable.Class == "Mage" or StatTable.Class == "Wizard" or StatTable.Class == "Sorcerer") then
  
  if surgelevel == "off" or surgelevel == 1 then
    GlobalVar.SurgeLevel = 1
    printGameMessage("Surge Request", "Surging turned off")
    
  elseif surgelevel == "down" then
    GlobalVar.SurgeLevel = 2
    printGameMessage("Surge Request", "Surge level set to " .. GlobalVar.SurgeLevel)
    
  elseif surgelevel == "up" then
        
    if GlobalVar.SurgeLevel &lt;= 3 and manapct &gt; 0.40 then
      local priorsurgelevel = GlobalVar.SurgeLevel
      if StatTable.current_mana  &gt; SurgeUpMana then
        GlobalVar.SurgeLevel = 5
      elseif StatTable.current_mana  &gt; (SurgeUpMana * 0.75) then
        GlobalVar.SurgeLevel = (GlobalVar.SurgeLevel &gt; 4 and GlobalVar.SurgeLevel or 4)
      else
        GlobalVar.SurgeLevel = (GlobalVar.SurgeLevel &gt; 3 and GlobalVar.SurgeLevel or 3)
      end
      
      tempTimer(60, function() GlobalVar.SurgeLevel = priorsurgelevel; printGameMessage("Surge Request", "Surge level reset to " .. priorsurgelevel) end)
      printGameMessage("Surge Request", "Surge level set to " .. GlobalVar.SurgeLevel)
    else
      printGameMessage("Surge Request", "Mana is low, didn't surge up")
    end  
    
  else
    assert(surgelevel~=nil)
    GlobalVar.SurgeLevel = surgelevel
    printGameMessage("Surge Request", "Surge level set to " .. GlobalVar.SurgeLevel)
  end
elseif StatTable.Class == "Psionicist" then
  if GlobalVar.QuickenStatus then return end
  
  if surgelevel == "up" then
    local manapct = (StatTable.current_mana / StatTable.max_mana)
    
    if manapct &gt; 0.75 then
      send("quicken 5",false)
      tempTimer(60, function() send("quicken off"); printGameMessage("Surge Request", "Quicken ended") end)
    elseif manapct &gt; 0.5 then
      send("quicken 3",false)
      tempTimer(60, function() send("quicken off"); printGameMessage("Surge Request", "Quicken ended") end)
    else
      printGameMessage("Surge Request", "Mana is low, didn't quicken")
    end
  end 

end
  
  
    



</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(s|surge) (off|up|down|1|2|3|4|5)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>create shrine</name>
							<script>if(StatTable.Level == 125) then 
  if(StatTable.Class == "Cleric" or StatTable.Class == "Vizier" or StatTable.Class == "Priest" or StatTable.Class == "Monk" or StatTable.Class == "Druid") then 
    if (StatTable.Position == "Sleep") then send("stand") end
    TryAction("cast 'create shrine'" .. getCommandSeparator() .. "sleep",100)
  end

end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>shrine</string>
								<string>create shrine</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Homeshift</name>
							<script>

if not GlobalVar.AutoPlane then
  QuickBeepVerbose()
  printGameMessageVerbose("QuickBeep", "Leader requested homeshift")
  return
end

if not SafeArea() then
  if (StatTable.Position == "Sleep") then send("stand") end
  
  local tempTriggerID = tempBeginOfLineTrigger("You failed your homeshift due to lack of concentration!", function() send("cast homeshift") end)
  tempBeginOfLineTrigger("You form a magical vortex and step into it...", function() killTrigger(tempTriggerID) end, 1)
  send("cast homeshift")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>home</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>preach clarify</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125) then
  TryAction("preach clarify",5)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>clarify</string>
								<string>preach clarify</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>preach sanc</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125 and StatTable.SubLevel &gt;= 25) then
  if Battle.Combat and not StatTable.Solitude then
    send("quicken 9" .. getCommandSeparator() .. "cast inno" .. getCommandSeparator() .. "quicken off")
  end
  send("preach sanc")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>preach sanc</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>preach fly</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125 and StatTable.SubLevel &gt;= 25) then
  if Battle.Combat then
    OnMobDeathQueuePriority("preach fly")
  else
    send("preach fly")
  end
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>preach fly</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>preach inno</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125) then
  TryAction("preach inno",5)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>preach inno</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>absolve</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125) then
  TryAction("preach absolve",5)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>absolve</string>
								<string>preach absolve</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Planar Summon</name>
							<script>if (StatTable.Class == "Psionicist" or StatTable.Class == "Mindbender") then
  TryAction("cast planar summon", 10)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>planar summon</string>
								<string>anchor summon</string>
								<string>summon anchor</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>panacea</name>
							<script>if (StatTable.Class == "Priest" and StatTable.Level == 125) then
  TryAction("preach panacea",5)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>blind</string>
								<string>cb</string>
								<string>panacea</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>3</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>mass fly</name>
							<script>if IsNotClass({"Wizard", "Mage"}) then return end
if StatTable.Level &lt; 125 and StatTable.SubLevel &lt; 500 then return end

TryAction("cast 'mass fly", 5)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>mass fly</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>smith</name>
							<script>TryAction("smith all", 10)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>smith</string>
								<string>smith all</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>deposit</name>
							<script>TryAction("deposit all", 10)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>deposit</string>
								<string>deposit all</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>surge check</name>
							<script>if not GlobalVar.AutoCast then return end
if GlobalVar.Silent and not IsMDAY() then return end

if GlobalVar.SurgeLevel == 1 then
  send("gtell Surge off")
  return
end

local colour_code = "|BW|"

if GlobalVar.SurgeLevel == 3 then
  colour_code = "|BY|"
elseif GlobalVar.SurgeLevel == 4 then
  colour_code = "|BR|"
elseif GlobalVar.SurgeLevel == 5 then
  colour_code = "|BP|"
end

send("gtell Surge level: " .. colour_code .. GlobalVar.SurgeLevel .. "|N|")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>surge check</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>bashdoor</name>
							<script>if StatTable.Level &lt; 250 and IsClass({"Sorcerer", "Soldier", "Priest", "Assassin", "Wizard", "Druid", "Vizier"}) then return end -- these classes don't have bashdoor

TryAction("bashdoor " .. matches[2], 5)</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^bd (n|w|e|s|u|d|north|west|east|south|up|down)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>woe</name>
							<script>if StatTable.Level == 250 then send("cast 'word of escape'") end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>woe</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>poison trigger</name>
							<script>if StatTable.current_mana &lt; 1000 then printGameMessage("GroupLeader Command", "ignored poison request, low mana") return end

local poi_target = ""
if multimatches[2][2] and multimatches[2][2] ~= "it" then
 poi_target = " " .. multimatches[2][2]
end

TryAction("quicken 9" .. getCommandSeparator() .. "cast poison" .. poi_target .. getCommandSeparator() .. "quicken off", 5)


--printGameMessage("Debug", "quicken 9" .. getCommandSeparator() .. "cast poison" .. poi_target .. getCommandSeparator() .. "quicken off")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return (StatTable.Class == "Sorcerer" and StatTable.Level == 125)</string>
								<string>^pois?o?n? ?(\w+)?</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>MDAY</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>return IsMDAY()</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>get / drop / give</name>
								<script>send(matches[1])

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(get|drop|give) (\d+|all)?.?(?&lt;items&gt;\w+) ?(?&lt;container&gt;\w+)?$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>fletch</name>
								<script>

arrow = matches.arrow
type = matches.type or ""



send("autofletch " .. items .. " " .. container)</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^fletch (?&lt;arrow&gt;\w+) ?(?&lt;type&gt;\w+)?$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gt dropjunk</name>
								<script>enableTrigger("drop_junk")
send("inventory")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>dropjunk</string>
									<string>dj</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gt repinv</name>
								<script>local freeItems = tonumber(string.sub(gmcp.Char.Vitals.string, -3)) - tonumber(gmcp.Char.Vitals.items)
local freeWeight = tonumber(gmcp.Char.Vitals.maxwgt) - tonumber(gmcp.Char.Vitals.wgt)

if freeWeight &lt; 100 then
  send("gtell Only " .. freeWeight .. " lbs left!")
end

if freeItems &lt; 10 then
  send("gtell Only " .. freeItems .. " items left!")
end

</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>repinv</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gt ablut</name>
								<script>send("cast ablut")

safeTempTrigger("AblutRetry", "You failed your ablution due to lack of concentration!", [[send("cast ablut")]], "begin")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>ablut</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gt wear all</name>
								<script>send("wear all")</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>wear all</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>3</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>gt skin cor</name>
								<script>if IsNotClass({"Archer", "Soldier", "Fusilier"}) then return end

if AltList.Chars[StatTable.CharName].Worship ~= "Durr" then return end


send(matches[1])</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^skin (\d+)?.?cor</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</TriggerGroup>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>missing</name>
							<script>local search_str = string.lower(matches[1])

if search_str:find(string.lower(StatTable.CharName)) then
  QuickBeep()
  printGameMessage("Missing", "Group leader says you're missing!")
end

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(?i)missing .*</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>track</name>
							<script>if GlobalVar.AutoTrack == "echo" then
  TryAction("track " .. matches[2], 1)
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>track (\w+)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Groupie Commands</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group '(.*)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>remove curse</name>
							<script>Battle.DoAfterCombat("cast 'remove curse' " .. multimatches[2][2])
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if(StatTable.Class == "Sorcerer" or StatTable.Class == "Cleric" or StatTable.Class == "Druid") then return true end</string>
								<string>^\*?(\w+)\*? tells the group 'rc'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>send trigger</name>
						<script>if StatTable.Level &lt; 125 or StatTable.current_mana &lt; 1000 or StatTable.Class == "Berserker" then return end

local wait = 0
local SendTarget = matches[2]
local SendPlane = matches[3]

print(StatTable.Position)
if not (StatTable.Position == "Stand") then return; end

if IsNotClass({"Mage", "Psionicist", "Sorcerer", "Wizard"}) then
  wait = 3
end

safeTempTimer("send trigger", wait, function() send("cast send " .. SendTarget .. " " .. SendPlane); end)


-- You initiate the send ritual!
-- You begin chanting ominously as blue smoke fills the room...
-- [LORD INFO]: Zephyra initiates a Send Ritual for Kaaria to Arcadia.

-- You feel Neilsen's power mingle with yours as he joins the ritual!
-- The send ritual has 2 participants and it requires 1 more to complete.
-- Neilsen adds his voice to the chant! The blue smoke swirls around Kaaria...

-- You feel Shaykh's power mingle with yours as he joins the ritual!
-- Shaykh adds his voice to the chant! The blue smoke envelopes you!

-- Kaaria stands up.
-- Kaaria wavers for a moment, and with a bright flash of green light, is gone!
-- [LORD INFO]: Kaaria has just shifted to Arcadia!
-- [LORD INFO]: Shaykh finishes the Send Ritual, moving Kaaria.
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'send (\w+) (\w+)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Follow group leader into portal</name>
						<script>if (IsGroupLeader(matches[2])) then
  tempTimer(1, function() send("enter portal") end)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) enters a portal.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Fails to follow</name>
						<script>printGameMessage("Missing Groupie", matches[2] .. " fails to follow!")

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) fails to follow$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Need to be Flying/Boat</name>
						<script>if StatTable.Class == "Berserker" then
  if not GlobalVar.Silent then send ("gtell I couldn't follow - |BR|flying down!|N|") end
else
  if not not GlobalVar.Silent then send ("gtell I couldn't follow - attempting to cast fly!") end
  local direction = matches[2]
     
  safeTempTrigger("YouFailedFly", "You failed your fly due to lack of concentration!", function() send("cast fly") end, "begin")
  safeTempTrigger("YourFeetRise", "Your feet rise off the ground.", function() safeKillTrigger("YouFailedFly"); send(direction) end, "begin", 1)
  
  
  safeEventHandler("NeedToBeFlyingEventID", "OnQuit", function() safeKillTrigger("YouFailedFly"); safeKillTrigger("YourFeetRise") end, true)  
  send("cast fly")
    
    
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You need to be flying to go (east|west|north|south|up|down)\.$</string>
							<string>^You need a boat to go to the (\w+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>switch monitor</name>
						<script>StatTable.Monitor = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Okay, you are now monitoring (\w+).</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Groupie Death</name>
						<script>-- [DEATH INFO]: Yennefer killed by Chloroform in Ponderous Flowers (18423).

local DeadPlayer = matches.charname

-- Not our groupmate, return

if not GlobalVar.GroupMates[GMCP_name(DeadPlayer)] or GMCP_name(DeadPlayer) == StatTable.CharName then return end

-- Provide a game message
printGameMessage("Death!", DeadPlayer .. "&lt;ansi_white&gt; killed by " .. matches.mobname .. " in " .. matches.room .. ".", "red", "yellow")

-- If we are a Lord and have gurney available, try to gurney groupmate on plane
if StatTable.Level &lt; 125 or StatTable.Class == "Sorcerer" or StatTable.Class == "Berserker" or StatTable.Class == "Shadowfist" then return end

GurneyTriggerHandle = GurneyTriggerHandle or {}
GurneyTriggerHandle[DeadPlayer] = GurneyTriggerHandle[DeadPlayer] or nil

if GurneyTriggerHandle[DeadPlayer] then
  killTrigger(GurneyTriggerHandle[DeadPlayer])
end

local regex_pattern = string.format("^\\[LORD INFO\\]: %s has just shifted to (.*)!", DeadPlayer)

printGameMessage("AutoGurney", DeadPlayer .. " added to autogurney")
GurneyTriggerHandle[DeadPlayer] = tempRegexTrigger(regex_pattern, function()
  if SafeArea() then return end 
  if StatTable.Position == "Stand" then send("cast gurney " .. DeadPlayer) end
  
end, 1)

function ClearGurneyTriggers()
  if not GurneyTriggerHandle then return end
  
  for Index,TriggerID in pairs(GurneyTriggerHandle) do
    killTrigger(TriggerID)
    GurneyTriggerHandle[Index] = nil
  end
end



</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\[DEATH INFO\]: (?&lt;charname&gt;\w+) killed by (?&lt;mobname&gt;.*) in (?&lt;room&gt;.*) \((\d+)\)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Groupie Immo'd</name>
						<script>local DeadPlayer = matches.charname

-- Not our groupmate, return

if not GlobalVar.GroupMates[GMCP_name(DeadPlayer)] or GMCP_name(DeadPlayer) == StatTable.CharName then return end

-- Provide a game message
printGameMessage("Death!", DeadPlayer .. " was immo'd!!", "red", "white")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.* summons black imps to kill (\w+)!!!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Groupmate Frenzy</name>
						<script>if GroupLeader() or (StatTable.Class == "Berserker" or StatTable.Class == "Priest" or StatTable.Class == "Shadowfist" or StatTable.Class == "Sorcerer") or (StatTable.Level &lt; 51 or StatTable.SubLevel &lt; 41) or StatTable.Alignment &lt; 300 then
  return
end

if Battle.Combat then
  OnMobDeath("cast frenzy " .. matches[2])
  printGameMessage("Request", "Added frenzy on " .. matches[2] .. " to queue")
else
  send("cast frenzy " .. matches[2])
  printGameMessage("Request", "Casting frenzy on " .. matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group '\w+ has lost Frenzy'$</string>
							<string>^\*?(\w+)\*? tells the group 'frenzy pl</string>
							<string>^\*?(\w+)\*? tells the group 'frenzy'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lord Only Triggers</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>if(StatTable.Level == 125) then return true end</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Summon Planar Anchor</name>
							<script>if StatTable.Class == "Mage" or
  StatTable.Class == "Cleric" or
  StatTable.Class == "Paladin" or
  StatTable.Class == "Psionicist" or
  StatTable.Class == "Sorcerer" or
  StatTable.Class == "Priest" or
  StatTable.Class == "Wizard" or
  StatTable.Class == "Mindbender" or
  StatTable.Class == "Druid" or
  StatTable.Class == "Stormlord" then
  TryAction("cast 'planar anchor' summon", 30)
end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\w+ begins to summon the Planar Anchor!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Thren party</name>
							<script>
if GMCP_name(matches[2]) == StatTable.CharName then return end

if matches[4] == gmcp.Room.Info.name and GlobalVar.GroupMates[GMCP_name(matches[2])] then
  if not GroupLeader() and StatTable.Position == "Stand" and StatTable.Class ~= "Berserker" and StatTable.Class ~= "Vizier" and StatTable.current_mana &gt; 150 and tonumber(gmcp.Char.Vitals.lag) == 0 then
    send("cast thren " .. matches[3])
  end
end


--GetSpellCostMod(type) -- what type is thren?? test later</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\[LORD INFO\]: (\w+) initiates a Threnody dirge for corpse of (\w+) in (.*)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AutoPlane filter</name>
							<script></script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>if GlobalVar.AutoPlane then return true end</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>4</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>AutoPlane</name>
								<script>local plane = multimatches[2].plane
if plane == "WaterRealm" then plane = "water" end
if plane == "EarthRealm" then plane = "earth" end
if plane == "Astral Plane" then plane = "astral" end
if plane == "Planar Anchor" then plane = "anchor" end
if plane == "Kzinti Homeworld" then plane = "kzinti" end


if GlobalVar.GroupLeader == GMCP_name(multimatches[2].player) and plane == "Thorngate" then
  if GroupSize() == 2 then -- don't following when duo'ing
    beep()
    printGameMessage("Beep", "Leader has planed to thorngate, NOT following")
  else
    printGameMessageVerbose("AutoPlane", "Leader planed to thorngate, following")
    send("cast plane thorn")
  end
  local tempTriggerID = tempBeginOfLineTrigger("You failed your planeshift due to lack of concentration!", function() send("cast plane thorn") end)
  tempBeginOfLineTrigger("You form a magical vortex and step into it...", function() killTrigger(tempTriggerID) end, 1) 
  
elseif GlobalVar.GroupLeader == GMCP_name(multimatches[2].player) and StatTable.Foci then
  -- Leader was in the room and has just plane shifted and we are spelled
  if plane == "Midgaardia" then
    printGameMessage("Beep!", "Leader planed to Midgaardia, NOT following")
    beep()
    return
  end
  
  -- Waits 8 seconds less 1 second for each 10k of hp, to a minimum of 1 (i.e. small sprite = 8 seconds, big warrior = 1 second)
  local wait = math.max(8-math.floor(StatTable.current_health/10000),1)

  printGameMessageVerbose("AutoPlane", "Leader planed, following in " .. wait .. " seconds")
  
  if GlobalVar.AutoCast == false and IsClass({"Sorcerer", "Wizard", "Mage", "Psionicist", "Mindbender"}) then
    beep()
    printGameMessage("Beep", "Autocast off and planing with leader")
  end
  
  
  local tempTriggerID = tempBeginOfLineTrigger("You failed your planeshift due to lack of concentration!", function() send("cast plane " .. plane) end)
  tempBeginOfLineTrigger("You form a magical vortex and step into it...", function() killTrigger(tempTriggerID) end, 1)
  
  tempTimer(wait, function() send("cast plane " .. plane) end)
  safeTempTrigger("OutOfPlaneLag", "You form a magical vortex and step into it...", [[send("emote is |W|out of plane lag|N|")]], "begin", 1)
  
end


</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>2</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(?&lt;player&gt;\w+) wavers for a moment,? and with a bright flash of green light,? is gone!$</string>
									<string>^\[LORD INFO\]: (?&lt;player&gt;\w+) has just (shifted|returned) to (The |the )?(?&lt;plane&gt;.*)!$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Group PreachUp Trigger</name>
						<script>if StatTable.Level == 125 and (StatTable.current_mana / StatTable.max_mana) &lt; 0.95 and not IsMDAY() then
  beep()
  printGameMessage("Beep", "Preachup without full regen, stayed asleep")
  return
end


OnMobDeathQueueClear()
PreachUp()


 </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>* tells the group 'preachup'</string>
							<string>* tells the group 'preach'</string>
							<string>You tell the group 'preach'</string>
							<string>You tell the group 'preachup'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Intervention</name>
						<script>
if SafeArea() then return end

if not (StatTable.Class == "Priest") and not (StatTable.Position == "Sleep") then
  send("emote |BW| intervention|N| is down!")
  return
end

--if (StatTable.Fortitude and 
--(StatTable.Level &gt; 51 or StatTable.SubLevel &gt; 250) and StatTable.current_mana &gt; 100) then
--  if (StatTable.InterventionExhaust == nil) then
--    OnMobDeathQueuePriority("cast intervention")
--  else
--    tempTimer(30 * (StatTable.InterventionExhaust + 1), function() OnMobDeathQueuePriority("cast intervention") end)
--  end
--end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You are no longer due divine intervention.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Salv Help</name>
						<script>SalvTarget = matches.target

-- Only triggers if we're in the same room
if gmcp.Room.Info.name ~= matches.room then return; end

-- Only triggers if we are a class that can cast salv
if IsClass({"Berserker", "Assassin", "Black Circle Initiate", "Shadowfist"}) then return; end

-- Only triggers if we're not in lag
if tonumber(gmcp.Char.Vitals.lag) &gt; 0 then return; end

-- Only triggers if we're awake
if not (StatTable.Position == "Stand") then return; end

-- Keep track of # of salv participants. You'll attempt to salv in a random time between 0 and 1 seconds
NumberOfSalvParticipants = 1
SalvTimer = (math.floor((math.random()) * 100) / 100)

-- Add 1 to NumberofSalvParticipants each time a player casts
-- TODO: if someone fail salvation, this trigger would still count it.
-- TODO: grab the trigger text for a successful salvation and use that text instead
safeTempTrigger("NumOfSalvTrigger", "utters the words, 'salvation'.", function() NumberOfSalvParticipants = NumberOfSalvParticipants + 1; end, "substring", 4)

safeTempTimer("SalvHelpTrigger", SalvTimer, function()
  if NumberOfSalvParticipants &lt; 5 then
    send("cast salvation " .. SalvTarget)
    printGameMessage("Salv Trigger", "Attempting to salv " .. SalvTarget)
  else
  
    -- printGameMessage for debug, remove later
    printGameMessage("Salv Trigger", "Didn't salv " .. SalvTarget .. ", already 5 participants")
    
    safeKillTrigger("NumOfSalvTrigger")
  end
  end)



</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\[LORD INFO\]: \w+ starts a Salvation rite for (?&lt;target&gt;\w+) in (?&lt;room&gt;.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Soul Cleanse Help</name>
						<script>if GMCP_name(matches.caster) == StatTable.CharName then return; end

if IsClass({"Cleric", "Paladin", "Monk", "Priest", "Druid", "Vizier"}) then
  TryAction("cast 'soul cleanse' " .. matches.target, 5)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;caster&gt;\w+) begins the chant to cleanse (?&lt;target&gt;\w+)'s soul\.\.\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Failed concen</name>
						<script>TryAction("cast concentrate", 30) -- basically will retry casting it once</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You failed your concentrate due to lack of concentration!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>air hammer rc</name>
						<script>local rc_target = matches[2]
if IsClass({"Sorcerer", "Cleric", "Vizier", "Druid"}) and not Battle.Combat and tonumber(gmcp.Char.Vitals.lag) == 0 then
  TryAction("cast 'remove curse' " .. rc_target, 5)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) utters the words, 'air hammer'\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Combat Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>OnMobDeath - Not learned spell</name>
						<script>if (MobDeath.LastCommand == "cast " .. matches[2]) then
  MobDeath.LastCommand = ""
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You have not learned HOW to cast (\w+) yet!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>OnMobDeath - Not Enough Mana</name>
						<script>if splitstring(MobDeath.LastCommand, " ")[2] == matches[2] then
  pdebug("OnMobDeath(): Not enough mana to " .. MobDeath.LastCommand .. " - won't attempt to recast")
  MobDeath.LastCommand = ""
elseif (string.match(MobDeath.LastCommand, [['([^']+)]]) == matches[2]) then
  pdebug("OnMobDeath(): Not enough mana to " .. MobDeath.LastCommand .. " - won't attempt to recast")
  MobDeath.LastCommand = "" 
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You do not have enough mana to cast (.*).</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On My Death Trigger</name>
						<script>-- TODO check the room name first

OnMobDeathQueueClear()
beep()
safeCall(ClearGurneyTriggers)

local function cloud2sanc()
  send("down")
  send("sanctum")
  send("down")
  send("west")
  AskBotsForHeals()
  send("sleep")
  
  if (StatTable.Class == "Priest") then
    if (gmcp.Room.Players["Martyr"]~=nil) then send("tell martyr full")
    elseif (gmcp.Room.Players["Arby"]~=nil) then send("tell arby full")
    elseif (gmcp.Room.Players["Yorrick"]~=nil) then send("tell yorrick split")
    elseif (gmcp.Room.Players["Idle"]~=nil) then send("tell idle split")
    end
    
    if (gmcp.Room.Players["Neodox"]~=nil) then send("tell neodox steel")
    else send("tell neodox mid" .. getCommandSeparator() .. "tell neodox steel") end  
    
  end

end

local function whereami()
  TryLook()
  
  if (gmcp.Room.Info.name == "On a Cloud" and gmcp.Room.Info.zone == "{ 1   4} Crom    The Meadow") then cloud2sanc() end


end

if (StatTable.Level &lt; 125) then
  send("wake")
  TryLook()
  tempTimer(1, function() whereami() end)

 elseif (StatTable.Level == 125) then
  send("wake")
  
  TryLook()
  
  
  send("down")
  send("east")
  send("east")
  if Grouped() then  
    safeTempTimer("AskForHealsOnDeath", 3, function() AskBotsForHeals() end)
  else
    send("cast eulo")
  end
  tempTimer(30, function() send("sleep") end)
  
  
  
 end
 
safeTempTimer("ReqBotRequest", 60 * 10, function() send("tell kano req " .. StatTable.CharName); send("tell alrin req " .. StatTable.CharName); end)
-- using gmcp.Char.Status.character_name incase character logged in with non-standard capitalization
safeTempTrigger("LootedCorpse", "You get (.*) from corpse of " .. gmcp.Char.Status.character_name .. ".", function() safeKillTimer("ReqBotRequest") end, "regex", 1)
safeEventHandler("QuitAfterReq", "OnQuit", function() safeKillTimer("ReqBotRequest") end, true)

raiseEvent("OnMyDeath")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have been KILLED!!</string>
							<string>Black imps appear and kill you!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Failed bash</name>
						<script>send("stand")
StatTable.Bash = "Up"</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You attempt to bash into (.*) and you fall down!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Stand on Bash</name>
						<script>send("stand;quicken off")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>bashed into you and you go down!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>QuickenStatus On</name>
						<script>GlobalVar.QuickenStatus = true</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You start trying to quicken your spells by</string>
							<string>You will now attempt to quicken your spells</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>QuickenStatus Off</name>
						<script>GlobalVar.QuickenStatus = false</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You stop quickening your spells.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lord Spell on Mid</name>
						<script>if StatTable.Level ~= 125 then return end

printGameMessage("Lord on Midgaard", "Spells and skills reset to hero defaults", "yellow", "white")

local ACisOff = false
if not GlobalVar.AutoCast then ACisOff = true end
GlobalVar.LordSurgeLevel = GlobalVar.SurgeLevel

Init.Char(StatTable.Class, StatTable.Race, 51, 999)


if ACisOff then AutoCastOFF() else AutoCastStatus(); AutoCastSetGUI() end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You become a mere shadow of your former self...</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lord Spells Reset</name>
						<script>if StatTable.Level ~= 125 then return end

printGameMessage("Lord Returned", "Spells and skills reset to lord defaults", "yellow", "white")

local ACisOff = false
if not GlobalVar.AutoCast then ACisOff = true end

Init.Char(StatTable.Class, StatTable.Race, StatTable.Level, StatTable.SubLevel)


if GlobalVar.LordSurgeLevel then 
  GlobalVar.SurgeLevel = GlobalVar.LordSurgeLevel;
  GlobalVar.LordSurgeLevel = nil
end

if ACisOff then AutoCastOFF() else AutoCastStatus(); AutoCastSetGUI() end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You become your true self again!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>GUI Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return GlobalVar.GUI</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Chat Capture</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Chat Capture - tell</name>
							<script>selectString(line,1)
copy()
appendBuffer("Channels")
deselect()
--deleteLine()

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#aa00ff</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You tell \w+ in your dreams '.*'$</string>
								<string>^You dream of \w+ telling you '.*'$</string>
								<string>^You tell \w+ '.*'$</string>
								<string>^\w+ tells you '.*'$</string>
								<string>\w+ is asleep, but you tell \w+</string>
								<string>^You dream of telling \w+</string>
								<string>^An Immortal tells you '.*'$</string>
								<string>^You dream of an Immortal telling you '.*'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Chat Capture - group</name>
							<script>selectString(line,1)
copy()
appendBuffer("GroupChat")
deselect()
--deleteLine()</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>4</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You tell the group '.*'$</string>
								<string>^\w+ tells the group '.*'$</string>
								<string>^\*\w+\* tells the group '.*'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Chat Capture - public</name>
							<script>selectString(line,1)
copy()
appendBuffer("Channels")
deselect()
--deleteLine()</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\w+ lordchats '.*'$</string>
								<string>^\w+ herochats '.*'$</string>
								<string>^You chat '.*'$</string>
								<string>^\[?\S+\]? n?(c|C)hats '.*'$</string>
								<string>^You lordchat '.*'$</string>
								<string>^You herochat '.*'$</string>
								<string>^\w+ quests '.*'$</string>
								<string>^You quest '.*'$</string>
								<string>[CREATION INFO]:</string>
								<string>[HERO INFO]:</string>
								<string>^An Immortal herochats '.*'$</string>
								<string>^An Immortal lordchats '.*'$</string>
								<string>^An Immortal chats '.*'$</string>
								<string>^An Immortal nChats '.*'$</string>
								<string>[GROUP INFO]:</string>
								<string>[DEATH INFO]:</string>
								<string>^\w+ teamchats '.*'$</string>
								<string>^You teamchat '.*'$</string>
								<string>^\w+ legendchats '.*'$</string>
								<string>^You legendchat '.*'$</string>
								<string>^Father Tybmas herochats '.*'$</string>
								<string>^Father Tybmas lordchats '.*'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Chat Capture - Buddy</name>
							<script>selectString(line,1)
copy()
appendBuffer("BuddyChat")
deselect()
--deleteLine()
--line = string.gsub(line, " buddychats", ":")
--cecho("BuddyChat", matches[2] .. ": " .. matches[3])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(You) buddychat '(.*)'$</string>
								<string>^(\w+) buddychats '(.*)'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Chat Capture - says</name>
							<script>cecho("Channels", "&lt;ansiYellow&gt;" .. line .. "\n")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^You say '.*'$</string>
								<string>^\w+ says '.*'$</string>
								<string>^An Immortal says '.*'$</string>
								<string>^\w+ ask.*$</string>
								<string>^\w+ exclaim.*$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AutoRescue</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>99</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return AR.Status</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Auto Rescue</name>
						<script>local AOE_attacks = {
  "blast of acid",
  "blast of flame",
  "blast of frost",
  "blast of gas",
  "blast of lightning",
  "meteor swarm",
  "acid rain",
  "shard storm",
  "cataclysm",
  "vampire touch",
  "Meteor Swarm",
  "FLASH",
  "field of death",
  "earthbind",
  "smash",
  "freeze",
  "disintegrate",
  
  
  
}


if ArrayHasValue(AOE_attacks, matches[2]) then
  AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; didn't add to rescue list, AOE attack")
  return
end



if matches[5] and matches[5] == "shade" then return end
--print("\n")
--printMessage("Debug", "Attempting to rescue: " .. string.lower(matches[4]))
AR.Rescue(string.lower(matches[4]))

--^.*(attacks|attack) (strike|strikes) (\w+)



-- old: ^.*(attacks|attack)? (strike|strikes) (\w+)'?s? ?(\w+)?

-- new: ^.*'s (.*) (strike|strikes) (\w+)'?s? ?(\w+)?</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>99</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.*'s (.*) (strike|strikes) (\w+)'?s? ?(\w+)?</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Auto Rescue - look</name>
						<script>AR.Rescue(string.lower(matches[2]))</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>is here, fighting (\w+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoRescue List ADD</name>
						<script>AR.Add(matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>6</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group 'add me'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoRescue List REMOVE</name>
						<script>AR.Remove(matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>99</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group 'remove me'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other fails to rescue</name>
						<script>--if ((StatTable.current_health / StatTable.max_health) &gt; 0.40 and matches[3] ~= "you" and StatTable.Sanctuary) then
  --send("rescue " .. matches[3])
--end

AR.Rescue(string.lower(matches[3]))

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) fails to rescue (\w+)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Poke Rescue</name>
						<script>send("rescue " .. matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) pokes you in the ribs.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>failrescue</name>
						<script>AR.Rescue(string.lower(matches[2]))
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You fail to rescue (\w+) from.*!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Auto Rescue - havent hurt</name>
						<script>AR.Rescue(string.lower(matches[3]))</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^.* (attack|attacks) haven't hurt (\w+)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoRescue - stabber</name>
						<script>if AR.RescueList[string.lower(matches[2])] and not Battle.Combat then
  send("rescue " .. matches[2])
--else
  --AR.Rescue(string.lower(matches[2]))
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+)'s pierce strikes</string>
							<string>^(\w+)'s backstab</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Groupie rescues me</name>
						<script>AR.GroupieRescuesMe(string.lower(matches[2]))

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) successfully rescues you from</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoRescue - Remove Player From Stack</name>
						<script>-- Remove player from stack when they're rescued (by groupmate or ourselves)
-- Note we require this for ourselves because sometimes there's a delay from the time the rescue command is issued and when they are actually rescued ( resulting in the player being re-added to the stack)
AR.RemovePlayerFromStack(string.lower(matches[2]))

if AR.MonitorRescue and GMCP_name(matches[2]) == GMCP_name(StatTable.Monitor) then
  AR.MonitorRescue = false
  printMessage("AutoRescue", "Monitor Rescue Off - Our monitor (" .. StatTable.Monitor .. ") was rescued")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ rescues (\w+)!</string>
							<string>^You successfully rescue (\w+) from .*!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>feared</name>
						<script>local rescue_target_feared = matches[2]
if not GlobalVar.Silent then TryAction("gtell |BW|Feared!|N| couldn't rescue " .. rescue_target_feared .. "!", 30) end
printGameMessage("Feared!", "Couldn't rescue " .. rescue_target_feared .. "!", "red", "white")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You consider rescuing (w+), but chicken out!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AutoBash</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(GlobalVar.AutoBash) then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Not My Bash</name>
						<script>StatTable.Bash = "Down"
--disableTrigger("Failed Bash")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) bashes into (.*) and (.*) goes down!</string>
							<string>^(.*) struggles to stand, but fails!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Re-bash</name>
						<script>StatTable.Bash = "Up"
send("bash")
--enableTrigger("Failed Bash")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) stands and faces (.*) enemies!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>death trig</name>
						<script>StatTable.Bash = "Up"</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>My Bash</name>
						<script>StatTable.Bash = "Down"</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You bash into (.*) and (.*) goes down!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Start Bash</name>
						<script>StatTable.Bash = "Up"
send("bash")

-- moved this to AutoBash script
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You start fighting (.*)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>smash</name>
						<script>if ( tonumber(gmcp.Char.Vitals.lag) &lt;= 4
  and StatTable.Bash == "Down"
  and GlobalVar.AutoBash == true
  and StatTable.Level &gt;= 25
  and StatTable.current_health &gt;= StatTable.max_health * 0.5) then
    send("smash")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your attack</string>
							<string>^Your attacks</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AutoEnchant</name>
					<script>-- Vagonuth's AutoEnchant v0.2</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return AutoEnchantTable.Status</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Nothing seemed to happen.</name>
						<script>coroutine.wrap(function()
  
  if (StatTable.current_mana &lt; 200) then
    send("sleep")
    
    repeat
      wait(10)
      StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    until (StatTable.current_mana == StatTable.max_mana)
    send("stand")
    print("max mana")
  end
  
  AutoEnchantDBAdd("nothing")
  AutoEnchantTry()
  
end)()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Nothing seemed to happen.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You feel the presence of Shizaga!</name>
						<script>-- DEBUG / TODO: needs fixing

coroutine.wrap(function()
 

  if (AutoEnchantTable.ItemType == "armor") then
    AutoEnchantPrint("Brill! " .. AutoEnchantTable.ItemName .. " (b" .. AutoEnchantTable.ItemAC .. ") [" .. AutoEnchantTable.Brills + 1 .."]")
  else
    AutoEnchantPrint("Brill! " .. AutoEnchantTable.ItemName .. " (b" .. AutoEnchantTable.ItemMaxDmg .. ") [" .. AutoEnchantTable.Brills + 1 .."]")
  end

  
  AutoEnchantDBAdd("Shizaga")

  
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel the presence of Shizaga!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>glows blue.</name>
						<script>-- set up multiline multiline trigger 


coroutine.wrap(function()

  if (AutoEnchantTable.ItemName ~= string.lower(matches[2])) then
    AutoEnchantDebug("AutoEnchant: Other enchanter's detected\n")
    return
  else
    AutoEnchantDebug("AutoEnchant: Our enchant")
  end   
   
   
  if (StatTable.current_mana &lt; 200) then
    send("sleep")
    
    repeat
      wait(10)
      StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    until (StatTable.current_mana == StatTable.max_mana)
    send("stand")
    print("max mana")
  end
  
  AutoEnchantDBAdd("enchant")
  if (AutoEnchantAddLevel() == true) then
    AutoEnchantTry()
  end
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) glows blue.$</string>
							<string>^(.*) shimmers with a gold aura.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>brilliant blue</name>
						<script>coroutine.wrap(function()

  
  if (AutoEnchantTable.ItemName ~= string.lower(matches[2])) then
    AutoEnchantDebug("AutoEnchant: Other enchanter's brill detected")
    return
  else
    if (AutoEnchantTable.ItemType == "armor") then
      AutoEnchantPrint("Brill! " .. AutoEnchantTable.ItemName .. " (b" .. AutoEnchantTable.ItemAC .. ") [" .. AutoEnchantTable.Brills + 1 .."]")
    else
      AutoEnchantPrint("Brill! " .. AutoEnchantTable.ItemName .. " (m" .. AutoEnchantTable.ItemMaxDmg .. ") [" .. AutoEnchantTable.Brills + 1 .."]")
    end
  end
     
  if (StatTable.current_mana &lt; 200) then
    send("sleep")
    
    repeat
      wait(10)
      StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    until (StatTable.current_mana == StatTable.max_mana)
    send("stand")
    print("max mana")
  end
  
  AutoEnchantDBAdd("brill")
  
  if (AutoEnchantAddLevel() == true) then
    AutoEnchantBrill()
  end
  
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) glows a brilliant blue!$</string>
							<string>^(.*) glows a brilliant gold!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Explode</name>
						<script>coroutine.wrap(function()
  if (AutoEnchantTable.ItemName ~= string.lower(matches[2])) then
    AutoEnchantDebug("AutoEnchant: Other enchanter's explosion detected")
    return
  end
  
    if (StatTable.current_mana &lt; 200) then
      send("sleep")
      
      repeat
        wait(10)
        StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
      until (StatTable.current_mana == StatTable.max_mana)
      send("stand")
      print("max mana")
    end
    
    if (AutoEnchantTable.Brills &gt; 0) then
      AutoEnchantPrint("Brill exploded!")
    else
      AutoEnchantPrint("Item exploded")
    end
    
    AutoEnchantDBAdd("explode")
    AutoEnchantReset()
  
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) shivers violently and explodes!$</string>
							<string>^(.*) flares blindingly... and evaporates!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>fade</name>
						<script>coroutine.wrap(function()

  if (AutoEnchantTable.ItemName ~= string.lower(matches[2])) then
    AutoEnchantDebug("AutoEnchant: Other fade\n")
    return
  else
    AutoEnchantDebug("AutoEnchant: Our fade\n")
  end
   
  if (StatTable.current_mana &lt; 200) then
    send("sleep")
    
    repeat
      wait(10)
      StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    until (StatTable.current_mana == StatTable.max_mana)
    send("stand")
    print("max mana")
  end
  
  AutoEnchantDBAdd("fade")
  
  
  if (AutoEnchantTable.Brills &gt; 0) then
    AutoEnchantTable.Brills = 0 -- item faded, reset brills to 0
    AutoEnchantPrint("Brill faded!")
  --else
    --AutoEnchantPrint("Fade")
  end
    
    
  if (AutoEnchantAddLevel() == true) then
    AutoEnchantTry()
  end
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) glows brightly, then fades...oops.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify - Object name</name>
						<script>--AutoEnchantItemName = matches.name -- move to look
AutoEnchantTable.ItemIDType = matches.type
AutoEnchantTable.ItemFlags = matches.flags

  

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Object '(?&lt;name&gt;.*)' type (?&lt;type&gt;.*), extra flags (?&lt;flags&gt;.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify - Level</name>
						<script>AutoEnchantTable.ItemBaseLevel = tonumber(matches.level)
AutoEnchantTable.ItemLevel = tonumber(matches.level)

local set_level = 0

if AutoEnchantTable.ItemLevel &gt; 120 then
  set_level = 125 
elseif AutoEnchantTable.ItemLevel &gt; 45 then
  set_level = 51
else
  set_level = AutoEnchantTable.ItemLevel
end

if set_level ~= AutoEnchantTable.BaseLevel then
  AutoEnchantTable.BaseLevel = set_level
  AutoEnchantPrint("Level set to " .. AutoEnchantTable.BaseLevel)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Weight (?&lt;weight&gt;\d+), value (?&lt;value&gt;\d+), level (?&lt;level&gt;\d+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify - Damage</name>
						<script>AutoEnchantTable.ItemMinDmg = tonumber(matches.mindmg)
AutoEnchantTable.ItemMaxDmg = tonumber(matches.maxdmg)
  
-- We collected all the info we need from identify now, we can now try casting enchant
AutoEnchantTable.ID = 1
AutoEnchantTry()

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Damage is (?&lt;mindmg&gt;\d+) to (?&lt;maxdmg&gt;\d+) \(average (?&lt;averagedmg&gt;\d+)\)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify - AC</name>
						<script>AutoEnchantTable.ItemAC = tonumber(matches.ac)

-- We collected all the info we need from identify now, we can now try casting enchant
AutoEnchantTable.ID = 1
AutoEnchantTry()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Armor class is (?&lt;ac&gt;\d+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify - Draw Str</name>
						<script>--print("")
--print("Drawstr: " .. matches.drawstr)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Draw strength is (?&lt;drawstr&gt;\d+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Identify Fail</name>
						<script>AutoEnchantTry()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You failed your identify due to lack of concentration!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Time</name>
						<script>AutoEnchantTable.Day = matches.day
AutoEnchantTable.Month = matches.month
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^It is .*, (?&lt;day&gt;.*), .* in the Month of the (?&lt;month&gt;\w+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Enchant Tingle</name>
						<script>AutoEnchantTable.Tingle = tonumber(matches.tingle)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You have practiced enchant \w+ to (?&lt;tingle&gt;\d+) percent.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Artificer blessing</name>
						<script>AutoEnchantTable.Artificer = tonumber(matches.artificer)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Spell: 'artificer blessing aura'  by  (?&lt;artificer&gt;\d+) for .*.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Out of items</name>
						<script>if (AutoEnchantTable.Item == matches[2]) then
  AutoEnchantDebug("AutoEnchant: out of items, ending AutoEnchant")
  AutoEnchantPrint("out of items, ending")
  AutoEnchantTable.Status = false
  send("sleep")
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You are not carrying (.*)!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Look for name</name>
						<script>AutoEnchantTable.ItemName = string.lower(matches.fullname)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You look at (?&lt;fullname&gt;.*) in your inventory...$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Archer Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Archer") then return true end</string>
						<string>if(StatTable.Class == "Assassin") then return true end</string>
						<string>if(StatTable.Class == "Soldier") then return true end</string>
						<string>if(StatTable.Class == "Fusilier") then return true end</string>
						<string>if(StatTable.Class == "Druid") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
						<integer>4</integer>
						<integer>4</integer>
						<integer>4</integer>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>longshot</name>
						<script>local MinLongshotHP = 1200
local MyClass = StatTable.Class or ""

-- comment out the line below if you wish to ls as fusilier
if MyClass == "Fusilier" then return end -- Fus normally using sling, not able to ls

if StatTable.current_health &lt; MinLongshotHP then
  if not GlobalVar.Silent and StatTable.max_health &gt; MinLongshotHP then send("gtell Longshot: need more than " .. MinLongshotHP .. "hp", false) end
  printGameMessage("Longshot", "Didn't fire, need more than " .. MinLongshotHP .. "hp")
  return
end

if MyClass == "Archer" or MyClass == "Druid" or MyClass == "Soldier" or MyClass == "Fusilier" then
  send("ls " .. matches[2])
elseif MyClass == "Assassin" and (StatTable.SubLevel &gt; 250 or StatTable.Level == 125) then
  send("snipe " .. matches[2])
elseif MyClass == "Assassin" and StatTable.SubLevel &gt; 95 then
  send("ls " .. matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>\* tells the group 'ls (.*)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>No exit</name>
						<script>if not GlobalVar.Silent then send("gtell I can't shoot through walls, try again.") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>There's no exit that way.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>No such target</name>
						<script>if not GlobalVar.Silent then send("gtell Target not found, try again.") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>No such target can be seen in the specified direction.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Get Ammo on Ground</name>
						<script>local ammotype = nil
if (StatTable.Class == "Fusilier") then
  ammotype = "sling stones"
elseif (StatTable.Class == "Archer" or StatTable.Class == "Druid") then
  ammotype = "arrows"
elseif (StatTable.Class == "Soldier") then
  ammotype = "bolts"
end

-- Change ammotype to your preferred type if you wish to override class defaults above
-- ammotype = "bolts"
-- ammotype = "bullets"
if (ammotype ~= nil) then
  if (ammotype == matches[3]) then
    send("get '" .. matches[3] .. "'")
  end
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^     A brace of (piercing|splinter|explosive|poison|Sableroix|green) (.*) are lying on the ground.$</string>
							<string>(piercing|splinter|explosive|poison|Sableroix|green) (.*) just now!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Set Ammo Type on Reload / EQ</name>
						<script>GlobalVar.ReloadType = matches[2] 

--You hold 182 piercing arrows in your hands.
--&lt;held&gt;              102 piercing arrows
--&lt;held&gt;              [Pristine  ] 131 piercing arrows</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You hold \d+ (.*) in your hands.$</string>
							<string>^&lt;held&gt;              \[?.*?\]? ?\d+ (.*)$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Out of Ammo - nothing to shoot</name>
						<script>if (GlobalVar.ReloadType ~= nil) then
  send("wear '" .. GlobalVar.ReloadType .. "'")
else
  if (StatTable.Class == "Fusilier") then
    send ("get quiver urn")
    send ("get piercing quiver")
    send("wear stone")
    send ("put quiver urn")
  elseif (StatTable.Class == "Soldier") then
    send("wear bolt")
  else
    send("wear arrow")
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have nothing to shoot!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Out of Ammo - Shot your last shot</name>
						<script>send("wear " .. matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You just shot your last (\w+)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Get Ammo from Cor</name>
						<script>local ammotype

if (StatTable.Class == "Fusilier") then
  ammotype = "sling stones"
elseif (StatTable.Class == "Archer" or StatTable.Class == "Druid" or StatTable.Class == "Assassin") then
  ammotype = "arrows"
elseif (StatTable.Class == "Soldier") then
  ammotype = "bolts"
else
  ammotype = "nil"
end

-- Change ammotype to your preferred type if you wish to override class defaults above
-- ammotype = "bolts"
-- ammotype = "bullets"

if ammotype ~= "nil" then
  send("get '" .. ammotype .. "' corpse")
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Autofletch</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return GlobalVar.AutoFletch</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AutoFletch</name>
							<script>local lag = tonumber(gmcp.Char.Vitals.lag)

local fletch = "fletch '" .. matches[4] ..  "' '" .. matches[3] .. "'"
if (matches[3] == "poison") then
  -- todo: customize poison item (e.g. fang below)
  fletch = fletch .. " fang"
end
GlobalVar.LastFletch = fletch
echo("\nAutoFletch Triggered\n")
echo("\nLast Fletch is: " .. GlobalVar.LastFletch .. "\n")
display(AutoFletch.ArrowsFletched)

coroutine.wrap(function()
 
  if (lag &gt; 1) then
    lag = lag - 1
  else
    lag = 1
  end
 
  wait(lag)
  
  if GlobalVar.AutoFletch then
    if (StatTable.current_mana &lt; 500 and StatTable.Level == 125) then
      send("sleep")
      
      repeat
        wait(10)
        StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
      until (StatTable.current_mana == StatTable.max_mana)
      send("stand")

    end
    send(fletch)
    send("score") 
  end
end)()





</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your efforts produced (\d+) (.*) (sling stone|arrow|bolt|dart)</string>
								<string>^You make (\d+) (.*) (sling stones|arrows|bolts|darts), loaded with (\w+).</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AutoFletch-tool</name>
							<script>send("wear fletch")
send(GlobalVar.LastFletch)
send("score") 
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You lack the proper tools.</string>
								<string>You discard your empty toolkit.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>AutoFletch-Fail</name>
							<script>lag = tonumber(gmcp.Char.Vitals.lag)

echo("\nAutoFletch Fail Detected\n")
echo("\nLast Fletch was: " .. GlobalVar.LastFletch .. "\n")

coroutine.wrap(function()
 
  if (lag &gt; 1) then
    lag = lag - 1
  else
    lag = 1
  end
 
  wait(lag)
  
  if GlobalVar.AutoFletch then
    send(LastFletch)
    send("score") 
  end
end)()
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You fail to produce anything worth shooting.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>3</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>You are not carrying a fletch.</name>
							<script>GlobalVar.AutoFletch = false</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You are not carrying a fletch.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Your efforts produced</name>
							<script>AutoFletch.ArrowsFletched = AutoFletch.ArrowsFletched or {}

if not AutoFletch.ArrowsFletched[matches[3]] then
 AutoFletch.ArrowsFletched[matches[3]] = 0
end

AutoFletch.ArrowsFletched[matches[3]] = AutoFletch.ArrowsFletched[matches[3]] + tonumber(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Your efforts produced (\d+) (.*)</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>focus fire</name>
						<script>if not GlobalVar.AutoHeal and not GlobalVar.AutoCast and not GlobalVar.AutoSkill then
  send("focus")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) initiates focused fire against</string>
							<string>You focus fire against</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Cleric Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Cleric") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Artificer Blessing</name>
						<script>if (gmcp.Char.Status.area_name == "{ ALL  } AVATAR  Sanctum" or gmcp.Char.Status.area_name == "{ LORD } Crom    Thorngate" or gmcp.Char.Status.area_name == "{ LORD } Dev     Rietta's Wonders") then
  if Grouped() then return end
  local was_asleep = false
  if (StatTable.Position == "Sleep") then send("stand"); was_asleep = true end
  send("cast artificer")
  if was_asleep then send("sleep") end
end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your artificer blessing is no more.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Comfort - Cleric</name>
						<script>if (StatTable.Level == 125) then 
  if (tonumber(matches[2])~=nil) then
    send("augment " .. matches[2])
    send("cast comfort " .. matches[3])
    send("augment off")
  else
    send("cast comfort " .. matches[3])
  end
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'comf(\d+)? (\w+)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Druid</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Druid") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>walls</name>
						<script>if StatTable.Position == "Stand" then
  send("cast wall " .. matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'wall (\w+)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Natural Fletch Kit</name>
						<script>if(matches[2] == "someone") then
  send("wake")
  send("c 'holy sight")
  send("sle")
  send("reply My holy sight was down, please request again.")
end
StatTable.forage_kits = 0
cecho("Step 1 fired.")
enableTrigger("Found Kit")
enableTrigger("Forage")
if tonumber(matches[3]) &gt; 3 then
  cecho("Step 2a fired")
  StatTable.number_kits = 3
  send("tell " .. matches[2] .. " I can do up to three kits at a time so that is what I will do.")
else
  cecho("Step 2b fired.")
  StatTable.number_kits = matches[3]
end
if matches[3] == nil or matches[3] == "1" then
  StatTable.number_kits = 1
end
StatTable.kit_requestor = matches[2]
if (gmcp.Char.Status.room_name == "AVATAR's Sanctum Infirmary") then
  cecho("Step 3a Fired.")
  send("wake")
  send("c teleport nom")
  send("forage")  
elseif (gmcp.Char.Status.room_name == "An arch of water") then
  cecho("Step 3b Fired.")
  send("wake")
  send("w")
  send("w")
  send("s")
  send("s")
  send("s")
  send("s")
  send("s")
  send("s")
  send("s")
  send("s")
  send("s")
  send("e")
  send("forage")
elseif not (gmcp.Char.Status.room_name == "AVATAR's Sanctum Infirmary") or not (gmcp.Char.Status.room_name == "An arch of water") then
  cecho("Step 4 Fired.")
  send("t " .. matches[2] .. " I'm sorry, I need to be in the Sanctum Infirmary or An Arch of Water for you to request fletching kits.")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) tells you 'fletch kit'</string>
							<string>^You dream of (\w+) telling you 'fletch kit'</string>
							<string>^(\w+) tells you 'fletch kit (\d+)'</string>
							<string>^You dream of (\w+) telling you 'fletch kit (\d+)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Forage</name>
						<script>if (tonumber(StatTable.forage_kits) &gt;= tonumber(StatTable.number_kits)) then
  if (gmcp.Char.Status.room_name == "West Side of Tree of Knowledge") then
    cecho("Step 5 Fired.")
    send("sanctum")
    send("d")
    send("w")
    send("give all.fletch " .. StatTable.kit_requestor)
    StatTable.forage_kits = 0
    disableTrigger("Found Kit")
    disableTrigger("Forage")
  elseif (gmcp.Char.Status.room_name == "A Nook in the Forest") then
    cecho("Step 6 Fired.")
    send("w")
    send("n")
    send("n")
    send("n")
    send("n")
    send("n")
    send("n")
    send("n")
    send("n")
    send("n")
    send("e")
    send("e")
    send("give all.fletch " .. StatTable.kit_requestor)
    StatTable.forage_kits = 0
    disableTrigger("Found Kit")
    disableTrigger("Forage")
  end
else
  cecho("Step 7 Fired.")
  send("forage")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You forage (.*).</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Found Kit</name>
						<script>  StatTable.forage_kits = StatTable.forage_kits + 1
  cecho("Kit Step Fired.")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You forage for a while and procure natural fletching materials.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Comfort - Druid</name>
						<script>if (StatTable.Level == 125) then 
  if (tonumber(matches[2])~=nil) then
    send("augment " .. matches[2])
    send("cast comfort " .. matches[3])
    send("augment off")
  else
    send("cast comfort " .. matches[3])
  end
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'comf(\d+)? (\w+)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wall vanishes</name>
						<script>--An imp grabs an eastern wall of thorns and vanishes.

-- test for up and down?

local dir = matches.dir:sub(1,1)
send("cast wall " .. dir)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^An imp grabs an (?&lt;dir&gt;\w+) wall of thorns and vanishes.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Rogue Likes</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return IsClass({"Rogue", "Black Circle Initiate", "Bladedancer"})</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lockboxes</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - no trap</name>
							<script>send("hold chest")
send("pick lockbox")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The a small wooden lockbox is not trapped</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - trap</name>
							<script>send("hold trap")
send("dismant " .. matches[2] .. " lockbox")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The a small wooden lockbox looks like it is armed with a (\w+) trap.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - dismant</name>
							<script>send("hold chest")
send("pick lockbox")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You successfully dismantle the </string>
								<string>Wrong trap! You set it off!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - picked</name>
							<script>send("open lockbox" .. getCommandSeparator() .. "get all lockbox" .. getCommandSeparator() .. "drop lockbox" .. getCommandSeparator() .. "inspect lockbox")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>99</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>pick the lock on a small wooden lockbox</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - break</name>
							<script>send("hold chest")
send("pick lockbox")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>breaks off in the lock</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>lock - fail</name>
							<script>send("pick lockbox")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>couldn't make the lock turn</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>remove curse</name>
							<script>-- cursed
if SafeArea() then
  local Players = gmcp.Room.Players
  for _, player in ipairs(StaticVars.DruidBots) do
    if Players[player] then
      send("tell " .. player .. " rc")
      break
    end
  end
  return
end

if IsMDAY() and Grouped() then
  send("gtell rc")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Shizaga frowns at you...</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>drop small vials</name>
							<script>-- Contributed by Mandel (!)
send("drop vial")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You get an orange-red vial of healing from a small wooden lockbox.</string>
								<string>You get a red striped vial of healing from a small wooden lockbox.</string>
								<string>You get a yellow-brown vial of healing from a small wooden lockbox.</string>
								<string>You get a reddish-brown vial of healing from a small wooden lockbox.</string>
								<string>You get a light brown vial of healing from a small wooden lockbox.</string>
								<string>You get an orange-brown vial of healing from a small wooden lockbox.</string>
								<string>You get an orange vial of healing from a small wooden lockbox.</string>
								<string>You get a yellow-orange vial of healing from a small wooden lockbox.</string>
								<string>You get a yellow vial of healing from a small wooden lockbox.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Pick</name>
						<script>-- todo make better
local PickBagName = "loot"

send("get door " .. PickBagName)
send("wear door")
send("pick " .. matches[2])

if StatTable.Level == 125 then
  if StatTable.ArmorClass &lt; -1800 then
    send("wear lode")
    send("wear dawiz")
  else
    send("wear hand")
  end
end

send("put door " .. PickBagName)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'pick (\w+)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Ripper Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Ripper") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>tear</name>
						<script>local TearExclusions = {
"chimerical griffon",
"gith lookout",
"rock wyrm mother",
"inferno dragon",
"ancient mindflayer"
}

if StatTable.TearExhaust then
  return
end

if StatTable.HandOfGod and GroupLeader() then
  return
end

if GlobalVar.GroupMates[matches.mobname] then
  return -- groupmate died
end

-- Make sure we have enough weight to loot corpse in case it wasn't looted
if (StatTable.MaxWeight - StatTable.Weight) &lt; 100 then
  return
end


if not ArrayHasSubstring(TearExclusions, string.lower(matches.mobname)) then
  if StatTable.Level == 125 and StatTable.ArmorClass &lt; -2000 then
  -- hack: if AC less than -2000, we are most likely not using our claws, can't tear
    TryAction("get all corpse" .. getCommandSeparator() .. "actear", 30)
  else
    TryAction("get all corpse" ..  getCommandSeparator() .. "tear corpse", 30)
  end
end


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;mobname&gt;.*) is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Grand Master</name>
						<script>VictoryBeep()
printGameMessage("Ripper", line, "purple", "cyan")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You are now a Grand Master of \w+!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Vizier Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Vizier") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Final Rites</name>
						<script>if(StatTable.SubLevel &gt; 100 or StatTable.Level == 125) then
  if((StatTable.current_mana &gt; 175) and ((StatTable.InjuredCount &gt; 1 or StatTable.CriticalInjured &gt; 0) or StatTable.Level == 125) and not GlobalVar.VizFinalRites) then
    TryAction("cast 'final rites'",2)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your attacks haven't hurt (.*)!</string>
							<string>^Your attack strikes (.*)</string>
							<string>^You start fighting (.*)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Final Rites On</name>
						<script>enableTrigger("Final Rites")
enableTrigger("phlebotomize")
GlobalVar.VizFinalRites = false
GlobalVar.VizSoulShackle = false
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You receive (.*) experience points.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Final Rites Off</name>
						<script>disableTrigger("Final Rites")
GlobalVar.VizFinalRites = true</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ffff00</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) has been marked with final rites.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>phlebotomize</name>
						<script>if GlobalVar.NoPhleb then return end

if (tonumber(gmcp.Char.Vitals.lag) &lt;= 3) and (StatTable.Level &lt; 125) then
  if(tonumber(gmcp.Char.Status.opponent_health) &lt; 40 and StatTable.current_mana &gt;= 42) then
    TryCast("cast phlebotomize",5)
  end
end
if (tonumber(gmcp.Char.Vitals.lag) &lt;= 3) and (StatTable.Level &gt;= 125) then
  if(tonumber(gmcp.Char.Status.opponent_health) &lt; 40 and StatTable.current_mana &gt;= 42) then
    TryCast("cast enervate",5)
  end
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) looks pretty hurt.</string>
							<string>^(.*) is in awful condition.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Sanguen</name>
						<script>if (StatTable.Level == 51 and StatTable.SubLevel &gt;= 100 and StatTable.current_mana &gt; 150) then
  if (StatTable.current_mana &gt; StatTable.max_mana and StatTable.current_mana &gt; 700 and StatTable.CriticalInjured &gt; 1) then
    TryAction("augment 3",2)
    TryAction("cast sang pool",2)
    TryAction("augment off",2)
  elseif (StatTable.current_mana &gt; (StatTable.max_mana * 0.85) and StatTable.current_mana &gt; 500 and StatTable.CriticalInjured &gt; 0) then
    TryAction("augment 2",2)
    TryAction("cast sang pool",2)
    TryAction("augment off",2)
  else
    TryAction("cast sang pool",2)
  end
elseif (StatTable.Level &gt;= 125 and StatTable.current_mana &gt; 150) then
  if (StatTable.current_mana &gt; StatTable.max_mana and StatTable.current_mana &gt; 700 and (StatTable.CriticalInjured &gt; 1 or StatTable.InjuredCount &gt; 3)) then
    TryAction("augment 4", 2)
    TryAction("cast vitae pool",2)
    TryAction("augment off",2)
  elseif (StatTable.current_mana &gt; StatTable.max_mana and StatTable.current_mana &gt; 700 and (StatTable.CriticalInjured &gt; 0 or StatTable.InjuredCount &gt; 2)) then
    TryAction("augment 3", 2)
    TryAction("cast vitae pool",2)
    TryAction("augment off",2)
  elseif (StatTable.current_mana &gt; (StatTable.max_mana * 0.85) and StatTable.current_mana &gt; 500 and (StatTable.CriticalInjured &gt; 0 or StatTable.InjuredCount &gt;2)) then
    TryAction("augment 2", 2)
    TryAction("cast vitae pool",2)
    TryAction("augment off",2)
  else
    TryAction("cast vitae pool",2)
  end
end
enableTrigger("Final Rites")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>There is a sickly red glow as a blood pool congeals!</string>
							<string>An eerie pool of blood has formed here!</string>
							<string>^(\w+) dives into the pool.</string>
							<string>There is a sickly red glow as a blood pool congeals next to</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>0</integer>
							<integer>1</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>NoSpell</name>
						<script>disableTrigger("Final Rites")
disableTrigger("phlebotomize")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>This room blocks your mind from spellcasting!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Soul Shackle trigger shield</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>if (StatTable.Level == 125 and StatTable.SubLevel &gt; 100 and Battle.Combat) then return true end</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Soul Shackle</name>
							<script>if StatTable.StanceSoulExhaust then return end
if not GlobalVar.VizFinalRites then return end

local HP_Percent = StatTable.current_health / StatTable.max_health

local function CastSoulShackle_HPCheck(healthThreshold)
    if HP_Percent &gt; healthThreshold and (StatTable.InjuredCount &gt; 1 or StatTable.CriticalInjured &gt; 0) then
        TryCast("cast 'soul shackle'" .. getCommandSeparator() .. "stance soul",2)
        GlobalVar.VizSoulShackle = true
    end
end

local function AbortSoulStance_OnLowHealth(healthThreshold)
    if HP_Percent &lt; healthThreshold then
        send("stance neutral")
        GlobalVar.VizSoulShackle = false
    end
end

if matches[1] == "has some big nasty wounds and scratches." then
    if not GlobalVar.VizSoulShackle then CastSoulShackle_HPCheck(0.8) else AbortSoulStance_OnLowHealth(0.2) end
elseif matches[1] == "looks pretty hurt." then
    if not GlobalVar.VizSoulShackle then CastSoulShackle_HPCheck(0.7) else AbortSoulStance_OnLowHealth(0.1) end
elseif matches[1] == "is in awful condition." then
    if not GlobalVar.VizSoulShackle then CastSoulShackle_HPCheck(0.6) else AbortSoulStance_OnLowHealth(0.05) end
end

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>has some big nasty wounds and scratches.</string>
								<string>looks pretty hurt.</string>
								<string>is in awful condition.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Soul Shackle On</name>
							<script>GlobalVar.VizSoulShackle = true


-- Ralthar the unerring has been soul shackled!
-- You adopt soul stance.
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ffff00</mFgColor>
							<mBgColor>#000000</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^.* has been soul shackled!$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Your spell fizzles...</name>
						<script>disableTrigger("Final Rites")
GlobalVar.VizFinalRites = true</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your spell fizzles...</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Wizard Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return StatTable.Class == "Wizard"</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ether Link</name>
						<script>if not StatTable.Fortitude then return end

--Battle.DoAfterCombat("cast 'ether link'")

TryAction("cast 'ether link'",5)

OnMobDeathQueue("cast 'ether link'")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You no are no longer linked to others through the Ether.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Ether Warp</name>
						<script>if not StatTable.Fortitude then return end

Battle.DoAfterCombat("cast 'ether warp'")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You no longer warp the Ether around you.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>walls</name>
						<script>if StatTable.Position == "Stand" then
  send("cast wall " .. matches[2])
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'wall (\w+)'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wall vanishes</name>
						<script>--An imp grabs an eastern wall of thorns and vanishes.

-- test for up and down?

local dir = matches.dir:sub(1,1)
send("cast wall " .. dir)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^An imp grabs an (?&lt;dir&gt;\w+) wall of thorns and vanishes.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Sorcerer Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Sorcerer") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Immo</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return not (StatTable.Immolation and StatTable.AstralPrison)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>This Githyanki coughs, blood bubbling up through his open mouth.</name>
							<script>ImmoMob("broken")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>2</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonic) (Black Aura) This Githyanki coughs, blood bubbling up through his open mouth.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>A dying Githzerai crawls, dragging his useless legs behind him.</name>
							<script>ImmoMob("rotting")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A dying Githzerai crawls, dragging his useless legs behind him.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Young Gith</name>
							<script>ImmoMob("young")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(White Aura) Unsure on his feet, this young Githzerai tries to stay out of the way.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>A small fiend crawls through the blood.</name>
							<script>ImmoMob("fiend")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A small fiend crawls through the blood.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>A former Lord of Midgaardia serves the Fae.</name>
							<script>ImmoMob("orc")
ImmoMob("gnome")

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A former Lord of Midgaardia serves the Fae.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Red part</name>
							<script>ImmoMob("dust")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonic) (Black Aura) Red particles swirl together in a fierce cluster.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>dark cloud</name>
							<script>ImmoMob("diminis")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonic) (Black Aura) A dark cloud of diminishing hate struggles to keep itself together.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Farastu</name>
							<script>ImmoMob("farastu")
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>(Demonic) (Black Aura) This demon is emaciated with elongated limbs.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>mound of topaz</name>
							<script>ImmoMob("topaz")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>A mound of topaz starts to move listlessly.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Back from the dead, this Githzerai stumbles to his feet.</name>
							<script>ImmoMob("gith")</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Back from the dead, this Githzerai stumbles to his feet.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Death Shroud down</name>
						<script>if (GlobalVar.GroupLeader ~= StatTable.CharName and GlobalVar.GroupLeader ~= "") then
  if StatTable.Fortitude then
    OnMobDeathQueue("cast 'death shroud'")
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The grey shroud of death fades.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Vile Philosophy</name>
						<script>if (GlobalVar.GroupLeader ~= StatTable.CharName and GlobalVar.GroupLeader ~= "") then
  if StatTable.Fortitude then
    OnMobDeathQueue("cast 'vile philosophy'")
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You purge your mind of some of your darker thoughts.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Troll Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Race == "Troll") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Revival up</name>
						<script>if not GlobalVar.Silent then send("gtell |BW|Revival|N| is |BY|UP|N|") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You start to revive yourself!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Revival down</name>
						<script>if not GlobalVar.Silent then send("gtell |BW|Revival|N| is |BY|DOWN|N|") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>The revival of your body slows down.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Revival available</name>
						<script>if not GlobalVar.Silent then send("emote |BW| REVIVAL |W|available|N|") end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel less fatigued. (revival)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Revival Check</name>
						<script>if StatTable.RacialRevivalFatigue then
  send("gtell |BW|Revival |BY|EXHAUSTED: |BW|" .. StatTable.RacialRevivalFatigue .. " |N|ticks")
else
  send("gtell |BW|Revival |BY|Avaiable")
end
  </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'revival check'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Priest Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Priest") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>inno</name>
						<script>if (StatTable.Level == 125) then
  TryAction("cast inno " .. matches[2], 5)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group 'inno</string>
							<string>^(\w+) tells you 'inno'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>preachup - prs trg</name>
						<script>if getProfileName() ~= "Artemis" and StatTable.current_mana &gt;= 3500 then
  send("wake")
  send("gtell Spells incoming")
  send("preach holy sight")
  send("preach iron skin")
  send("preach holy sight")
  send("preach water breathing")
  send("preach fortitudes")
  send("preach foci")
  send("preach aegis")
  send("preach sanctuary")
  send("sleep")
else
  send("gtell Sorry, but I need more mana before I can preach spells.")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*(\w+)\* tells the group 'ayas preachup'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Clarify Groupie</name>
						<script>TryAction("cast clarify " .. matches[2],5)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group 'clarify</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Panacea Groupie</name>
						<script>TryAction("cast clarify " .. matches[2],5)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*?(\w+)\*? tells the group 'panacea</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Salv Groupie</name>
						<script>TryAction("cast salvation " .. matches[2], 5)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'salv (\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Soitude</name>
						<script>-- TODO: write a better solitude trigger

if StatTable.Level == 125 then

  if StatTable.Position == "Sleep" then
    send("tell " .. matches[2] .. " Sorry, I'm currently sleeping and can't cast solitude. Please try again when I'm awake")
    return
  end
  
  if StatTable.SolitudeTimer then
    send("tell " .. matches[2] .. " Sorry, my solitude is currently exhausted")
  end

  send("cast solitude " .. matches[2])
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You dream of (\w+) telling you 'solitude'</string>
							<string>^(\w+) tells you 'solitude'</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Cast intervention on wake</name>
						<script>if not SafeArea() and StatTable.Foci and not StatTable.Intervention and StatTable.max_health &lt; 10000 then
  send("cast intervention")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You wake and stand up.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Soul Cleanse Start</name>
						<script>--'ritual purification wand crystal'
local CleanseTarget = matches[2]
local BagName
local EquipHeld

if StaticVars.SoulCleanse[StatTable.CharName] then 
  BagName = StaticVars.SoulCleanse[StatTable.CharName][1]
  EquipHeld = StaticVars.SoulCleanse[StatTable.CharName][2]
else
  BagName = StaticVars.SoulCleanse.Defaults[1]
  EquipHeld = StaticVars.SoulCleanse.Defaults[2]
end

-- Only triggers if we're awake
if not (StatTable.Position == "Stand") then return; end

printGameMessage("Soul Cleanse", "Leader requested soul cleanse for " .. CleanseTarget)

send("get 'ritual purification wand crystal' " .. BagName)
send("wear 'ritual purification wand crystal'")
TryAction("cast 'soul cleanse' " .. CleanseTarget, 5)
send("wear " .. EquipHeld)
send("put 'ritual purification wand crystal' " .. BagName)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'soul cleanse (\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoClarify</name>
						<script>if not IsGroupMate(matches[2]) then return; end

-- Check if we have a feared tank, if so, clarify immediately
if string.find(matches[1], "death before") then 
  for _, class in ipairs({"War", "Rip", "Bod", "Mon", "Shf", "Bzk", "Bld", "Pal"}) do
    if GlobalVar.GroupMates[GMCP_name(matches[2])].class == class then
        TryAction("quicken 5" .. getCommandSeparator() .. "preach clarify"  .. getCommandSeparator() .. "preach clarify"   .. getCommandSeparator() .. "quicken off", 5)
        return
    end
  end
end

-- Otherwise, we will wait to clarify until no groupmate is critically injured
-- This is done by checking every 10 seconds and not preaching clarify until no one is critically injured
-- Will time out after 10 tries (eg 100 seconds)
local function ClarifyAfterHealing(attempts)
  attempts = attempts or 0
  if attempts &gt; 10 then return; end
  
  if StatTable.CriticalInjured &gt; 0 then 
    -- don't clarify if groupies are injured, rather check again in 10 seconds
    safeTempTimer("AutoClarifyTimer", 10, function() ClarifyAfterHealing(attempts + 1); end)
  else
    -- no one critically injured, safe to clarify
    if TryFunction("PreachClarify", Battle.NextAct, {"preach clarify", 7}, 15) then
      printGameMessage("GameLoop", "Attempting to preach clarify")
    end
    safeKillTimer("AutoClarifyTimer")
  end
end

-- if we manually preach clarify (or some other trigger/script acts), then kill the recursive calls
function PreachedClarifyBeforeTrigger(event, args)
  if args == "preach clarify" then
    safeKillTimer("AutoClarifyTimer")
    safeKillEventHandler("PreachedClarifyBeforeTrigger")
  end
end

safeEventHandler("PreachedClarifyBeforeTrigger", "sysDataSendRequest", "PreachedClarifyBeforeTrigger", false)

ClarifyAfterHealing()


    


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) starts to panic!$</string>
							<string>^(\w+) is surrounded by a pink outline.$</string>
							<string>^The eyes of (\w+) dim and turn milky white.$</string>
							<string>^(\w+)'s body withers before your eyes!$</string>
							<string>^Bhyss has come for you, (w\+)$</string>
							<string>^A smarmy grin crosses (\w+)'s face!$</string>
							<string>^(\w+) pales as (he|she|it) (see|sees) (his|her|its) death before (him|her|it).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoPanacea</name>
						<script>if not IsGroupMate(matches[2]) then return; end

-- If we're a super hero, just cast panacea not preach
if StatTable.Level &lt; 125 then
  if StatTable.SubLevel &lt; 500 then return end
  
  Battle.DoAfterCombat("cast panacea " .. matches[2], 30)
  return
end

-- Otherwise, we will wait to Panacea until no groupmate is critically injured
-- This is done by checking every 10 seconds and not preaching Panacea until no one is critically injured
-- Will time out after 10 tries (eg 100 seconds)
local function PanaceaAfterHealing(attempts)
  attempts = attempts or 0
  if attempts &gt; 10 then return; end
  
  if StatTable.CriticalInjured &gt; 0 then 
    -- don't Panacea if groupies are injured, rather check again in 10 seconds
    safeTempTimer("AutoPanaceaTimer", 10, function() PanaceaAfterHealing(attempts + 1); end)
  else
    -- no one critically injured, safe to Panacea
    if TryFunction("PreachPanacea", Battle.NextAct, {"preach panacea", 7}, 15) then
      printGameMessage("GameLoop", "Attempting to preach panacea")
    end
    safeKillTimer("AutoPanaceaTimer")
  end
end

-- if we manually preach Panacea (or some other trigger/script acts), then kill the recursive calls
function PreachedPanaceaBeforeTrigger(event, args)
  if args == "preach panacea" then
    safeKillTimer("AutoPanaceaTimer")
    safeKillEventHandler("PreachedPanaceaBeforeTrigger")
  end
end

safeEventHandler("PreachedPanaceaBeforeTrigger", "sysDataSendRequest", "PreachedPanaceaBeforeTrigger", false)

PanaceaAfterHealing()


    


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) shivers and suffers.$</string>
							<string>^(\w+) clutches at his heart in pain!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Paladin Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Paladin") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Rescue Heal - alternative</name>
						<script>-- Provides for an alternative method of rescue healing
-- Benefit: when multiple mobs are fighting group, this trigger is able to detect if the mob we specifically are fighting (ie gmcp.Char.Status.opponent_name)
--          is only attacking one groupmate and if so, to rescue the groupmate when the mob is low
-- Con:     works less reliably when using skills with lag as it goes off of the look command

if not GlobalVar.PaladinRescue then return end

target = string.lower(gmcp.Char.Status.opponent_name)


local count = 0
local index = nil
for i, j in pairs(Battle.EnemiesAttacking) do
  if j[1] == target then 
    count = count + 1     
    index = i
  end
end


-- Only one mob of this name so we can accurately determine who its attacking
if (count == 1 and StatTable.Level &lt;= 51) then
  rescuetarget = Battle.EnemiesAttacking[index][2]
  -- Is this the only mob attacking our rescue target? Also make sure we're not the rescue target
  if (Battle.GroupiesUnderAttack[rescuetarget] == 1 and rescuetarget ~= StatTable.CharName) then
    -- Are we in a position to rescue?
    if ((StatTable.JoinedBoon or StatTable.SharedBoon) and tonumber(gmcp.Char.Vitals.lag) &lt;= 2 and (StatTable.current_health / StatTable.max_health) &gt; 0.50 and StatTable.Sanctuary and 
    (Battle.GroupiesUnderAttack[StatTable.CharName] == nil or (Battle.GroupiesUnderAttack[StatTable.CharName] ~= nil and tonumber(Battle.GroupiesUnderAttack[StatTable.CharName]) == 0))) then
      
      -- Only rescue targets with hp &lt; 100%
      rescuehp_pct = GlobalVar.GroupMates[rescuetarget].hp / GlobalVar.GroupMates[rescuetarget].maxhp
      --print("Rescue Heal Alternative")
      if (rescuehp_pct &lt; 1 and GlobalVar.GroupMates[rescuetarget].class ~= "Pal") then TryAction("r " .. rescuetarget,2) end
    
    
    end  
  end  
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>looks pretty hurt.</string>
							<string>is in awful condition.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Prayer recast</name>
						<script>if (GlobalVar.PrayerName ~= "") then
  OnMobDeathQueue("cast prayer '" .. GlobalVar.PrayerName .. "'")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(Bhyss|Durr|Gorn|Kra|Quixoltan|Roixa|Shizaga|Tor|Tul-sith|Werredan)'s presence disappears.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Fervor recast</name>
						<script>if (StatTable.Fortitude and StatTable.Level &gt; 40) then
  OnMobDeathQueue("cast fervor")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(Bhyss|Durr|Gorn|Kra|Quixoltan|Roixa|Shizaga|Tor|Tul-sith|Werredan)'s fanatical blessing fades away.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Holy Zeal recast</name>
						<script>if StatTable.Fortitude and not SafeArea() then
  OnMobDeathQueue("cast 'holy zeal'")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You feel less zealous.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoRescueHeal</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Round over</name>
							<script>local initmsg = "\nGroupies being aggied:\n"
local msg = initmsg
local mobcount = 0
local rescuetarget = ""

for k,v in pairs(GroupiesUnderAttack) do 
  msg = msg .. k .. " : " .. v .. " mob(s) attacking them\n" 
  mobcount = mobcount + v
  rescuetarget = k
end

if msg ~= initmsg then 
  echo(msg) 
  if (mobcount == 1 and matches[1] == "is in awful condition." and StatTable.Oath == "evolution") then send("rescue " .. rescuetarget) end
end


GroupiesUnderAttack = {}
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>is in excellent condition.</string>
								<string>has a few scratches.</string>
								<string>has some small wounds and bruises.</string>
								<string>has quite a few wounds.</string>
								<string>has some big nasty wounds and scratches.</string>
								<string>looks pretty hurt.</string>
								<string>is in awful condition.</string>
								<string>is DEAD!!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
								<integer>0</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Other hit</name>
							<script>local Groupies = Groupies or {}
if (#Groupies == 0) then
  for k,v in ipairs(gmcp.Char.Group.List) do
    table.insert(Groupies,v.name)
  end
end

--display(Groupies)
--print(matches.victim)
GroupiesUnderAttack = GroupiesUnderAttack or {}
if (#Groupies == 0) then
  for k,v in ipairs(gmcp.Char.Group.List) do
    table.insert(Groupies,v.name)
  end
end


if ArrayHasValue(Groupies,matches.victim) then
  --print("Under attack! " .. matches.victim)
  if GroupiesUnderAttack[matches.victim] == nil then
    GroupiesUnderAttack[matches.victim] = 1
  else
    GroupiesUnderAttack[matches.victim] = GroupiesUnderAttack[matches.victim] + 1
  end
end



--print("\n" .. matches.attacker .. " hits " .. matches.victim)

--A psychotic clown's attacks strike Wolthu 4 times, with massacring intensity!   

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(?&lt;attacker&gt;\w+)'?s? (.*) (?&lt;victim&gt;\w+) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+(!|.)</string>
								<string>^(?&lt;attacker&gt;\w+)'?s? (.*) haven't hurt (?&lt;victim&gt;\w+)!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Bladedancer</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Bladedancer") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Bladetrance</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bladetrance enter</name>
							<script>StatTable.BladetranceLevel = 1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You sink into a bladetrance.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bladetrance break</name>
							<script>StatTable.BladetranceLevel = 0</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>Thrown out of your bladetrance you are faced with a vacant reality.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bladetrance lighten</name>
							<script>StatTable.BladetranceLevel = StatTable.BladetranceLevel - 1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>The depth of your bladetrance lessens.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bladetrance deepen</name>
							<script>StatTable.BladetranceLevel = StatTable.BladetranceLevel + 1</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>You sink deeper into a bladetrance.</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>2</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Bladetrance depth</name>
							<script>StatTable.BladetranceLevel = tonumber(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Bladetrance depth: (\d+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dance Change</name>
						<script>printGameMessage("Bladedancer", line, "yellow", "white")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your tempo change grants everyone an epiphany!</string>
							<string>Your tempo change inspires bountiful steps!</string>
							<string>Your tempo change conjures an iron veil!</string>
							<string>Your tempo change blesses everyone's blades!</string>
							<string>Your tempo change quickens everyone's pulse!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Your tail whacks</name>
						<script>if StatTable.InspireTimer and not GlobalVar.Silent then
  send("emote mana proc!")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your tail whacks</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Max Veil</name>
						<script>local btmax = BladetranceMax()
local btlevel = StatTable.BladetranceLevel


if StatTable.VeilExhaust then
  send("gtell Veil is still exhausted for " .. StatTable.VeilExhaust .. " ticks",false)
else
  send("gtell Entering Max Veil! ( current: " .. StatTable.BladetranceLevel .. " / max: " .. btmax .. ")")
  
  if not StatTable.VeilTimer then TryAction("stance veil of blades", 10) end
  
  local wait = tonumber(gmcp.Char.Vitals.lag) + (btmax - btlevel) * 2 + 2
  print(wait)
  
  if btlevel == 0 then
    send("bladetrance enter")
    btlevel = btlevel + 1
  end
  
  -- Assuming btlevel and btmax are already defined
  for i = btlevel, (btmax - 1) do
      send("bladetrance deepen")
  end

  tempTimer(wait, function() if StatTable.BladetranceLevel == btmax then send("emote  |BW| Veil at max! (" .. btmax .. ")") end; end)
  
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group '(max veil|max viel|veil max|viel max)'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Inspire</name>
						<script>if StatTable.InspireExhaust then
  send("gtell Inspire is still exhausted for " .. StatTable.InspireExhaust .. " ticks",false)
else
  if StatTable.Bladetrance and IsMDAY() then TryAction("bladetrance break",5) end
  if not StatTable.InspireTimer then TryAction("stance inspiring dance", 5) end   

end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group 'inspire'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dance Check</name>
						<script>local msg = ""

if StatTable.VeilTimer then
  msg = msg .. "Veil of Blades: |BW|" .. StatTable.VeilTimer .. "|N|"
elseif StatTable.InspireTimer then
  msg = msg .. "Inspiring Dance: |BW|" .. StatTable.InspireTimer .. "|N|"
elseif StatTable.UnendTimer then
  msg = msg .. "Undending Dance: |BW|" .. StatTable.UnendTimer .. "|N|"
elseif StatTable.BladedanceTimer then
  msg = msg .. "Bladedance: |BW|" .. StatTable.BladedanceTimer .. "|N|"
elseif StatTable.DervishTimer then
  msg = msg .. "Dervish Dance: |BW|" .. StatTable.DervishTimer .. "|N|"
end

if msg ~= "" and StatTable.Bladetrance then
  msg = msg .. " (Bladetrance: |BW|" .. StatTable.BladetranceLevel .. "|N|)"
elseif msg ~= "" and StatTable.BladetranceExhaust then
  msg = msg .. " (Bladetrance Exhausted: |BR|" .. StatTable.BladetranceExhaust .. "|N|)"
end

send("gtell " .. msg, false)

local exmsg = "|R|Exhausted: |N|"
local exmsg_status = false

if StatTable.VeilExhaust then
  exmsg = exmsg .. "Veil of Blades: |BW|" .. StatTable.VeilExhaust .. "|N| "
  exmsg_status = true
end
if StatTable.InspireExhaust then
  exmsg = exmsg .. "Inspiring Dance: |BW|" .. StatTable.InspireExhaust .. "|N| "
  exmsg_status = true
end
if StatTable.UnendExhaust then
  exmsg = exmsg .. "Undending Dance: |BW|" .. StatTable.UnendExhaust .. "|N| "
  exmsg_status = true
end
if StatTable.BladedanceExhaust then
  exmsg = exmsg .. "Bladedance: |BW|" .. StatTable.BladedanceExhaust .. "|N| "
  exmsg_status = true
end
if StatTable.DervishExhaust then
  exmsg = exmsg .. "Dervish Dance: |BW|" .. StatTable.DervishExhaust .. "|N| "
  exmsg_status = true
end

if exmsg_status then send("gtell " .. exmsg, false) end

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\*\w+\* tells the group '(d|st)ance check'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Monk / Shadowfist Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Monk" or StatTable.Class == "Shadowfist") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Dagger hand</name>
						<script>if GlobalVar.AutoStance then return end -- Leave it to GameLoop

if StatTable.Level == 51 and StatTable.ArmorClass &gt; -1000 then
  if not StatTable.Fortitude then return end

  Battle.DoAfterCombat("cast 'dagger hand'")
  
end


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your hands return to normal.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Qi Descriptions</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return not GlobalVar.PerformanceMode</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>New trigger</name>
							<script>--chakra strike           1  Inner Qi  strike
--chakra invert           3  Inner Qi  invert
--crushing punch          2  Inner Qi  punch
--unicorn thrust          2  Inner Qi  thrust
--spirit blast            5  Outer Qi  blast
--spirit wave            10  Outer Qi  wave
--flow like water         5  Inner Qi  c 'flow like water'</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList />
							<regexCodePropertyList />
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Chakra Look</name>
						<script>if Battle.EnemiesChakra[firstToLower(matches.mobname)] and Battle.EnemiesChakra[firstToLower(matches.mobname)] ~= matches.chakra then
  -- two mobs with the same name in the same room and their chakra's don't match, throw them away :(
  Battle.EnemiesChakra[firstToLower(matches.mobname)] = nil
else
  Battle.EnemiesChakra[firstToLower(matches.mobname)] = matches.chakra
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;mobname&gt;.*)'s (?&lt;chakra&gt;\w+) chakra pulses with energy.$</string>
							<string>^(?&lt;mobname&gt;.*)'s (?&lt;chakra&gt;\w+) chakra pulses with brilliant energy.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Psionicist</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>if(StatTable.Class == "Psionicist") then return true end</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>void psi</name>
						<script>send("get void")
send("wield void")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Void Quarterstaff, "Hollow" falls to the ground, lifeless.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Void returns</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ffffff</mFgColor>
						<mBgColor>#0814ff</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Void Quarterstaff, "Hollow" returns to your hand.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>stuning weapon</name>
						<script>--todo
if StatTable.current_mana &gt; 5000 then
  OnMobDeathQueue("cast 'stunning weapon'")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your weapons lose the ability to stun.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>kinetic chain exhaust elapsed</name>
						<script>
if StatTable.current_mana &gt; 10000 then 
  OnMobDeathQueue("cast 'kinetic chain'")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>One of your Exhaust timers has elapsed. (kinetic chain)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gravitas self</name>
						<script>if StatTable.current_mana &gt; 1000 then 
  Battle.DoAfterCombat("cast 'gravitas'")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You lose your gravitas.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gravitas mob - bugged</name>
						<script>if IsGroupMate(matches[2]) then return; end -- just a group mate casting gravitas

GlobalVar.UnequippedLight = GlobalVar.UnequippedLight or nil

-- script is really designed for one mob casting gravitas at a time. Will only run once every 30 seconds
if not TryLock("OnMobGravitas", 30) then
  printGameMessage("Psi", "Telekinetic sink alert! " .. matches[2] .. "(second in 30 seconds!!)") 
  return
end

-- Mob has casted gravitas, alert user and swap to mind wipe
printGameMessage("Psi", "Telekinetic sink alert! " .. matches[2] .. " (swapped to mindwipe, attempting dart)", "red", "white")
AutoCastSetSpell("mindwipe")

-- check if we have any mindtricks (magic lights) in our inventory
if GlobalVar.Mindtricks &gt; 0 then

  -- track the light we unequip so we can reequip it after dart
  -- if we can't get the keywords, we'll just ask the user to reequip it
  safeTempTrigger("Gravitas.light_unequip", "You stop using (.*).", function()
    GlobalVar.UnequippedLight = safeCall(getAllegKeyword, matches[2]) -- requires vago inventory package
    
    if GlobalVar.UnequippedLight then
      printGameMessage("Psi", "Unequipped " .. matches[2] .. ", will attempt to reequip after dart", "yellow", "white")
    else
      printGameMessage("Psi", "Unequipped " .. matches[2] .. ", please reequip after dart", "yellow", "red")
    end  
  end, "regex", 1)
  
  -- check to see if mindtrick gets equipped, if so, start autocasting dart
  safeTempTrigger("Gravitas.wear_mindtrick", "You light " .. gmcp.Char.Status.character_name .. "'s glowing mindtrick and hold it.", function() 
    
    printGameMessage("Psi", "Equipped mindtrick - autocasting dart!", "yellow", "white")
    AutoCastSetSpell("dart") 
    
    -- we may need to dart multiple times (ie if a different mob than we're currently targetting is the one with gravitas)
    safeTempTrigger("Gravitas.dart_weapon", "You Dart " .. gmcp.Char.Status.character_name .. "'s glowing mindtrick at", function()
      tempTimer(0, function() if GlobalVar.AutoCaster == "dart" then send("get mindtrick"); send("wear mindtrick") end; end)
    end, "begin")
    
    -- mob has grabbed our mindtrick, it workeD! We can stop autocasting dart and reequip our light
    safeTempTrigger("Gravitas.mob_gravitas_down", gmcp.Char.Status.character_name .. "'s glowing mindtrick is captured! It floats into (.*)'s hands!", function()
      printGameMessage("Psi", "Mindtrick captured, mob gravitas is down!", "yellow", "white")
      AutoCastSetSpell("fandango")
      if GlobalVar.UnequippedLight then
        send("wear '" .. GlobalVar.UnequippedLight .. "'")
      else
        printGameMessage("Psi", "Please reequip your light!", "red", "white")
      end
      safeKillTrigger("Gravitas.dart_weapon")

    end, "regex", 1) -- end of mob_gravitas_down trigger
  end, "begin", 1) -- end of wear_mindtrick trigger
  
  send("wear mindtrick")
  
else
  -- we have no mindtricks, just cast mindwipe for the next 30 seconds
  printGameMessage("Psi", "No mindtricks found in inventory, will swap to fandango in 30 seconds", "yellow", "white")
  safeTempTimer("Gravitas.backup", 30, function() AutoCastSetSpell("fandango") end)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) surrounds \w+ with a telekinetic sink.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gravitas mob workaround</name>
						<script>if IsGroupMate(matches[2]) then return; end -- just a group mate casting gravitas

PSITrigger.GravitasMobs[matches[2]] = true

-- Mob has casted gravitas, alert user and swap to mind wipe
printGameMessage("Psi", "Telekinetic sink alert! " .. matches[2] .. " (swapped to mindwipe)", "red", "white")

if GlobalVar.AutoCaster ~= "mindwipe" then
  AutoCastSetSpell("mindwipe")
end

safeEventHandler("GravistasMobClearOnPreachup", "OnPreachUp", [[PSITrigger.GravitasMobs = {}]], true)
safeEventHandler("GravistasMobClearOnMyDeath", "OnMyDeath", [[PSITrigger.GravitasMobs = {}]], true)

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(.*) surrounds \w+ with a telekinetic sink.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>GravitasMobs Table</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return (TableSize(PSITrigger.GravitasMobs) &gt; 0)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Remove Mob from Table</name>
							<script>if PSITrigger.GravitasMobs[matches[2]] then
  PSITrigger.GravitasMobs[matches[2]] = nil
end

if TableSize(PSITrigger.GravitasMobs) == 0 then
  AutoCastSetSpell("fandango")
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(.*) is DEAD!!</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gravitas alert</name>
						<script>local weapon = multimatches[2][2]
local mob = multimatches[2][3]

beep()
printGameMessage("BEEP", weapon .. " captured by " .. mob .. "!", "red", "white")
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff5500</mFgColor>
						<mBgColor>#000000</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your weapons dance through the air!</string>
							<string>^(.*) is captured! It floats into (.*)'s hands!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Damage Counter</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Your hit</name>
						<script>DamageCounter.AddDmg(StatTable.CharName, matches.dmgdesc, false)

--if not Battle.Combat then raiseEvent("OnCombat") end






</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your attacks? strikes? (?&lt;victim&gt;.*) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^Your shot hits (?&lt;victim&gt;.*) with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
							<string>^You (\w+) (?&lt;victim&gt;.*) with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Your bash</name>
						<script>DamageCounter.AddDmg(StatTable.CharName, matches.dmgdesc, true)







</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You bash (?&lt;victim&gt;.*) with (?&lt;dmgdesc&gt;.*) \w+[!.]</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other hit</name>
						<script>-- config setup:
--[-battleother] You will see others' hits condensed to one line.
--[-battleself ] You will see your hits condensed to one line.
--[-battlenone ] You will see other players' hits.

-- Obsolete:
-- ^(?&lt;attacker&gt;\w+)'?s? (.*) (?&lt;victim&gt;\w+) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+(!|.)
-- ^(?&lt;attacker&gt;\w+)'?s? (.*) haven't hurt (?&lt;victim&gt;\w+)!
-- ^(?&lt;attacker&gt;.*)'s (.*) (?&lt;victim&gt;\w+) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+(!|.)
-- ^(?&lt;attacker&gt;.*)'s (.*) haven't hurt (?&lt;victim&gt;\w+)!

--print("\n" .. matches.attacker .. " hits " .. matches.victim)

GroupiesUnderAttack = GroupiesUnderAttack or {}

-- GMCP always reports names as capital first letter, remainder lowercase
-- where as game reports character names as they were registered (e.g. could be all caps)
-- Adjust names pulled from the regex match to match the GMCP format
local groupie_victim = GMCP_name(matches.victim)
local groupie_attacker = GMCP_name(matches.attacker)

if groupie_victim == "You" then groupie_victim = GMCP_name(StatTable.CharName) end

-- Code to track how many of our groupmates are tanking
-- Was it our group mate hit? Exclude AOE attacks (eg blast of gas, meteor swarm)
if (GlobalVar.GroupMates[groupie_victim]) 
  and (matches.spell ~= "blast of gas")
  and (matches.spell ~= "acid rain")
  and (matches.spell ~= "shard storm")
  and (matches.spell ~= "cataclysm strikes") 
  and (matches.spell ~= "meteor swarm")
  and (matches.spell ~= "Meteor Swarm") then

  -- Add 1 to how many mobs are attacking our groupmate
  if GroupiesUnderAttack[groupie_victim] == nil then
    GroupiesUnderAttack[groupie_victim] = 1
  else
    GroupiesUnderAttack[groupie_victim] = GroupiesUnderAttack[groupie_victim] + 1
  end
end

-- For the damge counter, if our group mate is the attacker, add their damage to the counter
if GlobalVar.GroupMates[groupie_attacker] and matches.dmgdesc then
  --print("DamageCounter.AddDmg("..matches.attacker..", "..matches.dmgdesc..")")
  local bash = false
  if matches.spell == "bash" then bash = true end
  DamageCounter.AddDmg(matches.attacker, matches.dmgdesc, bash)
  --print(matches.attacker, matches.dmgdesc)
end

--if not Battle.Combat and (GlobalVar.GroupMates[groupie_victim] or GlobalVar.GroupMates[groupie_attacker]) then 
--  raiseEvent("OnCombat") 
--end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;attacker&gt;.*)'s attacks? strikes? (?&lt;victim&gt;.*) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+(!|.)</string>
							<string>^(?&lt;attacker&gt;.*)'s attacks haven't hurt (?&lt;victim&gt;\w+)!</string>
							<string>^(?&lt;attacker&gt;.*)'s (?&lt;spell&gt;.*) strikes? (?&lt;victim&gt;.*) with (?&lt;dmgdesc&gt;.*) \w+(!|.)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other hit test</name>
						<script>-- config setup:
--[-battleother] You will see others' hits condensed to one line.
--[-battleself ] You will see your hits condensed to one line.
--[-battlenone ] You will see other players' hits.


print("\n" .. matches.attacker .. " hits " .. matches.victim)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;attacker&gt;.*)'s attacks? strikes? (?&lt;victim&gt;.*) (\d+) times?, with (?&lt;dmgdesc&gt;.*) \w+(!|.)</string>
							<string>^(?&lt;attacker&gt;.*)'s attacks haven't hurt (?&lt;victim&gt;\w+)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Round over</name>
						<script>local initmsg = "\nGroupies being aggied:\n"
local msg = initmsg
local mobcount = 0
local rescuetarget = ""
local rescuehp_pct = 0
local my_char_name = firstToUpper(string.lower(StatTable.CharName))

local tblmsg = {}

function CallbackSend(arg)
  send(arg)
end

for k,v in pairs(GroupiesUnderAttack) do
  table.insert(tblmsg,{v, k}) 
  msg = msg .. k .. " : " .. v .. " mob(s) attacking them\n" 
  mobcount = mobcount + v
  rescuetarget = k
end

if (GlobalVar.GUI) then
  
  
  if (#tblmsg&gt;0) then
    Victim1Label:hide()
    Victim2Label:hide()
    Victim3Label:hide()
    Victim1Label:setClickCallback("")
    Victim2Label:setClickCallback("")
    Victim3Label:setClickCallback("")
    
    
    if (#tblmsg&gt;1) then table.sort(tblmsg,rcompare) end
    
    if (#tblmsg &gt; 2) then
      Victim3Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[3][2]) .. ": " .. tblmsg[3][1] .. " mob(s) attacking&lt;/left&gt;")
      Victim3Label:show()
      if (tblmsg[3][2]~=my_char_name) then Victim3Label:setClickCallback("CallbackSend","r " .. tblmsg[3][2]) end
    end
    
    if (#tblmsg &gt; 1) then
      Victim2Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[2][2]) .. ": " .. tblmsg[2][1] .. " mob(s) attacking&lt;/left&gt;")
      Victim2Label:show()
      if (tblmsg[2][2]~=my_char_name) then Victim2Label:setClickCallback("CallbackSend","r " .. tblmsg[2][2]) end
    end
    
    Victim1Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[1][2]) .. ": " .. tblmsg[1][1] .. " mob(s) attacking&lt;/left&gt;")
    Victim1Label:show()
    if (tblmsg[1][2]~=my_char_name) then Victim1Label:setClickCallback("CallbackSend","r " .. tblmsg[1][2]) end
  end
  
 
  
  if (#tblmsg&gt;0) and StatTable.Class == "Paladin" and (StatTable.JoinedBoon or StatTable.SharedBoon) and tonumber(gmcp.Char.Vitals.lag) &lt;= 2 and (StatTable.current_health / StatTable.max_health) &gt; 0.50 then  
  --echo(msg)
    -- need to fix and StatTable.Oath == "evolution"
    rescuehp_pct = GlobalVar.GroupMates[rescuetarget].hp / GlobalVar.GroupMates[rescuetarget].maxhp
    
    if (mobcount == 1 and matches[1] == "is in awful condition." and rescuetarget ~= my_char_name and rescuehp_pct &lt; 1) then TryAction("r " .. rescuetarget,2) end
    -- for easier runs, uncomment below
    if (mobcount == 1 and matches[1] == "looks pretty hurt." and rescuetarget ~= my_char_name and rescuehp_pct &lt; 1) then TryAction("r " .. rescuetarget,2) end
    --
  end  
  
  
else
  if msg ~= initmsg then
    echo(msg) 
    -- need to fix for lord (only one of the two oaths show up in gmcp) StatTable.Oath == "evolution"
    if (StatTable.Class == "Paladin" and mobcount == 1 and matches[1] == "is in awful condition." and tonumber(gmcp.Char.Vitals.lag) &lt;= 2 and rescuetarget ~= my_char_name and (StatTable.JoinedBoon &gt; 0 or StatTable.Level == 125)) then send("r " .. rescuetarget) end
  end
end

GroupiesUnderAttack = {}


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>is in excellent condition.</string>
							<string>has a few scratches.</string>
							<string>has some small wounds and bruises.</string>
							<string>has quite a few wounds.</string>
							<string>has some big nasty wounds and scratches.</string>
							<string>looks pretty hurt.</string>
							<string>is in awful condition.</string>
							<string>is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>BattleTracker - Mob Health (all)</name>
						<script>BattleTracker.MobHealth = matches[1]
BattleTracker.RoundOver()
BattleTracker.MobHealth = ""

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>is in excellent condition.</string>
							<string>has a few scratches.</string>
							<string>has some small wounds and bruises.</string>
							<string>has quite a few wounds.</string>
							<string>has some big nasty wounds and scratches.</string>
							<string>looks pretty hurt.</string>
							<string>is in awful condition.</string>
							<string>is DEAD!!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>BattleTracker - Mob Health</name>
						<script>BattleTracker.MobHealth = matches[1]

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>looks pretty hurt.</string>
							<string>is in awful condition.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Miss</name>
						<script>if GlobalVar.GroupMates[GMCP_name(matches.attacker)] then
  DamageCounter.AddDmg(matches.attacker, "nil")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(?&lt;attacker&gt;.*) fires at (?&lt;victim&gt;.*) and misses!</string>
							<string>^(?&lt;attacker&gt;.*)'s attacks haven't hurt (?&lt;victim&gt;.*)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>BattleTracker - Rescue</name>
						<script>GroupiesUnderAttack = GroupiesUnderAttack or {}

local rescuer = GMCP_name(matches[2])
local rescuee = GMCP_name(matches[3])

if GroupiesUnderAttack[rescuer] == nil then
  GroupiesUnderAttack[rescuer] = 1
else
  GroupiesUnderAttack[rescuer] = GroupiesUnderAttack[rescuer] + 1
end

if GroupiesUnderAttack[rescuee] ~= nil then
  if GroupiesUnderAttack[rescuee] == 1 then 
    GroupiesUnderAttack[rescuee] = nil
  else
    GroupiesUnderAttack[rescuee] = GroupiesUnderAttack[rescuee] - 1
  end
end

BattleTracker.UpdateMobAttackTable("nil")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) rescues (\w+)!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>BattleTracker - Round Over</name>
						<script>-- Cpatures the prompt, missing some things like [PS] (protective stance, focus fire etc.)


BattleTracker.RoundOver()
BattleTracker.MobHealth = ""

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\$?\$?\*?\@?\#?&lt;(\d+)\/(\d+)hp (\d+)\/(\d+)ma (\d+)v (\d+)&gt; (?&lt;lag&gt;\d+) lag (\d+|-) (\d+|-)?%? surge (\d+|off) ?$</string>
							<string>^(.*)&lt;(\d+)\/(\d+)hp (\d+)\/(\d+)ma (\d+)v (\d+)&gt; (?&lt;lag&gt;\d+) lag (\d+|-) (\d+|-)?%? surge (\d+|off) ?$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>You brandish</name>
						<script>DamageCounter.AddBrandish(StatTable.CharName)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You brandish</string>
							<string>^Your .* brandishes itself all of its own!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Other brandish</name>
						<script>local CharName = GMCP_name(matches[2])

if GlobalVar.GroupMates[CharName] then
  DamageCounter.AddBrandish(CharName)
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\w+) brandishes</string>
							<string>^(\w+)'s .* brandishes itself all of its own!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Bid Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>bid regex capture</name>
						<script>--print()

moveCursor(0,getLineCount()-1)
deleteLine()
moveCursor(0,getLineCount())
deleteLine()

--print(multimatches[1].bid_id)
--print(multimatches[1].bid_current .. " / " .. string.gsub(multimatches[1].bid_current, ",", ""))
--print(tonumber(multimatches[1].bid_current))
--print(multimatches[1].bid_time)
--print(multimatches[1].bid_level)
--print(multimatches[1].bid_min)
--print(tonumber(multimatches[1].bid_min))
--if (multimatches[1].bid_highest~="") then print(multimatches[1].bid_highest) end
--print(multimatches[2].bid_itemname)

local bid_cur = string.gsub(multimatches[1].bid_current, ",", "")
local bid_min = string.gsub(multimatches[1].bid_min, ",", "")
bid_cur = tonumber(bid_cur)
bid_min = tonumber(bid_min)

local item_name = multimatches[2].bid_itemname

--print("bid_cur: " .. bid_cur .. " / bid_min: " .. bid_min)
--print(multimatches[1].bid_min .. " / " .. string.gsub(multimatches[1].bid_min, ",", "") .. "\n---\n")
--print(multimatches[1].bid_min .. " / " .. bid_min .. "\n---\n")
--print(string.gsub(multimatches[1].bid_min, ",", ""))


local time_desc = ""
local bid_time = math.floor(tonumber(multimatches[1].bid_time)*(118/125))
local time_mins = bid_time%60
if (bid_time &gt; 60) then
  if time_mins &lt; 10 then
    time_desc = math.floor(bid_time/60) .. ":0" .. time_mins
  else
    time_desc = math.floor(bid_time/60) .. ":" .. time_mins
  end
  if (bid_time &lt; 60*10) then time_desc = " " .. time_desc end
else
  if time_mins &lt; 10 then
    time_desc = "&lt;hot_pink&gt;00:0" .. time_mins
  else
    time_desc = "&lt;hot_pink&gt;00:" .. time_mins
  end
end


if (tonumber(multimatches[1].bid_level) &gt;= 100) then
  item_name = "&lt;light_slate_blue&gt;" .. multimatches[2].bid_itemname
else
  item_name = "&lt;white&gt;" .. multimatches[2].bid_itemname
end 

if (multimatches[1].bid_highest~="") then
  item_name = item_name .. "\t&lt;ansi_light_yellow&gt;*HIGHEST BIDDER*"
end

if (multimatches[1].bid_posted~="") then
  item_name = item_name .. "\t&lt;ansi_light_green&gt;*YOU POSTED THIS ITEM*"
end



print("")
cecho("&lt;yellow&gt;(" .. multimatches[1].bid_id .. ")\t&lt;ansiLightGreen&gt;" .. time_desc .. "\t" .. item_name)
print("")

if (bid_cur &gt;= bid_min) then
  cecho("\t\t&lt;ansi_light_yellow&gt;" .. multimatches[1].bid_current)
else
  cecho("\t\t&lt;ansi_yellow&gt;" .. multimatches[1].bid_min)
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^ \s?\s?\s?(?&lt;bid_id&gt;\d+) \| \s*(?&lt;bid_current&gt;[0-9,]*) \| \s?\s?\s?(?&lt;bid_time&gt;\d+) \| \s?\s?\s?\s?(?&lt;bid_level&gt;\d+) \| \s*(?&lt;bid_min&gt;[0-9,]*)\s?\|?\s?(?&lt;bid_highest&gt;\*You are the highest bidder\*)?(?&lt;bid_posted&gt;\*You are auctioning this item\*)?$</string>
							<string>^     &gt; (?&lt;bid_itemname&gt;.*)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Gag old output</name>
						<script>moveCursor(0,getLineCount()-1)
deleteLine()
moveCursor(0,getLineCount())
deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string> ### |  Current Bid  | Time | Level |  Min Bid</string>
							<string>---------------------------------------------------------------------</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AutoLotto</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoLotto</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return AutoLotto.Status</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Winner's Pick</name>
							<script>if matches[2] == AutoLotto.LottoList[AutoLotto.PlayerPick] or matches[2] == "You" then
  print(matches[2], matches[3])
  AutoLotto.ProcessWinner(matches[3])
  return
end</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^\*?(\w+)\*? tells? the group '(\d+|pass)'$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>On PInfo</name>
						<script>
if not OnPInfo.isOpen then   -- this checks for the first line, and initializes your variables
   OnPInfo.len = 1
   OnPInfo.isOpen = true
   if not OnPInfo.Lock then OnPInfo.PInfoArray = {} end
end

OnPInfo.len = OnPInfo.len + 1   -- this keeps track of how many lines the trigger is capturing

if not OnPInfo.IsPrompt(line) then
  OnPInfo.ArrayAddLine(line)
else
  OnPInfo.ArrayFinish()

   OnPInfo.len = 0
   OnPInfo.isOpen = false
end

setTriggerStayOpen("On PInfo",OnPInfo.len)   -- this sets the number of lines for the trigger to capture

</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>10</conditonLineDelta>
						<mStayOpen>10</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Your playerinfo is:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lotto Trigger - Single</name>
						<script>LottoCapture = {}

table.insert(LottoCapture, matches[2])
raiseEvent("OnLotto")

printGameMessage("Lotto!", "Winner is " .. matches[2], "yellow", "white")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The winner of the Lotto is:  (\w+)!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Lotto Trigger - Group</name>
						<script>LottoCapture = {}
BlankLineCount = 0

safeTempTrigger("LottoCaptureTriggerID", "^  (\\w+)!$", function()
  table.insert(LottoCapture, matches[2])
end, "regex")

safeTempTrigger("LottoCaptureEndID", "^$", function() 
  if BlankLineCount == 0 then BlankLineCount = BlankLineCount + 1; return; end
  safeKillTrigger("LottoCaptureTriggerID")
  
  local msg = ""
  for i = 1, #LottoCapture do
    if LottoCapture[i] == StatTable.CharName then 
      winner = "&lt;yellow&gt;" .. LottoCapture[i] .. "&lt;white&gt;"
    else
      winner = LottoCapture[i]
    end
    msg = msg .. i .. ". " .. winner .. " "
  end
  
  printGameMessage("Lotto!", msg, "yellow", "white")
  raiseEvent("OnLotto")  

end, "regex", 2)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>3</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^\w+ prepares? to lotto among \w+ group of \d+</string>
							<string>The winners of the Lotto are:</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Direction Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Follow Direction</name>
						<script>AddDir(matches.direction)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You follow (?&lt;leader&gt;\w+) (?&lt;direction&gt;\w+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Wrong direction</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^Alas, you cannot go (?&lt;dir&gt;\w+).$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>AutoViolate</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return GlobalVar.AutoViolate</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoViolate - fail</name>
						<script>


coroutine.wrap(function()

   
  if (StatTable.current_mana &lt; 200) then
    send("sleep")
    
    repeat
      wait(10)
      StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    until (StatTable.current_mana == StatTable.max_mana)
    send("stand")

  end
  
  send("cast violation " .. GlobalVar.AutoViolateItem)

  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>Your attempt to violate this item has failed.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoViolate - success</name>
						<script>
if StaticVars.LootBagName then
  send("put " .. GlobalVar.AutoViolateItem .. " " .. StaticVars.LootBagName)
else
  send("drop " .. GlobalVar.AutoViolateItem)
end
send("cast violation " .. GlobalVar.AutoViolateItem)</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>It briefly glows with an evil aura.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoViolate - Out of Items</name>
						<script>if matches[2] == GlobalVar.AutoViolateItem then
  GlobalVar.AutoViolate = false
  send("sleep")
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You are not carrying (.*)!$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>AutoViolate - Out of Mana</name>
						<script>coroutine.wrap(function()

  send("sleep")
  
  repeat
    wait(10)
    StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
  until (StatTable.current_mana == StatTable.max_mana)
  
  send("stand")
  send("cast violation " .. GlobalVar.AutoViolateItem)
  
end)()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You do not have enough mana to cast violation.</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Legend Triggers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return (StatTable.Level == 250)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Basic Wizardry</name>
						<script>GlobalVar.SurgeLevel = 5
GlobalVar.AutoCaster = "fireball"
GlobalVar.AutoCasterSingle = "fireball"
GlobalVar.AutoCasterAOE = "acid blast"
GlobalVar.QuickenStatus = false
cecho("\n")
AutoCastON()

send("amplify on" .. cs .. "surge off" .. cs .. "quicken off")
if GlobalVar.Password then
  send("worship bhyss " .. GlobalVar.Password, false)
end
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have mastered basic wizardry!</string>
							<string>You have already mastered basic wizardry!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Epic Wizardry</name>
						<script>GlobalVar.SurgeLevel = 5
GlobalVar.AutoCaster = "signature spell"
GlobalVar.AutoCasterSingle = "signature spell"
GlobalVar.AutoCasterAOE = "inferno"
GlobalVar.QuickenStatus = false
cecho("\n")
AutoCastON()


</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>You have mastered epic wizardry!</string>
							<string>You have already mastered epic wizardry!</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>3</integer>
							<integer>3</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>ReqBot</name>
						<script>if gmcp.Room.Info.name ~= "A Sphere of Silver Light" then return end

-- Determine who is sending the req and for which target.
-- Convert names to lowercase here
local sender = string.lower(matches[2])
local target = (matches[3] == "" or matches[3] == nil) and sender or string.lower(matches[3])

-- Add the new request to our queue.
addReqRequest(sender, target)
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You dream of (\w+) telling you 'req ?(\w+)?'$</string>
							<string>^(\w+) tells you 'req ?(\w+)?'$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Vagonuth-Inventory-Mgmt</name>
			<script></script>
			<command></command>
			<packageName>Vagonuth-Inventory-Mgmt</packageName>
			<time></time>
			<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
				<name>Vagonuth Inventory &amp; Alleg Management Timers</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<time>00:00:00.000</time>
				<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>Inventory Check</name>
					<script>InventoryList.UpdateItems("inv", false)</script>
					<command></command>
					<packageName></packageName>
					<time>00:15:00.000</time>
				</Timer>
			</TimerGroup>
		</TimerGroup>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Vagonuth-Package</name>
			<script></script>
			<command></command>
			<packageName>Vagonuth-Package</packageName>
			<time></time>
			<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
				<name>Vagonuth Package</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<time>00:00:00.000</time>
				<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>GroupUpdate</name>
					<script>if IsMDAY() and not GroupLeader() then
  GroupUpdateTicks = GroupUpdateTicks or 0
  if GroupUpdateTicks &gt;= 5 then
    sendGMCP("Char.Group.List")
    GroupUpdateTicks = 0
  else
    GroupUpdateTicks = GroupUpdateTicks + 1
  end
else
  sendGMCP("Char.Group.List")
end</script>
					<command></command>
					<packageName></packageName>
					<time>00:00:01.000</time>
				</Timer>
				<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>Auto SaveProfileVars</name>
					<script>SaveProfileVars()</script>
					<command></command>
					<packageName></packageName>
					<time>00:30:00.000</time>
				</Timer>
				<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>GameLoop Timer</name>
					<script>if Connected() then GameLoop() end</script>
					<command></command>
					<packageName></packageName>
					<time>00:00:05.000</time>
				</Timer>
				<Timer isActive="yes" isFolder="no" isTempTimer="no" isOffsetTimer="no">
					<name>UpdateOnlinePlayers</name>
					<script>getOnlinePlayers()</script>
					<command></command>
					<packageName></packageName>
					<time>00:05:00.000</time>
				</Timer>
			</TimerGroup>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Vagonuth-Inventory-Mgmt</name>
			<script></script>
			<command></command>
			<packageName>Vagonuth-Inventory-Mgmt</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Inventory &amp; Alleg Management</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>InventoryList Aliases</name>
					<script>local cmd = string.lower(matches[2])
local args = matches[3]


if cmd == "iupdate" then
  InventoryList.UpdateItems("inv", true)
  
elseif cmd == "isearch" then
  if args ~= "" then
    InventoryList.SearchReport(args)
  else
    print("Syntax: isearch &lt;item name&gt;\twill search inventory list for item name")
  end
elseif cmd == "isearchex" then
  if args ~= "" then
    char_name, item_name = args:match("^(%S+)%s+(.*)$")
    if not item_name then print("Error: please provide two arguments\nSyntax: isearchex &lt;charname&gt; &lt;item name&gt;\n\twill search inventory list for item name on character level"); return; end
    InventoryList.SearchReport(item_name, char_name)
  else
    print("Syntax: isearchex &lt;charname&gt; &lt;item name&gt;\twill search inventory list (excluding charname) for item name")
  end
elseif cmd == "isearchlvl" then
  if args ~= "" then
    level, item_name = args:match("^(%S+)%s+(.*)$")
    if not item_name then print("Error: please provide two arguments\nSyntax: isearchlvl &lt;level&gt; &lt;item name&gt;\n\twill search inventory list for item name held by character level"); return; end
    InventoryList.SearchReportLevel(item_name, level)
  else
    print("Syntax: isearchlvl &lt;level&gt; &lt;item name&gt;\twill search inventory list for item name held by level")
  end 
elseif cmd == "icount" then
  if args ~= "" then
    InventoryList.CountReport(args)
  else
    print("Syntax: icount &lt;item name&gt;\twill count every item name in inventory list")
  end
elseif cmd == "icountex" then
  if args ~= "" then
    char_name, item_name = args:match("^(%S+)%s+(.*)$")
    if not item_name then print("Error: please provide two arguments\nSyntax: icountex &lt;charname&gt; &lt;item name&gt;\n\tCount every &lt;item&gt; in inventory list (excl. &lt;char&gt;)"); return; end
    InventoryList.CountReport(item_name, char_name)
  else
    print("Syntax: icountex &lt;charname&gt; &lt;item name&gt;\tCount every &lt;item&gt; in inventory list (excl. &lt;char&gt;)")
  end
elseif cmd == "icountlvl" then
  if args ~= "" then
    level, item_name = args:match("^(%S+)%s+(.*)$")
    if not item_name then print("Error: please provide two arguments\nSyntax: icountlvl &lt;level&gt; &lt;item name&gt;\n\tCount every &lt;item&gt; in inventory list with character level)"); return; end
    InventoryList.CountReportLevel(item_name, level)
  else
    print("Syntax: icountlvl &lt;level&gt; &lt;item name&gt;\tCount every &lt;item&gt; in inventory list with character level)")
  end
elseif cmd == "turninvault" then
  turnInTreasureHunter()
elseif cmd == "movevault" then
  if args == "" then
    moveItemsBetweenBags()
  else
    bag1, bag2 = splitArgumentIntoTwo(args)
    if bag1 == nil or bag2 == nil then
      print("Error: Invalid input format. Use one or two words, or enclose multiple words in single quotes.")
    else
      moveItemsBetweenBags(bag1, bag2)
    end
  end
elseif cmd == "idownload" then
  VagoInv:UpdateVersion()

elseif cmd == "ihelp" then
  local ilist_cmds = {
    {"iupdate", "force inventory list to update manually"},
    {"", "note: iupdate runs every 15 mins in the background"},
    {"isearch &lt;item&gt;", "Searches inventory list for &lt;item&gt;"},
    {"icount &lt;item&gt;", "Count every &lt;item&gt; in inventory list"},
    {"isearchex &lt;char&gt; &lt;item&gt;", "Searches inventory list (excl. &lt;char&gt;) for &lt;item&gt;"},
    {"icountex &lt;char&gt; &lt;item&gt;", "Count every &lt;item&gt; in inventory list (excl. &lt;char&gt;)"},
    {"isearchlvl &lt;level&gt; &lt;item name&gt;", "Will search inventory list for item name held by level"},
    {"icountlvl &lt;level&gt; &lt;item name&gt;", "Count every &lt;item&gt; in inventory list with character level"},
    {"",""},
    {"repinv", "Reports your characters with the MOST inventory space available"},
    {"repinvr", "Reports your character with the LEAST inventory space available"},
    {"replocker", "Reports which characters have lockers (to update: look in locker)"},
    --{"idownload", "Downloads the latest version of the package"},
    {"repgold", "Reports your total gold across all characters"},
    {"repqp", "Reports your total QP across all characters"},
    {"repalleg", "Reports your alleg status across all characters"},
    {"repinsig", "Reports a summary of your alleg insigs"},
    {"repvault", "Reports how many vault treasure hunter items you have"},
    {"repthief", "Reports how many vault thief's bane items you have"},
    {"",""},
    {"turninvault", "Turns in the vault items one at a time (have them in your inventory)"},
    {"movevault &lt;lootbag&gt; &lt;newbag&gt;", "Moves one set of vault items from loot bag to new bag"},
  }
  showCmdSyntax("Inventory List Management Commands", ilist_cmds)
else
  error("Error in inventorylist alias, shouldn't be reached.")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)(isearch|icount|isearchex|icountex|isearchlvl|icountlvl|iupdate|idownload|ihelp|turninvault|movevault)\b\s*(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>AltList Reports</name>
					<script>local cmd = string.lower(matches[2])
local args = matches[3]

if cmd == "qp" then
  AltList.ReportQP()
elseif cmd == "gold" then
  AltList.ReportGold()
elseif cmd == "alleg" then
  AltList.ReportAlleg()
elseif cmd == "vault" then
  InventoryList.VaultHunter(args)
elseif cmd == "thief" then
  InventoryList.ThiefHunter()
elseif cmd == "insig" then
  AltList.ReportInsig()
elseif cmd == "inv" then
  AltList.ReportInventorySpace()
elseif cmd == "invr" then
  AltList.ReportInventorySpace(-5)
elseif cmd == "locker" then
  InventoryList.ReportLockers()
elseif cmd == "regen" then
  AltList.ReportRegen(125)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)rep(qp|gold|alleg|vault|thief|insig|inv|invr|locker|regen)\b\s*(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>I give up</name>
					<script>send("say I give up", false)

-- Try to make sure Alleg actually "hears" our "I give up" (ie he's not dealing with another player)
safeTempTrigger("AllegGiveUpTrig", "Allegaagse says 'Now go away. Maybe I will see if you can be useful some other time.'", function()
  AltList.AllegRecordGiveUp()
  print("\n")
  AltList.ReportNextAvailableAlleg()
end, "begin", 1)

safeTempTimer("AllegGiveUpKillTrig", 10, function() safeKillTrigger("AllegGiveUpTrig") end)


</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)(say I give up|igu|giveup)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>remind me</name>
					<script>AltList.GivenAllegRuby = true
send("say remind me", false)

local wait = tonumber(gmcp.Char.Vitals.lag)
local char_name = AltList.GetCharName()

wait = wait + 3


if AltList.RemindMeTimer then killTimer(AltList.RemindMeTimer); AltList.RemindMeTimer = nil end
AltList.RemindMeTimer = tempTimer(wait, function() if AltList.GivenAllegRuby and AltList.GetCharName() == char_name then AltList.GivenAllegRuby = false end; end)

registerAnonymousEventHandler("sysDisconnectionEvent", function() if AltList.RemindMeTimer then killTimer(AltList.RemindMeTimer); AltList.RemindMeTimer = nil end; end, true)

-- To Review: there was a bug in this before the event handler, ie, character does a remind me, relogs in with another character quickly and gives a ruby and the timer turns off AltList.GivenAllegRuby before the clue is given
-- The event handler is meant to fix this, ie, killing the timer on a disconnect/reconnect
-- To confirm in the future if this fixes the bug</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)say remind me$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Alleg Need</name>
					<script>local cmd = string.lower(matches[2])
local args = matches[3]


if cmd == "need" then
  AltList.AllegNeeded((args ~= "" and args or nil))
elseif cmd == "clear" then
  if args ~= "" then
    AltList.AllegRecordCleared(args)
  else
    print("Syntax: allegclear &lt;char name&gt;\tmarks the character as completed their alleg")
  end
else
  error("Error in alleg alias, shouldn't be reached.")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)alleg(need|clear)\b\s*(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>venison</name>
					<script>local cs = getCommandSeparator()
send("recall"..cs.."down"..cs.."west"..cs.."open west"..cs.."west"..cs.."north"..cs.."west"..cs.."open cabinet"..cs.."get venison cabinet"..cs.."east"..cs.."south"..cs.."open east"..cs.."east"..cs.."east"..cs.."south"..cs.."south"..cs.."south"..cs.."south"..cs.."south"..cs.."south"..cs.."south"..cs.."up"..cs.."south"..cs.."west"..cs.."give venison alleg")</script>
					<command></command>
					<packageName></packageName>
					<regex>^(venison|run-venison)$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Vagonuth-Package</name>
			<script></script>
			<command></command>
			<packageName>Vagonuth-Package</packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Package</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoCast Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>AutoCast</name>
						<script>
args = matches[3] or ""
args = string.lower(args)

if (args == "on") then
  AutoCastON()  
elseif (args == "off") then
  AutoCastOFF()
  if GlobalVar.AutoTarget then
    GlobalVar.AutoTarget = false
    printGameMessage("AutoTarget", "AutoTarget turned off with AutoCast")
  end
  
  if StatTable.Level == 125 and GlobalVar.SurgeLevel &gt; 1 then
    send("surge " .. GlobalVar.SurgeLevel)
  end  
elseif (args == "") then
  print("AutoCast - automatically casts spell during combat")
  print("Synax: autocast (on|off|spellname)")
  print("Use autocast &lt;spellname&gt; to set up what spell to cast")
  print("The spell can be changed even when autocast is off")
  print("Change the attempted surge level with the command [1-5]")
  print("--------------------------------------------------")
  AutoCastStatus()
else
  AutoCastSetSpell(args)
end

--old: ^(?i)(autocast|ac)\*(.*)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(autocast|ac)(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Set SurgeLevel</name>
						<script>GlobalVar.SurgeLevel = tonumber(matches[2])
if (StatTable.Position ~= "Sleep") then send("surge " .. GlobalVar.SurgeLevel) end
AutoCastStatus()

</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)s?(1|2|3|4|5)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoHeal</name>
						<script>local function AutoHealStatus()
  cecho("&lt;dodger_blue&gt;AutoHeal is currently " .. (GlobalVar.AutoHeal and "&lt;green&gt;ON" or "&lt;red&gt;OFF") .. "&lt;/b&gt; \n")
  cecho("&lt;dodger_blue&gt;AutoHeal target set to &lt;yellow&gt;" .. (GlobalVar.AutoHealLowest and "lowest HP %" or GlobalVar.AutoHealTarget) .. "\n")
end

args = matches[3] or ""
args = string.lower(args)

if (args == "on") then
  GlobalVar.AutoHeal = true
  AutoHealStatus()
  
elseif (args == "off") then
  GlobalVar.AutoHeal = false
  AutoHealStatus()
  
elseif (args == "") then
  print("AutoHeal - automatically heals during combat (only for divinity/comfort)")
  print("Synax: AutoHeal (on|off|&lt;target&gt;|lowest)")
  print("Use AutoHeal &lt;target&gt; to set heal target")
  print("Use AutoHeal lowest to automatically heal the groupies with the lowest hp % (default)")
  print("The target can be changed even when AutoHeal is off")
  print("--------------------------------------------------")
  AutoHealStatus()

else
  if args == "lowest" then
    GlobalVar.AutoHealLowest = true
  else
  
    if (GlobalVar.GroupMates[GMCP_name(args)] == nil) then
      cecho("&lt;red&gt;AutoHeal Error:&lt;yellow&gt; " .. GMCP_name(args) .. "&lt;white&gt; not in the group")
      return
    end
    GlobalVar.AutoHealLowest = false
    GlobalVar.AutoHealTarget = GMCP_name(args)
  end
    AutoHealStatus()
  
end

-- old: ^(?i)autoheal\s*(.*)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(autoheal|ah)(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Pantheon Alias</name>
						<script>local args = (matches[3] or ""):lower()

if args == "" then
    showCmdSyntax("Pantheon\n\tSyntax: panth &lt;spell&gt;", {
    {"panth &lt;spell&gt;", "Sets the Cleric pantheon spell to be autocast"},
    {"panth clear", "Clears the pantheon spell previously set"},
    })
    if GlobalVar.PantheonSpell then
      printMessage("Pantheon", "Spell currently set to: &lt;yellow&gt;" .. GlobalVar.PantheonSpell)
    end
elseif StatTable.Class ~= "Cleric" then
  printMessage("Pantheon", "Only clerics can cast pantheon spells", "yellow", "ansi_white")
elseif args == "clear" then
  printMessage("Pantheon", "Spell cleared")
  GlobalVar.PantheonSpell = nil
else
  GlobalVar.PantheonSpell = args
  printMessage("Pantheon", "Pantheon spell set to: &lt;yellow&gt;" .. GlobalVar.PantheonSpell)
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(panth|pantheon)(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Kinetic Enhancer Alias</name>
						<script>local args = (matches[2] or ""):lower()

if args == "" then
    showCmdSyntax("Kinetic Enhancers\n\tSyntax: kin &lt;spell&gt; &lt;spell&gt;", {
    {"kin &lt;spell&gt; &lt;spell&gt;", "Sets the Psi kinetic enhancer spells to autocast"},
    {"kin clear", "Clears the kinetic enhancer spells previously set"},
    })
    if GlobalVar.KineticEnhancerOne then
      printMessage("Kinetic Enhancer One", "Spell currently set to: &lt;yellow&gt;" .. GlobalVar.KineticEnhancerOne)
    end
        if GlobalVar.KineticEnhancerTwo then
      printMessage("Kinetic Enhancer Two", "Spell currently set to: &lt;yellow&gt;" .. GlobalVar.KineticEnhancerTwo)
    end
elseif StatTable.Class ~= "Psionicist" then
  printMessage("Kinetic Enhancer", "Only Psionicists can cast kinetic enhancers")
elseif args == "clear" then
  printMessage("Kinetic Enhancers", "Spells cleared")
  GlobalVar.KineticEnhancerOne = nil
  GlobalVar.KineticEnhancerTwo = nil
else
  local arg1, arg2 = splitArgumentIntoTwo(args)
  if arg1 == nil then
    printMessage("Kinetic Enhancer error", "Please specify one or two spells")
    return
  end
  GlobalVar.KineticEnhancerOne = arg1
  GlobalVar.KineticEnhancerTwo = arg2
  
  if GlobalVar.KineticEnhancerOne then
    printMessage("Kinetic Enhancer One", "Spell set to: &lt;yellow&gt;" .. GlobalVar.KineticEnhancerOne)
  end
  
  if GlobalVar.KineticEnhancerTwo then
    printMessage("Kinetic Enhancer Two", "Spell set to: &lt;yellow&gt;" .. GlobalVar.KineticEnhancerTwo)
  end
end

--^(?i)(kinetic|kin) ?(.*)?$
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)kin(?: (.*))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoKill/Bash/Target Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>AutoKill</name>
						<script>local args = (matches[2] or ""):lower()

if args == "on" then
    GlobalVar.AutoKill = true
elseif args == "off" then
    GlobalVar.AutoKill = false
else
  showCmdSyntax("AutoKill\n\tSyntax: autokill (on|off)", {{"autokill (on|off)", "whether to attack with killstyle (see below) on leader emote"},{"killstyle &lt;style&gt;", "what autokill style to attack with (e.g. kill, bash, backstab)"},})
  return
end

printMessage("AutoKill", "Set to " .. (GlobalVar.AutoKill and "ON" or "OFF"))
printMessage("AutoKill", "Current trigger killstyle is " .. GlobalVar.KillStyle .. " - change with killstyle &lt;style&gt;")
if (GlobalVar.GUI) then AutoKillSetGUI() end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autokill ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>KillStyle</name>
						<script>args = matches[2] or nil

if not args or args == "" then
  showCmdSyntax("KillStyle\n\tSyntax: killstyle &lt;style&gt;", {{"autokill (on|off)", "whether to attack with killstyle (see below) on leader emote"},{"killstyle &lt;style&gt;", "what autokill style to attack with (e.g. kill, bash, backstab)"},})
  return
end

args = string.lower(args)
  
GlobalVar.KillStyle = args
printMessage("KillStyle", "trigger is set to " .. args)
print("AutoKill is " .. (GlobalVar.AutoKill and "ON" or "OFF"))
if (GlobalVar.GUI) then AutoKillSetGUI() end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)killstyle ?(.*)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoSkill</name>
						<script>local args = matches[3] or ""

if not args or args == "" then
  showCmdSyntax("AutoSkill\n\tSyntax: autoskill (on|off|&lt;skill&gt;)", {{"autoskill (on|off|&lt;skill&gt;)", "whether to auto use &lt;skill&gt; during battle, turn on / off"}})
  return
end

if args == "on" then
  if not GlobalVar.SkillStyle or GlobalVar.SkillStyle == "" then
    printMessage("AutoSkill Error", "set skillstyle first - usage: skillstyle &lt;skill&gt;")
    return  
  end
  GlobalVar.AutoSkill = true
elseif args == "off" then
  GlobalVar.AutoSkill = false
else
  GlobalVar.SkillStyle = args
end

printMessage("AutoSkill", "Set to " .. (GlobalVar.AutoSkill and "ON" or "OFF"))
printMessage("AutoSkill", "Current trigger skillstyle is " .. GlobalVar.SkillStyle .. " - change with autoskill &lt;skill&gt;")
if (GlobalVar.GUI) then AutoSkillSetGUI() end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(autoskill|as)(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>SkillStyle</name>
						<script>args = matches[2] or nil

printMessage("Note", "You can now use autoskill &lt;skill&gt; or as &lt;skill&gt; for short", "yellow", "white")


if not args or args == "" then
  showCmdSyntax("SkillStyle\n\tSyntax: skillstyle &lt;style&gt;", {{"autoskill (on|off|&lt;skill&gt;)", "whether to auto use &lt;skill&gt; during battle, turn on / off"},{"skillstyle &lt;style&gt;", "what autoskill style to use in battle (eg smash)"},})
  return
end

args = string.lower(args)
  
GlobalVar.SkillStyle = args
printMessage("SkillStyle", "trigger is set to " .. args)
print("AutoSkill is " .. (GlobalVar.AutoSkill and "ON" or "OFF"))
if (GlobalVar.GUI) then AutoSkillSetGUI() end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)skillstyle ?(.*)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoBash</name>
						<script>local args = matches[2] or nil

if not args or args == "" then
  showCmdSyntax("AutoBash\n\tSyntax: autobash (on|off)", {{"autobash (on|off)", "attempts to bash enemies whenever they are standing"}})
  return
end

args = string.lower(args)

if args == "on" then
    GlobalVar.AutoBash = true
else
    GlobalVar.AutoBash = false
end

printMessage("AutoBash", "Set to " .. (GlobalVar.AutoBash and "ON" or "OFF"))
if (GlobalVar.GUI) then AutoBashSetGUI() end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autobash ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoTarget</name>
						<script>local args = (matches[2] or ""):lower()

if args == "on" then
    GlobalVar.AutoTarget = true
elseif args == "off" then
    GlobalVar.AutoTarget = false
    safeKillEventHandler("AutoSlipResetAutoTargetOnMobDeath")
else
  showCmdSyntax("AutoTarget\n\tSyntax: autotarget (on|off)", {
    {"autotarget (on|off)", "Non-casters: targets all the mobs in the room with your killstyle"},
    {"","Casters: autocasts your spell on first mob with 1 second delay"},
    {"","Casters: if killstyle not set to kill, will do killstyle instead"}
  })
  return
end

printMessage("AutoTarget", "Set to " .. (GlobalVar.AutoTarget and "ON" or "OFF"))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autotarget ?(on|off)?</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoTrack Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Autotrack</name>
						<script>local function syntax()
  print("Auotrack:  will automove or report to the group tracking results")
  print("syntax: autotrack [on|off|echo]")
  print("")
  print("autotrack on - will automove to find your target")
  print("autotrack kill - will automove to find your target then attack it")
  print("autotrack echo - will report to group your target")
  print("autotrack off - turns off the either option above")
  print("autotrack show - shows current stats")
end

if (matches[2] == "") then
  syntax()
else
  matches[2] = string.lower(matches[2])
  if (matches[2] == "on" or matches[2] == "echo" or matches[2] == "off" or matches[2] == "kill") then
    print("AutoTrack " .. matches[2])
    GlobalVar.AutoTrack = matches[2]
  
  elseif matches[2] == "show" then
    print("Auotrack " .. GlobalVar.AutoTrack)
  else
    syntax()
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autotrack\s*(\w*)</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Track</name>
						<script>GlobalVar.AutoTrackTarget = matches[2]
send("track " .. matches[2], false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)track (\w+)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoEnchant Aliases</name>
					<script>-- Vagonuth's AutoEnchant v0.2</script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>AutoBrill target</name>
						<script>local autobrilltarget = tonumber(matches[2])

if (autobrilltarget == nil) then
  print("autobrill - sets target brills to achieve during AutoEnchant")
  print("Synax: autobrill &lt;#&gt;")
elseif (autobrilltarget &gt; 0) then
  AutoEnchantTable.BrillTarget = tonumber(matches[2])
  print("AutoEnchant: Brill Target set to " .. matches[2] .. "\n")
else
  print("autobrill - sets target brills to achieve during AutoEnchant")
  print("Synax: autobrill &lt;#&gt;")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^autobrill\s*(\d*)</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoEnchant</name>
						<script>if (matches[3] == "stop") then
  AutoEnchantTable.Status = false
else

  if (StatTable.current_mana &lt; 200) then
    print("AutoEnchant: please have 200 mana before starting")
  else
    print("AutoEnchant " .. matches[2] .. " init: " .. matches[3])
    AutoEnchantInit(matches[3], matches[2])
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^auto(weapon|armor|bow) (\w+)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoFletch Alias</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>AutoFletch</name>
						<script>if matches[2] == "off" or matches[2] == "stop" then
  echo("AutoFletch: turned off\n")
  GlobalVar.AutoFletch = false
else
  GlobalVar.AutoFletch = true
  send("fletch " .. matches[2])
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^autofletch (.*)</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>AutoRescue Alias</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>AutoRescue</name>
						<script>cmd = (matches[2] and string.lower(matches[2]) or "")
args = matches[3] or ""

if cmd == "on" then
  AR.On()
elseif cmd == "off" then
  AR.Off()
elseif cmd == "add" then
  if args == nil or args == "" then
    printMessage("AutoRescue", "error, need to specify who to add\n")
  else
    AR.Add(args)
  end
elseif cmd == "all" then
  AR.All()
elseif cmd == "auto" then  
  AR.Auto()
elseif cmd == "echo" then
  AR.Echo = not AR.Echo
  printMessage("AutoRescue", "Echo is turned " .. (AR.Echo and "ON - there will be no gtells" or "OFF - info will be sent via gtell"))
elseif cmd == "mon" then
  if StatTable.Monitor == "" then
    printMessage("AutoRescue Error", "Monitor not set, please monitor someone first")
    return
  end
  if matches[3] == "" then
    if not AR.MonitorRescue then
      printMessage("AutoRescue", "Monitor Rescue On! Will rescue " .. StatTable.Monitor .. " at " .. (AR.MontorRescueHPpct * 100) .. "%")
      AR.MonitorRescue = true
    else
      printMessage("AutoRescue", "Monitor Rescue Off!")
      AR.MonitorRescue = false
    end
  elseif tonumber(args) and tonumber(args) &gt; 0 and tonumber(args) &lt; 100 then
    AR.MontorRescueHPpct = (tonumber(args) / 100)
    printMessage("AutoRescue", "Monitor Rescue HP % target set to " .. AR.MontorRescueHPpct .. "%")
  end
    
elseif cmd == "small" then
  if matches[3] == "" then
    AR.Small(2000)
  else
    AR.Small(tonumber(args))
  end
elseif cmd == "remove" then
  if args == nil or args == "" then
    printMessage("AutoRescue", "error, need to specify who to remove\n")
  elseif AR.RescueList[string.lower(args)] then
    AR.Remove(args)
  else
    printMessage("AutoRescue", args .. " not on rescue list\n")
  end
elseif cmd == "show" then
	AR.Show()
elseif cmd == "clear" then
	AR.Clear()
else
  showCmdSyntax("AutoRescue\n\tSyntax: ar &lt;cmd&gt; &lt;optional arg&gt;", {
    {"ar (on|off)", "turns on or off autorescue"},
    {"ar add &lt;name&gt;", "adds player &lt;name&gt; to the rescue list"},
    {"ar remove &lt;name&gt;", "removes player &lt;name&gt; from the rescue list"},
    {"ar all", "adds all players to the autorescue list"},
    {"ar small &lt;hp&gt;", "adds all players with max hit points less than &lt;hp&gt; to rescue list"},
    {"ar auto", "adds all except tanks/blds/pals - useful for lord runs"},
    {"ar mon", "turns on/off one time rescue of your monitor (for gear rooms)"},
    {"ar mon &lt;hp_pct&gt;", "sets the HP pct to rescue the monitor target (currently " .. (AR.MontorRescueHPpct * 100) .. "%)"},
    {"ar echo", "turns on/off echo mode (echo mode will not gtell)"},
    {"ar show", "gtells / echos the autorescue list"},
    {"ar clear", "clears the autorescue list"}
    })
end
AR.print_status()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)ar(?: (on|off|add|all|auto|echo|mon|small|remove|show|clear)? ?(.*?))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Misc Aliases</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Players Missing</name>
						<script>if TryLook() then
  if not GlobalVar.Silent then
    tempTimer(1, function() CheckMissingGtell() end)
  else
    tempTimer(1, function() CheckMissingEcho() end)
  end
else
  print("Players Missing ERROR: try again out of lag")
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)missing$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>disable torch</name>
						<script>-- Command to realias cast tor to cast torment rather than cast torch
-- To solve my problem of constantly throwing my torch at mobs as a Sorcerer :)
-- e.g., "cast tor elf" will cast torment, not torch on the elf

local target
if matches[3] == "tor" then target = "" else target = string.sub(matches[3], 4) end
send("cast torment" .. target,false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(c|cast) (tor|tor (.*))$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>quit X</name>
						<script>-- Command to exit mudlet in X minutes
-- Handy for when you want to idle for a bit before logging off
-- Profile is saved before exiting

local timetowait = tonumber(matches[2])*60

print("Mudlet will exit in " .. matches[2] .. " minutes. Saving profile...")
RunStats.EchoSession()
saveProfile()
SaveProfileVars()
safeTempTimer("QuitXID", timetowait, function() saveProfile(); raiseEvent("OnQuit"); send("quit") end)
safeTempTimer("CloseMudletID", timetowait+5, function() closeMudlet() end)

</script>
						<command></command>
						<packageName></packageName>
						<regex>^quit (\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>quit</name>
						<script>--if GlobalVar.WelcomeTimer then
--  killTimer(GlobalVar.WelcomeTimer)
--  GlobalVar.WelcomeTimer = nil
--end

--AltList.LoginName = nil
--InventoryList.LoginName = nil


raiseEvent("OnQuit")
send("quit",false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^quit$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>speedwalk alias</name>
						<script>-- Syntax: speedwalk 3s,e,s,d,e,d,e
speedwalk(matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^(sw|spwa|speedwalk) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Setup Config</name>
						<script>local NewCharSetup = {
"alias ul unlock %1:open %1",
"alias wowo open wooden:get all wooden:drop wooden:sac wooden:inspect lockbox",
"alias gg get all cor:get all " .. StatTable.CharName  .. ":wear all:look",
"pagelength 50",
"config -battleother",
"config -battleself",
"config -battlenone",
"config +demonbank",
"config +blind",
"config +label",
"config +condition",
"config +autogroup",
"info +all",
"chan +all",
}

local LordSetup = {
"",
}

local count = 0

coroutine.wrap(function()
  
  local count = 0
  for i,v in ipairs(NewCharSetup) do
    count = count + 1
    if count % 48 == 0 then wait(1) end 
    send(v,false) 
  end

  if (StatTable.Level == 125) then 
    for i,v in ipairs(LordSetup) do
      count = count + 1
      if count % 48 == 0 then wait(1) end  
      send(v,false) 
    end 
  end
  
end)()

</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)setup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Reset Profile</name>
						<script>resetProfile()</script>
						<command></command>
						<packageName></packageName>
						<regex>^reset$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>LoadLayout</name>
						<script>LoadLayout()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)LoadLayout$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>preachup alias</name>
						<script>if StatTable.Class ~= "Priest" then
  printMessage("PreachUp", "Not a priest!")
end

if StatTable.current_mana &gt;= 3500 then
  local was_asleep = false
  if StatTable.Position == "Sleep" then send("wake"); was_asleep = true; end
  send("gtell Spells incoming, sanctuary is last")
  send("preach iron skin")
  send("preach holy sight")
  send("preach water breathing")
  send("preach fortitudes")
  send("preach foci")
  send("preach aegis")
  send("preach sanctuary")
  if was_asleep then send("sleep") end
else
  printMessage("PreachUp", "Need more mana before preaching a full spell up")
  printMessage("PreachUp", "Note: if you have the mana, try reseting your gmcp (by relogging)")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^preachup$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Insure Add Wear (iaw)</name>
						<script>if (gmcp.Room.Info.name == "The Center of Thorngate Square" or gmcp.Room.Info.name == "Aelmon's Sanctuary") then
  send("insure add " .. matches[2])
  send("wear " .. matches[2])
else
  print("Error: can't insure in this room")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)iaw (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>silent mode</name>
						<script>if matches[2] == nil or matches[2] == "" then
  print("silent (on|off) -- turns on or off silent mode (minimal gtell / emotes)")
elseif string.lower(matches[2]) == "on" then
  print("silent mode on")
  GlobalVar.Silent = true
  SaveProfileVars()
elseif string.lower(matches[2]) == "off" then
  print("silent mode off")
  GlobalVar.Silent = false
  SaveProfileVars()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)silent ?(on|off)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>password set</name>
						<script>if matches[2] == nil or matches[2] == "" then
  print("[wd &lt;password&gt; -- sets password to autologin with (use password 'clear' to remove)")
elseif matches[2] == "clear" then
  GlobalVar.Password = nil
  SaveProfileVars()
else
  GlobalVar.Password = matches[2]
  SaveProfileVars()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^pwd ?(\w+)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>brandish</name>
						<script>GlobalVar = GlobalVar or {}

-- old pattern
-- ^bra ?(\w*)? ?(\w*)?
-- if (matches[1] == "brandish") then send("brandish",false) return end

-- Defaults
GlobalVar.BrandishStaff = GlobalVar.BrandishStaff or "staff"
GlobalVar.BrandishArmor = GlobalVar.BrandishArmor or "seal"
GlobalVar.BrandishCharges = GlobalVar.BrandishCharges or 0


local cmd_name = "Brandish Management System\n\tSyntax: bra (command) (arg)"

local syntax_tbl = {
  {"bra","will equip/unequip staff and brandish, won't brandish past 1 charge"},
  {nil,"Note: use 'brandish' to overide"},
  {nil,nil},
  {"bra staff &lt;staffname&gt;","sets staff you'll brandish"},
  {"bra armor &lt;armorname&gt;","sets held armor slot that you'll wear after brandishing"},
  {"bra charges &lt;#&gt;","set the number of brandish charges"},
  {"bra show", "shows number of charges left"},
}


if (matches[2] == "" or matches[2] == nil) then -- 0 args provided
  if (GlobalVar.BrandishStaff == "") then
    print("Brandish Error: please set staff")
    print("Note: can be overridden by typing brandish")
    print("")
    showCmdSyntax(cmd_name, syntax_tbl)
  elseif (GlobalVar.BrandishArmor == "") then
    print("Brandish Error: please set armor")
    print("Note: can be overridden by typing brandish")
    print("")
    showCmdSyntax(cmd_name, syntax_tbl)
  else
    if (GlobalVar.BrandishCharges &lt;= 1) then
      send("Brandish Error: only 1 charge left, switch staffes")
      print("Note: can be overridden by typing brandish")
      print("")
      showCmdSyntax(cmd_name, syntax_tbl)
    else
      GlobalVar.BrandishCharges = GlobalVar.BrandishCharges - 1
      print("Brandish! Charges left: " .. GlobalVar.BrandishCharges)
      
      
      local brandish_action = "wear " .. GlobalVar.BrandishStaff .. getCommandSeparator() .. "brandish " .. GlobalVar.BrandishStaff .. getCommandSeparator() .. "wear " .. GlobalVar.BrandishArmor
      
      --if (type(Battle.Interupt) == "function") then Battle.Interupt(brandish_action, 10) else send(brandish_action) end
      if (type(Battle.NextAct) == "function") then Battle.NextAct(brandish_action, 10) else send(brandish_action) end

      
    end
  end  
elseif (matches[3] == "" or matches[3] == nil) then -- 1 arg provided
  if (matches[2] == "show") then
    print("Charges left: " .. GlobalVar.BrandishCharges)
  else
    showCmdSyntax(cmd_name, syntax_tbl)
  end 
else -- 2+ args provided
  if (matches[2] == "staff") then
    GlobalVar.BrandishStaff = matches[3]
    print("Brandish: staff set to " .. matches[3])
  elseif (matches[2] == "armor") then
    GlobalVar.BrandishArmor = matches[3]
    print("Brandish: armor set to " .. matches[3])
  elseif (matches[2] == "charges") then
    GlobalVar.BrandishCharges = tonumber(matches[3])
    print("Brandish: charges set to " .. matches[3])
  else
    showCmdSyntax(cmd_name, syntax_tbl)
  end  
  
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)bra(?: (\w+)? ?(\w+)?)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>prayer</name>
						<script>if (matches[2] == "") then
  print("Syntax: prayer &lt;name&gt; - autocasts prayer (for paladins)")
else
  print("Prayer set to " .. matches[2])
  GlobalVar.PrayerName = matches[2]
  if (StatTable.Prayer == nil) then send("cast prayer '" .. GlobalVar.PrayerName .. "'") end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^prayer\s*(.*)</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoStance</name>
						<script>local args = matches[2] or nil

if not args or args == "" then
  showCmdSyntax("AutoStance\n\tSyntax: autostance (on|off)", {{"autostance (on|off)", "whether to auto switch stances (eg bld, war, etc)"}})
  print("")
  printMessage("AutoStance", "Set to " .. (GlobalVar.AutoStance and "ON" or "OFF"))
  return
end

args = string.lower(args)

if args == "on" then
  GlobalVar.AutoStance = true
else
  GlobalVar.AutoStance = false
end

SaveProfileVars()

printMessage("AutoStance", "Set to " .. (GlobalVar.AutoStance and "ON" or "OFF"))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autostance ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoPlane</name>
						<script>local args = matches[2] or nil

if not args or args == "" then
  showCmdSyntax("AutoPlane\n\tSyntax: autostance (on|off)", {{"autoplane (on|off)", "whether to auto plane when the leader does"}})
  print("")
  printMessage("AutoPlane", "Set to " .. (GlobalVar.AutoPlane and "ON" or "OFF"))
  return
end

args = string.lower(args)

if args == "on" then
  GlobalVar.AutoPlane = true
else
  GlobalVar.AutoPlane = false
end

SaveProfileVars()

printMessage("AutoPlane", "Set to " .. (GlobalVar.AutoPlane and "ON" or "OFF"))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autoplane ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>spellcostcheck</name>
						<script>print("Spell Cost Reductions for your character")
print("----------------------------------------")

print("Arcane  (foci): (" .. 100-GetSpellCostMod("arcane")*100 .. "%)" .. "\tbase: 400 / you: " .. 400*GetSpellCostMod("arcane") )
print("Divine  (awen): (" .. 100-GetSpellCostMod("divine")*100 .. "%)" .. "\tbase: 500 / you: " .. 500*GetSpellCostMod("divine") )
print("Psionic (fort): (" .. 100-GetSpellCostMod("psionic")*100 .. "%)" .. "\tbase: 400 / you: " .. 400*GetSpellCostMod("psionic") )
send("spell foci" .. cs .. "spell awen" .. cs .. "spell fort",false)
</script>
						<command></command>
						<packageName></packageName>
						<regex>^spellcostcheck$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>spellcostcomp</name>
						<script>local race = matches[2]

local effectivemana = StatTable.max_mana

effectivemana = (effectivemana / GetSpellCostModRacial(StatTable.Race, "arcane"))
effectivemana = (effectivemana * GetSpellCostModRacial(race, "arcane"))
effectivemana = math.floor(effectivemana)


print("Your equivalent effective arcane mana for a " .. race .. " is " .. format_int(effectivemana))

local effectivemana = StatTable.max_mana
effectivemana = (effectivemana / GetSpellCostModRacial(StatTable.Race, "divine"))
effectivemana = (effectivemana * GetSpellCostModRacial(race, "divine"))
effectivemana = math.floor(effectivemana)

print("Your equivalent effective divine mana for a " .. race .. " is " .. format_int(effectivemana))

local effectivemana = StatTable.max_mana
effectivemana = (effectivemana / GetSpellCostModRacial(StatTable.Race, "psionic"))
effectivemana = (effectivemana * GetSpellCostModRacial(race, "psionic"))
effectivemana = math.floor(effectivemana)

print("Your equivalent effective psionic mana for a " .. race .. " is " .. format_int(effectivemana))


</script>
						<command></command>
						<packageName></packageName>
						<regex>^spellcostcomp (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>spellcosttranslate</name>
						<script>local race = matches[3]
local manacomp = tonumber(matches[2])

manacomp = (manacomp / GetSpellCostModRacial(race, "arcane"))
manacomp = (manacomp * GetSpellCostModRacial(StatTable.Race, "arcane"))
manacomp = math.floor(manacomp)

print("A " .. race .. " with " .. format_int(tonumber(matches[2])) .. " mana is equivalent to you having " .. format_int(manacomp) .. " mana")


</script>
						<command></command>
						<packageName></packageName>
						<regex>^spellcosttrans (\d+) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>RegenStats</name>
						<script>coroutine.wrap(function()

  printGameMessage("Regen", "Tracking regen rates [current health/mana: " .. StatTable.current_health .. " / " ..StatTable.current_mana .. "]")
  local lastmana = tonumber(gmcp.Char.Vitals.mp)
  local lasthealth = tonumber(gmcp.Char.Vitals.hp)
  
  if (StatTable.Foci == nil) then
    send("stand")
    send("cast foci")
    wait(15)
  end
  send("sleep")
  
  local lasttick = tonumber(StatTable.Foci)
  local tickcount = 1

  repeat
    wait(2)
    send("score")
    send("group")
    GMCP_Vitals()
    
    
    StatTable.current_mana = tonumber(gmcp.Char.Vitals.mp)
    StatTable.current_health = tonumber(gmcp.Char.Vitals.hp)
    
    if (StatTable.current_mana &gt; lastmana) then
      
      if (tonumber(StatTable.Foci) &lt; lasttick) then
        printGameMessage("Regen", "Tick " .. tickcount .. "! Current Health/Mana: " .. StatTable.current_health .. " / " .. StatTable.current_mana .. " : Last Health/Mana: " .. lasthealth .. " / " .. lastmana .. " diff: " .. (StatTable.current_health - lasthealth) .. " / " .. (StatTable.current_mana - lastmana))
        lasttick = tonumber(StatTable.Foci)
        tickcount = tickcount + 1
      else
        printGameMessage("Regen", "Mid Tick! Current Health/Mana: " .. StatTable.current_health .. " / " .. StatTable.current_mana .. " : Last Health/Mana: " .. lasthealth .. " / " .. lastmana .. " diff: " .. (StatTable.current_health - lasthealth) .. " / " .. (StatTable.current_mana - lastmana))
      end
      
      lastmana = StatTable.current_mana
      lasthealth = StatTable.current_health
    end
    
    
  until (StatTable.current_mana == StatTable.max_mana and StatTable.current_health == StatTable.max_health)

  printGameMessage("Regen", "Full mana! Done tracking\n")


end)()</script>
						<command></command>
						<packageName></packageName>
						<regex>^regenstats$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>g-adv</name>
						<script>if StatTable.Level == 125 then send("lord " .. matches[2]) end 
if StatTable.Level &gt;= 51 then send("hero " .. matches[2]) end
send("chat " .. matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^g-adv (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>chaos-look</name>
						<script>local dirs = {}

tmpDirTrigger = tempRegexTrigger("^(North|South|East|West|Up|Down)", function() 
  table.insert(dirs, matches[2])
  if #dirs == 12 then
    local string = ""

    for i = 1, 12 do
      string = string .. string.lower(string.sub(dirs[i],1,1))
      if i ~= 12 then string = string .. "," end
    end
    
    send("gtell Dirs: " .. string)
  end
end, 12)

for i = 1, 12 do
  send("look direction" .. i)
end

-- You look at the white tablet here...
-- North


--tempRegexTrigger("^(North|South|East|West|Up|Down)", function() print(matches[2]) end, 2)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(lookdirs|ldirs)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>gtell law and chaos</name>
						<script>if matches[2] == "law" then
  send("gtell (Law) |BY|a orderly dragon scale (x2)|N|: |BW|5 QP|N|, turn into Knutselaar (gnome) at thorngate sw")
  send("gtell (Law) |BY|yet another dragon scale|N|: give to alleg for credit towards |BW|alleg insignia|N|")
else
  send("gtell (Chaos) |BY|bound chaos|N|: |BW|manifest base reroll|N| ie give this to gnome on thorn + your lord manifest to reroll the base")
  send("gtell (Chaos) |BY|an exceptionally useless trinket|N|: |BW|+1 to all 5 stats|N| insignia - turn into Alleg then kneel")
  send("gtell (Chaos) |BY|ever changing junk|N|: fulfills Alleg's request for the day")
  send("gtell (Chaos, not every run) |BW|living bow|N|: 10/100 negate failure to divine, 5/100 halve divine spell, 40 hr m15x")
  send("gtell (Chaos, not every run) |BW|chaos club|N|: 20/100 negated failure to all spells")
  send("gtell (Chaos, not every run) |BW|chaos wand|N|: 5/100 reduce lag all spells")
end
</script>
						<command></command>
						<packageName></packageName>
						<regex>^gt-(law|chaos)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>run-wasp</name>
						<script>speedwalk("3s,e,s,d,e,d,e")</script>
						<command></command>
						<packageName></packageName>
						<regex>^run-wasp</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>echo-wasp</name>
						<script>send("gtell Directions to |BY|wasps|N|: |BW|pp kelsee, 3s,e,s,d,e,d,e")</script>
						<command></command>
						<packageName></packageName>
						<regex>^echo-wasp</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>spellcheck</name>
						<script>send("emote has Sanc: |BW|".. StatTable.Sanctuary .."|N|, Frenzy: |BW|".. StatTable.Frenzy .."|N|, Awen: |BW|".. StatTable.Awen .."|N|, Fort: |BW|".. StatTable.Fortitude .."|N|, Foci: |BW|".. StatTable.Foci .. "|N|.")
</script>
						<command></command>
						<packageName></packageName>
						<regex>^spellcheck</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>veil max</name>
						<script>local btmax = BladetranceMax()
local btlevel = StatTable.BladetranceLevel


if StatTable.VeilExhaust then
  print("Veil is still exhausted for " .. StatTable.VeilExhaust .. " ticks",false)
else
  print("Entering Max Veil! ( current: " .. StatTable.BladetranceLevel .. " / max: " .. btmax .. ")")
  
  if not StatTable.VeilTimer then TryAction("stance veil of blades", 10) end
  
  local wait = tonumber(gmcp.Char.Vitals.lag) + (btmax - btlevel) * 2 + 2
  print(wait)
  
  if btlevel == 0 then
    send("bladetrance enter")
    btlevel = btlevel + 1
  end
  
  -- Assuming btlevel and btmax are already defined
  for i = btlevel, (btmax - 1) do
      send("bladetrance deepen")
  end

  tempTimer(wait, function() if StatTable.BladetranceLevel == btmax then send("emote  |BW|Veil at max! (" .. btmax .. ")") end; end)
  
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^veil max$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>giveall</name>
						<script>for x,_ in pairs(GlobalVar.GroupMates) do
  send("give " .. matches[2] .. " " .. string.lower(x))
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^giveall (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Sentry password</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)sentrypwd$</regex>
					</Alias>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Directions</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>showdirs</name>
							<script>if #GlobalVar.LastDirs == 0 then
  printMessage("Directions" ,"No directions to report")
end
ShowDirs()</script>
							<command></command>
							<packageName></packageName>
							<regex>^(i?)showdirs?$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>North</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(n|north)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>East</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(e|east)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>West</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(w|west)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>South</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(s|south)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Up</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(u|up)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>Down</name>
							<script>local dir = string.lower(matches[2])

AddDir(dir)
send(dir,false)

if GroupLeader() and Grouped() then
  send("scan", false)
end</script>
							<command></command>
							<packageName></packageName>
							<regex>^(d|down)$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>cleardirs</name>
							<script>printMessage("Directions" ,"Cleared")
ClearDirs()</script>
							<command></command>
							<packageName></packageName>
							<regex>^(i?)(clear|reset)dirs$</regex>
						</Alias>
					</AliasGroup>
					<Alias isActive="yes" isFolder="no">
						<name>Next Stance</name>
						<script>-- Get the stance name and optional timer from the captured matches.
local stanceName = matches[3]  -- required argument (e.g. "dervish")
local manualStanceTimer = matches[4]  -- optional argument (a number between 0 and 20)

-- If no stance name was provided, show syntax help.
if not stanceName or stanceName == "" then
  showCmdSyntax("NextStance/NextDance\n\tSyntax: nextstance &lt;stance&gt; [&lt;timer&gt;]",
    {{"nextstance &lt;stance&gt; [&lt;timer&gt;]", "Overrides autostance to manually change to the next dance."},
     {"","Optionally set timer (0-20)."}})
  return
end

-- Ensure the command is only for Bladedancers.
if StatTable.Class ~= "Bladedancer" then
  printMessage("NextStance error", "This command is only for bladedancers.")
  return
end

stanceName = string.lower(stanceName)

-- If a timer was provided, validate it.
if manualStanceTimer then
  manualStanceTimer = tonumber(manualStanceTimer)
  if not manualStanceTimer or manualStanceTimer &lt; 0 or manualStanceTimer &gt; 20 then
    printMessage("NextStance error", "Invalid timer value. Must be a number between 0 and 20.")
    return
  end
end

-- Set the global variables for the next stance.
GlobalVar.NextStance = stanceName
if manualStanceTimer then
  GlobalVar.NextStanceTimer = manualStanceTimer
else
  GlobalVar.NextStanceTimer = nil
end

-- If no stance timers are active, immediately try switching.
if not (StatTable.InspireTimer or StatTable.BladedanceTimer or StatTable.DervishTimer or StatTable.VeilTimer or StatTable.UnendTimer) then
  TryAction("stance " .. GlobalVar.NextStance, 5)
  local timerMsg = manualStanceTimer and (" with timer " .. manualStanceTimer) or ""
  printMessage("NextStance", "No stance active, activating " .. GlobalVar.NextStance .. timerMsg .. " now.")
  GlobalVar.NextStance = nil
  GlobalVar.NextStanceTimer = nil
  return
end

printMessage("NextStance", "Next stance will be " .. GlobalVar.NextStance .. (manualStanceTimer and (" with timer " .. manualStanceTimer) or ""))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(nextdance|nextstance)(?: (\w+)? ?(\d+)?)?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>DancePattern</name>
						<script>setDancePattern(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)dancepattern(?: (\w+))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>resetpsi</name>
						<script>PSITrigger.TriedLookUp = {}
PSITrigger.Load()
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(resetpsi|psireset)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>AutoFrenzy</name>
						<script>local args = (matches[2] or ""):lower()

if args == "on" then
    GlobalVar.AutoFrenzy = true
elseif args == "off" then
    GlobalVar.AutoFrenzy = false
else
  showCmdSyntax("AutoFrenzy\n\tSyntax: autofrenzy (on|off)", {{"autofrenzy (on|off)", "autocasts frenzy when its down"},})
  return
end

printMessage("AutoFrenzy", "Set to " .. (GlobalVar.AutoFrenzy and "ON" or "OFF"))


</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)autofrenzy ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>autoviolate</name>
						<script>
args = matches[3] or ""
args = string.lower(args)

if (args == "") then
  print("AutoViolate - automatically violates a stack of items")
  print("Synax: autoviolate &lt;item&gt;")
  print("--------------------------------------------------")
  local cmd_name = "AutoViolate\n\tSyntax: autoviolate &lt;item&gt;"
  local syntax_tbl = {
    {"autoviolate &lt;item&gt;", "automatically violates a stack of items"},
    {"autoviolate stop", "stops autoviolation"},
    {"",""},
    {"to auto bag these items","set up your loot bags name in StaticVars.LootBagName"},
  }
  showCmdSyntax(cmd_name, syntax_tbl)
elseif args == "stop" then
  GlobalVar.AutoViolate = false
else
  GlobalVar.AutoViolate = true
  GlobalVar.AutoViolateItem = args
  send("cast violation " .. GlobalVar.AutoViolateItem)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(autoviolate)(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>PaladinRescue</name>
						<script>local args = (matches[2] or ""):lower()

if args == "on" then
    GlobalVar.PaladinRescue = true
elseif args == "off" then
    GlobalVar.PaladinRescue = false
else
  showCmdSyntax("Paladin Rescue\n\tSyntax: palrescue (on|off)", {
    {"palrescue (on|off)", "Will attempt to rescue group mates to trigger boons"},

  })
  return
end

printMessage("PaladinRescue", "Set to " .. (GlobalVar.PaladinRescue and "ON" or "OFF"))
</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)palrescue ?(on|off)?</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>questpoints</name>
						<script>local cmd = string.sub(matches[1], 3)
cmd = "questpoints" .. cmd
send(cmd,false)</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)qp(?: (.*))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>verbose</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)verbose(?: (on|off))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>dropjunk</name>
						<script>enableTrigger("drop_junk")
send("inventory")</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(dropjunk|dj)$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>RunStats</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>report run stats</name>
						<script>RunStats.Report()

</script>
						<command></command>
						<packageName></packageName>
						<regex>^runrep$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Reset Run Stats</name>
						<script>RunStats.Reset()
DamageCounter.Reset()</script>
						<command></command>
						<packageName></packageName>
						<regex>^runreset$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>runstats</name>
						<script>RunStats.EchoSessionAll()</script>
						<command></command>
						<packageName></packageName>
						<regex>^runstats$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>showstats</name>
						<script>RunStats.EchoSessionAll()</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)showstats$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Damage Counter</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Damage Counter</name>
						<script>DamageCounter.ReportEcho()


</script>
						<command></command>
						<packageName></packageName>
						<regex>^repdmg$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Reset dmg</name>
						<script>DamageCounter.Reset()
</script>
						<command></command>
						<packageName></packageName>
						<regex>^resdmg$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>List of Package Commands</name>
					<script>cmd_name = "Summary of Key Commands/Features Available\nMany of these commands provide more information if you type the command with no argument"

local syntax_tbl = {
  {"&lt;red&gt;Combat Commands",nil},
  {"autokill (on|off)", "whether to attack with killstyle (see below) on leader emote"},
  {"killstyle &lt;style&gt;", "what autokill style to attack with (e.g. kill, bash, backstab)"},
  {"autobash (on|off)", "automatically tries to bash if enemy is standing"},
  {"autotarget (on|off)", "auto tries to killstyle mob when entering/looking in rooms"},
  {"ar (command)", "autorescue package for tanks, type 'ar' for commands"},
  {"autorevive (on|off|#)", "auto revives when hp % falls below #", condition = (StatTable.Race == "Troll")},
  {"prayer &lt;prayer&gt;", "recast &lt;prayer&gt; when the spell falls", condition = (StatTable.Class == "Paladin")},
  {"palrescue (on|off)", "recast &lt;prayer&gt; when the spell falls", condition = (StatTable.Class == "Paladin")},
  {"nextstance &lt;stance&gt;", "overides autostance to manually change to the next bld dance"},
  {"dancepattern &lt;pattern", "set your BLD's dance pattern, type dancepattern for details"},
  {"",nil},
  {"&lt;blue&gt;Caster Commands",nil},
  {"autocast (on|off|&lt;spell&gt;)", "autocasts &lt;spell&gt; during combat [on by default]"},
  {"(1|2|3|4|5)", "set surge level (only surges when mana is high) [2 by default]"},
  {"auto(weapon|armor|bow) &lt;item&gt;", "autoenchants all items named &lt;item&gt; in your inventory"},
  {"autobrill &lt;#&gt;", "default # of brills for autoenchant to try for [2 by default]"},
  {"kin (&lt;spell1&gt; &lt;spell2&gt;|clear)", "set kinetic enhancers spells to autocast (psi's only)", condition = (StatTable.Class == "Psionicist")},
  {"",nil},
  {"&lt;yellow&gt;Healer Commands",nil},
  {"autoheal (on|off|&lt;options&gt;)", "autoheal either &lt;target&gt; or &lt;lowest&gt; groupmate [default: lowest]"},
  {"bra (commands)", "auto equips staff then requips armor, tracks charges"},
  {"panth (&lt;spell&gt;|clear)", "sets the cleric's pantheon spell to autocast", condition = (StatTable.Class == "Cleric")},
  {"",nil},
  {"&lt;green&gt;Archer Commands",nil},
  {"autofletch &lt;ammo&gt; &lt;type&gt;", "continues to fletch ammo until \"autofletch stop\" issued"},
  {"autotrack (on|off|echo)", "autotrack will walk to target if on, or echo to group chat"},
  {"",nil},
  {"&lt;purple&gt;General Commands",nil},
  {"queue &lt;command&gt;", "queues a command to be executed after a mob death"},
  {"autolotto", "lotto bot"},
  {"missing", "checks if any groupmates are missing and sends a message to gteel"},
  {"speedwalk &lt;dirs&gt;", "can speedwalk directions, e.g., speedwalk 3sesdede"},
  {"bud-set &lt;name&gt; &lt;colour_code&gt;", "sets name and colour for buddychat tag"},
  {"silent (on|off)", "turns on silent mode (minimal gtell / emotes)"},
  {"pwd &lt;password&gt;", "autologins with password (NOTE: stored in plain text!!)"},
  {"autostance (on|off)", "automatically switch stances on certain classes [default: OFF]"},
  {"autoplane (on|off)", "whether to auto plane when the leader does [default: OFF]"},
  {"ihelp", "explains the inventory list management system"},
  {"cmds extra", "additional commands you may find useful, for more advanced users"},
  {"setup", "set up default aliases and configs"},
  {"download", "downloads the latest version of the package"},
  {"fontsize &lt;#&gt;", "set your GUI's font size"},
  {"quit #", "exits the client in # minutes"}
}

showCmdSyntax(cmd_name, syntax_tbl)</script>
					<command></command>
					<packageName></packageName>
					<regex>^cmds?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Extra Commands</name>
					<script>cmd_name = "Summary of Extra Commands/Features Available\nAdvanced commands for power users"

local syntax_tbl = {
  {"&lt;red&gt;Helpful on Runs", nil},
  {"ldirs", "Gtells the directions for chaos if the tablet is on the floor"},
  {"gt-(law|chaos)", "Gtells the rewards from law/chaos"},
  {"run-wasp", "speedwalks from kelsee to wasps"},
  {"veil max", "bld goes into max veil trance"},
  {"giveall &lt;item&gt;", "gives each groupmate one of an item (make sure they're in the same room)"},
  {"(show|clear)dirs", "shows the directions you recently moved"},
  {"g-adv &lt;msg&gt;", "advertises your group beckon message on lord/hero/chat"},
  {"",nil},
  {"&lt;blue&gt;Group Leader Commands", nil},
  {"gt max veil", nil},
  {"gt inspire", nil},
  {"gt dance check", nil},
  {"gt pick &lt;dir&gt;", nil},
  {"gt [get/drop] &lt;item&gt; [container]", "for mday, can have groupies drop/get (eg gt drop all.lockbox)"},
  {"gt [ablut/wear all]", "for mday, have groupies ablut/wear all"},
  
  
  
  {"",nil},
  {"&lt;yellow&gt;Spell Cost Checks", nil},
  {"spellcostcheck", "shows your spell cost reductions"},
  {"spellcostcomp &lt;race&gt;", "converts your mana into another race's mana (eg spellcostcomp high elf)"},
  {"spellcosttrans &lt;amt&gt; &lt;race&gt;", "converts another race's mana to your race (eg spellcosttrans 60000 troll)"},

  {"",nil},
  
  {"&lt;white&gt;Misc.", nil},
  {"showstats", "show all your xp / gains starts since you launched the mudlet session"},
  {"charstars &lt;character&gt;", "reports one of your characters stats"},
  {"repcharstats &lt;char&gt; &lt;chat&gt;", "reports character's HP/MP stats to chat channel"},
  {"iaw &lt;equip", "insures and wears a piece of equipment"},
  {"autotrack", "different tracking options, see autotrack for details"},
  {"dropjunk", "drops all junk in inventory"},
  

}

showCmdSyntax(cmd_name, syntax_tbl)</script>
					<command></command>
					<packageName></packageName>
					<regex>^cmds extra?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Queue alias</name>
					<script>cmd = matches[2] or ""
args = matches[3] or ""



if cmd == "" then
  if args == "" then 
    local cmd_name = "OnMobDeath Queue\n\tSyntax: queue (&lt;command&gt;|show|clear)"
    local syntax_tbl = {
      {"queue &lt;command&gt;", "Queues a command to be performed after a mob dies"},
      {nil, "Only one command is performed per kill."},
      {nil, "Queue multiple commands at once using the | character"},
      {nil, "e.g., queue score|group"},
      {"",nil},
      {"queue show", "Shows the list of commands in the queue"},
      {"queue clear", "Clears the entire queue"}
    }
    showCmdSyntax(cmd_name, syntax_tbl)
    return
  else
    OnMobDeathQueue(string.gsub(args, "|", getCommandSeparator()))
  end
end

if cmd == "show" then
  display(MobDeath.Queue)
elseif cmd == "clear" then
  OnMobDeathQueueClear()
  MobDeath.LastCommand = ""  
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)queue(?: (show|clear)? ?(.*?))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>AutoRevive</name>
					<script>if (matches[2] == "on") then 
  GlobalVar.AutoRevive = true
  print("AutoRevive ON: will auto revive at " .. math.floor(StatTable.max_health * GlobalVar.AutoReviveHPpct) .. "hp (" .. GlobalVar.AutoReviveHPpct .. "%)")
elseif (matches[2] == "off") then
  GlobalVar.AutoRevive = false
  print("AutoRevive OFF")
elseif (matches[2] ~= nil and tonumber(matches[2]) &gt; 0 and tonumber(matches[2])&lt;100) then
  GlobalVar.AutoReviveHPpct = tonumber(matches[2]) / 100
  print("AutoRevive: will auto revive at " .. math.floor(StatTable.max_health * GlobalVar.AutoReviveHPpct) .. "hp (" .. GlobalVar.AutoReviveHPpct * 100 .. "%)")
else
  print("AutoRevive is " .. (GlobalVar.AutoRevive and "ON" or "OFF"))
  print("AutoRevive will automatically activate 'racial revive' on Trolls if you're spelled and your HP falls below " ..  GlobalVar.AutoReviveHPpct * 100 .. "%")
  print("syntax: autorevive &lt;on|off|#&gt;")
  
end
  
  </script>
					<command></command>
					<packageName></packageName>
					<regex>^autorevive ?(on|off|\d+)?</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>GetPlaneName</name>
					<script>print(GetPlaneName(gmcp.Char.Status.area_name))</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)GetPlaneName$</regex>
				</Alias>
				<Alias isActive="no" isFolder="no">
					<name>AutoGurney</name>
					<script>if (matches[2] == "") then
  showCmdSyntax("AutoGurney\n\tSyntax: autogurney (target)", 
  {
  {"autogurney &lt;target&gt;","automatically gurneys a group mate at shift"},
  {"autogurney","clears previous autogurney target"}
  
  })
  GlobalVar.AutoGurney = ""
elseif (StatTable.Class == "Sorcerer" or StatTable.Class == "Shadowfist" or StatTable.Class == "Berserker") then
  print("AutoGurney: " .. StatTable.Class .. " can't cast gurney!")
else
  GlobalVar.AutoGurney = string.lower(matches[2])
  send("info +lord", false) -- relies on the lord info announcement, turn it on just incase its off
  print("AutoGurney target set to " .. matches[2])
end
  </script>
					<command></command>
					<packageName></packageName>
					<regex>^autogurney\s*(\w*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>MobList</name>
					<script>local cmd = string.lower(matches[2])
local args = matches[3]

if cmd == "zone" then
  if args == "" then
    print("MobZone: no argument provided, setting to current zone")
    SetMobListZone(gmcp.Room.Info.zone)
  else
    SetMobListZone(args)
  end
elseif cmd == "set" then
  if args == "" then
    if (MobListCoroutine == nil) then
      cecho("&lt;white&gt;MobSet:&lt;ansi_white&gt; Ready! Please type 'mobset &lt;mob_keyword&gt;' for each mob name given\n")
      cecho("&lt;white&gt;MobSet:&lt;ansi_white&gt; If you don't know the keyword, just type 'mobset' with no argument and it'll skip\n")
      MobListCoroutine = coroutine.create(SetMobList)
      coroutine.resume(MobListCoroutine)
      tempTimer(60, function() MobListCoroutine = nil end)
    else
      cecho("&lt;white&gt;MobSet:&lt;ansi_white&gt; Mob skipped\n")
      MobListSetKeyword = "keyword"
      if not coroutine.resume(MobListCoroutine) then MobListCoroutine = nil end
    end
  else
    if (MobListCoroutine == nil) then
      cecho("&lt;white&gt;MobSet:&lt;ansi_white&gt; Error: mobset not ready, please start with 'mobset'\n")
    else
      MobListSetKeyword = args
      cecho("&lt;white&gt;MobSet:&lt;ansi_white&gt; Mob keyword set to " .. MobListSetKeyword .. "\n")
      if not coroutine.resume(MobListCoroutine) then MobListCoroutine = nil end
    end   
  end
  
elseif cmd == "list" then
  MobListDisplay(gmcp.Room.Info.zone)
elseif cmd == "spec" then
  MobListDisplaySpec(gmcp.Room.Info.zone)
else
  error("MobList Alias: shouldn't be reached")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)mob(zone|set|list|spec)\b\s*(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>download</name>
					<script>VagoPackage:UpdateVersion()</script>
					<command></command>
					<packageName></packageName>
					<regex>^download$</regex>
				</Alias>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>BuddyChat</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>buddychat</name>
						<script>if GlobalVar.BuddyChatName and GlobalVar.BuddyChatColour then
  send("buddy |B"..GlobalVar.BuddyChatColour.."|{" .. texttocolour(GlobalVar.BuddyChatColour, GlobalVar.BuddyChatName)  .. "|B"..GlobalVar.BuddyChatColour.."|} |C|" .. matches[3],false)
else
  send("buddy " .. matches[3], false)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)(b|bud|buddy) (.*)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>buddychat-set</name>
						<script>if matches[2] == nil or matches[2] == "" or matches[3] == nil or matches[3] == "" then
  print("bud-set sets the character name and colour for your buddy chat messages")
  print("Usage: bud-set &lt;main_char_name&gt; &lt;colour_letter&gt;")
  print("")
  print("&lt;main_char_name&gt; is the main account name you wish to be known by")
  print("&lt;colour_letter&gt; is the colour you want to go by [single letter, see help colours]")
else

  local colour_code = string.upper(matches[3])
  
  if colour_code ~= "B" and colour_code ~= "C" and colour_code ~= "G" and colour_code ~= "R" and colour_code ~= "Y" and colour_code ~= "W" and colour_code ~= "P" then
    print("bud-set error: &lt;colour_letter&gt; must be one of B, C, G, R, Y, W or P - see help colours")
    
  else

    GlobalVar.BuddyChatName = matches[2]
    GlobalVar.BuddyChatColour =  matches[3]
    SaveProfileVars()
  end
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^(?i)bud-set ?(\w+)? ?(\w+)?$</regex>
					</Alias>
				</AliasGroup>
				<Alias isActive="yes" isFolder="no">
					<name>fontsize</name>
					<script>
local fontsize = tonumber(matches[2])

assert(type(fontsize)=="number")

if fontsize &lt; 6 or fontsize &gt; 20 then
  print("Error! Fontsize must be between 6 and 20")
end

GlobalVar.FontSize = fontsize
SaveProfileVars()
LoadLayout()</script>
					<command></command>
					<packageName></packageName>
					<regex>^fontsize (\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>autolotto alias</name>
					<script>cmd = (matches[2] and string.lower(matches[2]) or "")
args = matches[3] or ""

if cmd == "start" then
  AutoLotto.Start()
elseif cmd == "init" then
  AutoLotto.Init()
elseif cmd == "pinfo" then
  if Battle.Combat then
    printMessage("AutoLotto", "run autolotto pinfo when out of combat")
    return
  end
  enableTrigger("On PInfo")
  send("pinfo show", false)
elseif cmd == "bag" then
  if args == nil or args == "" then
    printMessage("AutoLotto", "format is autolotto bag &lt;keyword&gt; &lt;bagname&gt;")
    return
  else
    local words = {}
    words[1], words[2] = args:match("(%w+) (.*)")
    if words[1] == nil then words[1] = args end
    
    if words[2] == nil then 
      printMessage("AutoLotto", "format is autolotto bag &lt;keyword&gt; &lt;bagname&gt;")
      return
    end
    
    AutoLotto.SetBag(words[1], words[2])
    
  end
elseif cmd == "clear" then
  AutoLotto.CleanUp()
elseif cmd == "update" then
  AutoLotto.PopulateBag(AutoLotto.BagID)
elseif cmd == "uselist" then
  safeKillEventHandler("ProcessLotto")
  AutoLotto.ProcessLotto()
else
  showCmdSyntax("AutoLotto\n\tSyntax: autolotto &lt;cmd&gt; &lt;optional arg&gt;", {
    {"autolotto bag &lt;keyword&gt; &lt;name&gt;", "set the bag keyword and name, must be in your inventory"},
    {"autolotto pinfo", "run this first, saves your pinfo list"},
    {"autolotto init", "initializes autolotto, review the pinfo list"},
    {"autolotto start", "starts autolotto once initialized"},
    {"",""},
    {"Troubleshooting", ""},
    {"",""},
    {"autolotto clear", "used to end lotto early (eg if something breaks)"},
    {"autolotto update", "used to repopulate loot list after putting loot late into bag"},
    {"autolotto uselist", "if leader lotto's early, do autolotto start / autolotto uselist"},

    })
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)autolotto(?: (init|start|bag|pinfo|clear|update|uselist)? ?(.*?))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>charstats</name>
					<script>-- todo

local char_name = GMCP_name(matches[2])

if not AltList.Chars[char_name] then
  printMessage("Error", char_name .. " not found in your altlist")
  return
end

print(char_name)
print("Level:\t" .. AltList.Chars[char_name].Level .. " (" .. AltList.Chars[char_name].SubLevel .. ")" .. " " .. AltList.Chars[char_name].Race .. " " .. AltList.Chars[char_name].Class .. " (" .. AltList.Chars[char_name].Worship .. ")")
print("Max HP:\t" .. AltList.Chars[char_name].Max_HP)
print("Max Ma:\t" .. AltList.Chars[char_name].Max_MP)
print("AC:\t" .. AltList.Chars[char_name].ArmorClass)
print("HR/DR:\t" .. AltList.Chars[char_name].HitRoll .. " / " .. AltList.Chars[char_name].DamRoll)</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)charstats (\w+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>repcharstats</name>
					<script>-- todo

local char_name = GMCP_name(matches[2])
local chat_type = matches[3]

if not AltList.Chars[char_name] then
  printMessage("Error", char_name .. " not found in your altlist")
  return
end

if AltList.Chars[char_name].Level &gt;= 51 then
  level_msg = (AltList.Chars[char_name].Level == 51) and "Hero " or "Lord "
  level_msg = level_msg .. AltList.Chars[char_name].SubLevel .. ": "
else
  level_msg = "Level " .. AltList.Chars[char_name].Level .. ": "
end
  

send(chat_type .. 
    " Stats for |BW|" .. 
    char_name .. "|N| " .. 
    level_msg ..
    AltList.Chars[char_name].Max_HP .. "hp / " .. 
    AltList.Chars[char_name].Max_MP .. "mp")
</script>
					<command></command>
					<packageName></packageName>
					<regex>^(?i)repcharstats (\w+) (.*)$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Vagonuth-Inventory-Mgmt</name>
			<packageName>Vagonuth-Inventory-Mgmt</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Inventory &amp; Alleg Management Scripts</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>README</name>
					<packageName></packageName>
					<script>-- Vagonuth Inventory Package for AVATAR MUD (avatar.outland.org:3000)
-- Note: could be easily modified for any MUD that supports GMCP's Char.Items.List format
-- README FILE

-- This is a standalone module that can be installed in Mudlet to help track your inventory and alleg
-- For the latest, check out the github: https://github.com/raretypeoffox/vagonuth-lists-mpackage/wiki

-- The package will track a variety of information about your character including:

-- Tracks:
-- + Each characters inventory, items in bags and your lockers
-- + Alleg item request + status with Alleg
-- + QP, gold, insigs
-- + Character stats: race, class, hp, mana, level, etc. (note: no reports for these)
-- + Character worship status

-- Doesn't track:
-- - Currently equipped items
-- - Bags within Bags
-- - Bags with too many items in it (gmcp limit, will give you error)

-- Opportunities (easy to implement):
-- + Write a report showing all characters, showing characters by most hp, most mana, chars that need to regen, etc.
-- + Write a report showing # of all alleg items you have


-- *** Information for Coders ***

-- Key Data Structures

-- InventoryList.Items - the parent table where everything is saved
-- InventoryList.Items["chararacter"] -- the parent table for that particular character's items
-- InventoryList.Items["chararacter"].locker -- contents of character's locker
-- InventoryList.Items._BagNames -- lookup tables for converting unique id's to bag names

-- AltList.Chars -- the parent table where all the character stats are saved
-- AltList.Chars["character"] -- the parent table for that particular character's stats
-- AltList.Chars["character"].Alleg -- table for that character's alleg info

-- Key Functions

-- InventoryList.UpdateItems() -- updates the inventory list
-- InventoryList.Search(tbl, search) -- used to search for an item in the inventory list, returns a table while all matching items

-- AltList.UpdateVitals() -- updates character vitals from gmcp
-- AltList.UpdateXXX()  -- variety of other functions that update

-- Supporting Scripts

-- Insig Script -- parses the "insig" trigger text into the insig table
-- Alleg Script -- converts alleg items to keywords, checks if a looted item is alleg
-- Time Functions -- calculates the time zone we're in
-- Help functions -- misc helper functions
-- wait script -- allows use to use the wait command (needed for inventory update)


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CHANGELOG</name>
					<packageName></packageName>
					<script>-- Vagonuth AVATAR Package Change Log

-- v1.0.6
-- added repinsig

-- v1.0.7
-- added README, CHANGELOG
-- changed data structure: bags are now tracked by unique ID in InventoryList.Items
-- added: isearchlvl, icountlvl
-- added: replocker
-- updated: ihelp

-- v1.0.8 (October 31, 2024)
-- added: run-venison (quick command to turn-in venison)
-- added: qp updates when using qp transfer now
-- added: repinvr (reverse inventory report)
-- added: turninvault (auto turnin treasure hunter items)
-- added: movevault (move treasure hunter items between bags)
-- updated: repvault &lt;charname&gt; available now, repvault shows who has an item
-- updated inventory count in Vagonuth lottobot pinfo
-- updated: repalleg now show who has an item and how many your have
-- bug fix: preventing legend from overwriting lord inventory/altlist
-- bug fix: heavy shroud keyword fixed
-- hot fix: movebags handles arguments slightly differently
-- hot fix: repinvr

-- v1.0.9 (in progress)
-- 





</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>VagoInvInstall</name>
					<packageName></packageName>
					<script>-- Installed with: lua installPackage("https://github.com/raretypeoffox/vagonuth-lists-mpackage/releases/latest/download/Vagonuth-Inventory-Mgmt.mpackage")
VagoInv = VagoInv or {}
VagoInv.Version = "v1.0.8"
VagoInv.OnlinePath = "https://github.com/raretypeoffox/vagonuth-lists-mpackage/releases/latest/download/"
VagoInv.OnlineVersionFile = "https://raw.githubusercontent.com/raretypeoffox/vagonuth-lists-mpackage/main/versions.lua"
VagoInv.ProfileName = getProfileName():lower()
VagoInv.DownloadPath = getMudletHomeDir().."/vagonuth inv package/"
VagoInv.Downloading = false

function VagoInv:DownloadVersionFile()
    if not io.exists(VagoInv.DownloadPath) then lfs.mkdir(VagoInv.DownloadPath) end
    local filename = "versions.lua"
    VagoInv.Downloading=true
    downloadFile(VagoInv.DownloadPath .. filename, VagoInv.OnlineVersionFile)
end

function VagoInv:CheckVersion()
    local path = VagoInv.DownloadPath .. "versions.lua"
    local versions = {}
    
    table.load(path, versions)
    local pos = table.index_of(versions, VagoInv.Version) or 0
    local line = ""
    if pos ~= #versions then
        cecho("&lt;white&gt;Newer version of Vagonuth Inventory Management Package available\n")
        cecho("&lt;white&gt;Type the command &lt;yellow&gt;idownload &lt;white&gt;to update\n")
      end
end

function VagoInv:UpdateVersion()
    if VagoInv.downloadFileHandler then
        killAnonymousEventHandler(VagoInv.downloadFileHandler)
    end
    if table.contains(getPackages(),"Vagonuth-Inventory-Mgmt") then
        uninstallPackage("Vagonuth-Inventory-Mgmt")
      end
    installPackage(VagoInv.OnlinePath .. "Vagonuth-Inventory-Mgmt.mpackage")
end

function VagoInv:onFileDownloaded(event, ...)
    if event == "sysDownloadDone" and VagoInv.Downloading then
        local file = arg[1]
        if string.ends(file,"/versions.lua") then
            VagoInv.Downloading=false
            VagoInv:CheckVersion()
        end
    end
end

VagoInv.downloadFileHandler = VagoInv.downloadFileHandler or nil

if VagoInv.downloadFileHandler then
    killAnonymousEventHandler(VagoInv.downloadFileHandler)
end

VagoInv.downloadFileHandler = registerAnonymousEventHandler("sysDownloadDone","VagoInv:onFileDownloaded")

tempTimer(2, [[VagoInv.DownloadVersionFile()]])</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>AltList Support</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Insig Script</name>
						<packageName></packageName>
						<script>OnInsig = OnInsig or {}
OnInsig.isOpen = OnInsig.isOpen or false
OnInsig.len = OnInsig.len or 0
OnInsig.InsigArray = OnInsig.InsigArray or {}

OnInsig.Lock = OnInsig.Lock or false

function OnInsig.IsPrompt(line)
    -- for insig, just looking for the empty line should work
    if line == "" then return true else return false end
    -- Note: if you're using a prompt that is not the standard prompt from setup, you'll need to edit this line so that this regex matches your prompt (test at regex101.com)
    --local pattern = "^(.*)&lt;(%d+)/(%d+)hp (%d+)/(%d+)ma (%d+)v (%d+)&gt; (%d+)"
    --print(string.match(line, pattern))
    --return string.match(line, pattern) ~= nil
end

function OnInsig.ArrayAddLine(line)
  if OnInsig.Lock then return end
  line = string.gsub(line, '^%s*(.-)%s*$', '%1') -- remove leading and trailing white space
  table.insert(OnInsig.InsigArray,line)
end

function OnInsig.ArrayFinish()
  if OnInsig.Lock then return end
  
  table.remove(OnInsig.InsigArray,1) -- remove's first line, i.e., Your playerinfo is:
  --table.remove(OnInsig.InsigArray, #OnInsig.InsigArray) -- removes last line (empty line, before the prompt)
  
  OnInsig.Lock = true
  OnInsig.Write()
end


function OnInsig.Write()
  AltList.UpdateInsigs(OnInsig.InsigArray)
  OnInsig.Lock = false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Alleg Script</name>
						<packageName></packageName>
						<script>-- Define the data set
local AllegItems = {
    {
        clue = "A beacon from the stands would make me happy.",
        plane = "Noctopia",
        item = "Havynne's Lantern"
    },
    {
        clue = "A bow made of gold would be a fine addition to my collection.",
        plane = "Astral",
        item = "Golden Bow"
    },
    {
        clue = "A river of blood should make for some interesting flails.",
        plane = "Noctopia",
        item = "Bloodletter Flail"
    },
    {
        clue = "Be a lamb and fetch me a knife from Karnath.",
        plane = "Karnath",
        item = "Sacrificial Knife"
    },
    {
        clue = "Bring me a dagger I can use to cut glass.",
        plane = "Arcadia",
        item = "Diamond Dagger"
    },
    {
        clue = "Bring me a fiery ring.",
        plane = "Fire",
        item = "Ring Of The White Flame"
    },
    {
        clue = "Bring me a fiery signet.",
        plane = "Fire",
        item = "Signet Of The Pure Flame"
    },
    {
        clue = "Bring me a goat's head from the demons. Mount it on a stick or something.",
        plane = "Tarterus",
        item = "Ram's Head staff"
    },
    {
        clue = "Bring me a madman's embedded whip.",
        plane = "Stone",
        item = "Shard-Embedded Whip"
    },
    {
        clue = "Bring me a shroud. Be sure it has some heft to it.",
        plane = "Karnath",
        item = "Heavy Shroud"
    },
    {
        clue = "Bring me a Sultan's head! Or the turban that rests on it at least.",
        plane = "Water",
        item = "Sultan's Turban"
    },
    {
        clue = "Bring me something golden that will keep me well fed.",
        plane = "Kzinti",
        item = "Sceptre Of Creation"
    },
    {
        clue = "Bring me something truly exotic.",
        plane = "Arcadia",
        item = "Exotic Robes"
    },
    {
        clue = "Bring me the blade of Karnath, intact preferably but I will take what I get.",
        plane = "Karnath",
        item = "Broken Blade Of Karnath"
    },
    {
        clue = "Can domesticated frozen dogs be collared? Find out for me.",
        plane = "Airscape",
        item = "Ice Collar"
    },
    {
        clue = "Dagger of the dead, what else would you expect a spirit to wield?",
        plane = "Karnath",
        item = "Netherworld Dagger"
    },
    {
        clue = "Defeat a champion and bring me his sword.",
        plane = "Outland",
        item = "Black Sword Of The Keep"
    },
    {
        clue = "Do wild ice hounds still get collared? Return with one if they do.",
        plane = "Water",
        item = "Ice Collar"
    },
    {
        clue = "Do you think I would look good in sleeves of gold?",
        plane = "Astral",
        item = "Golden Sleeves"
    },
    {
        clue = "Each Cabal member has a staff of office, bring me one.",
        plane = "Astral",
        item = "Sun Staff"
    },
    {
        clue = "Even domesticated frozen dogs will yield their teeth.",
        plane = "Airscape",
        item = "Ice Hound's Tooth"
    },
    {
        clue = "Find a bow that is truly worthy of firing ice arrows.",
        plane = "Water",
        item = "Ice Bow"
    },
    {
        clue = "Find me some unfinished kzinti serum; I want to make Killaris jealous.",
        plane = "Kzinti",
        item = "Vial Of Unfinished Portal Serum"
    },
    {
        clue = "Flaming blue balls doesn't sound like something I would want a pair of so just relieve the owner of one for me please.",
        plane = "Arcadia",
        item = "Seething Ball Of Blue Flame"
    },
    {
        clue = "Gaius has interesting armor, heavy, but interesting.",
        plane = "Stone",
        item = "Stone Platemail"
    },
    {
        clue = "Go and de-robe the mistress of the south.",
        plane = "Outland",
        item = "Dark Purple Robe"
    },
    {
        clue = "Go play the ultimate game of hot potato in the realm of earth.",
        plane = "Stone",
        item = "Lavabomb"
    },
    {
        clue = "Go play the ultimate game of hot potato in the realm of fire.",
        plane = "Fire",
        item = "Lavabomb"
    },
    {
        clue = "Have you ever seen a katana dance? Neither have I. Please bring me this wonder.",
        plane = "Arcadia",
        item = "Dancing Katana"
    },
    {
        clue = "Hmm, according to my list I need the fang of a snake of some sort, like a viper.",
        plane = "Noctopia",
        item = "Viper Fang"
    },
    {
        clue = "I am not sure what use the Fae have for shield bracelets, get me one so I can take a look at it.",
        plane = "Noctopia",
        item = "Buckler Bracelet"
    },
    {
        clue = "I can't decide if a steam gun would add to my collection or not.",
        plane = "Air",
        item = "Small Steam Gun"
    },
    {
        clue = "I could use some custom made boots.",
        plane = "Water",
        item = "Pair Of Wind-Ravaged Boots"
    },
    {
        clue = "I desire a kzinti incantation, hop to.",
        plane = "Kzinti",
        item = "Incantation Note"
    },
    {
        clue = "I desire the bow of the air lord, be a dear and fetch it for me.",
        plane = "Air",
        item = "Aurora Bow"
    },
    {
        clue = "I desire the mace of the earth lord. Be kind to an old dragon and fetch it for me please.",
        plane = "Stone",
        item = "Earthen Mace Of Might"
    },
    {
        clue = "I don't know whether or not you will have to gather each feather individually, but I would like a cape of Durin feathers or the like.",
        plane = "Arcadia",
        item = "Cape Of Angel Feathers"
    },
    {
        clue = "I doubt there are any happy bone shields but find one with some sort of emotion.",
        plane = "Tarterus",
        item = "Grim Bone Shield"
    },
    {
        clue = "I find myself needing to purify a few sections of my hoard; perhaps a wand would aid me with this.",
        plane = "Fire",
        item = "Ritual Purification Wand"
    },
    {
        clue = "I found a bare spot in my collection that would benefit from a plain staff, or staff of a plane.",
        plane = "Tarterus",
        item = "Staff Of The Lower Planes"
    },
    {
        clue = "I have a leather restorer and preservative I would like to test on some leather armor that has seen better days.",
        plane = "Astral",
        item = "Decaying Vest Made From Cracked Leather"
    },
    {
        clue = "I just want you to do a quick trip to Astral shift and grab me a guardian's weapon.",
        plane = "Astral",
        item = "Massive Slate-grey Sledgehammer"
    },
    {
        clue = "I need you to go visit with the Demogorgon and see if you can purchase his whip, or maybe he would give it to me as a gift.",
        plane = "Tarterus",
        item = "Black Whip"
    },
    {
        clue = "I probably wouldn't want to encounter bugs attached to green webbing, but a veil made of such stuff intrigues me.",
        plane = "Astral",
        item = "Green Web Veil"
    },
    {
        clue = "I require a blindfold that has seen some action. Don't waste my time with the one that blind Fae wears.",
        plane = "Karnath",
        item = "Bloodstained Blindfold"
    },
    {
        clue = "I still don't understand why a mage would wield a sledgehammer, maybe it has something to do with the black rock from which it is made.",
        plane = "Kzinti",
        item = "Obsidian Sledgehammer"
    },
    {
        clue = "I think there might be some hidden information on a crumpled note on the Kzinti plane. Bring me this information.",
        plane = "Kzinti",
        item = "Crumpled Note"
    },
        {
        clue = "I think there might be some hidden information on a crumpled note on the Kzinti plane.",
        plane = "Kzinti",
        item = "Crumpled Note"
    },
    {
        clue = "I used to like to walk the straight and narrow line. Please bring me something that will help tell me where I'm going.",
        plane = "Outland",
        item = "Crystal Ball"
    },
    {
        clue = "I would just love to get my hands on the cloak of the Ruler of the Water plane.",
        plane = "Water",
        item = "Storm-skin Cloak"
    },
    {
        clue = "Imagine the most Goth wand possible then find it and bring it back to me.",
        plane = "Outland",
        item = "Black Wand With A Grinning Skull"
    },
    {
        clue = "Is it there or isn't it? Your back will know when you encounter this blade.",
        plane = "Noctopia",
        item = "Ethereal Blade"
    },
    {
        clue = "It is no katana, but it is still a dancing sword. Bring me this minor wonder.",
        plane = "Arcadia",
        item = "Dancing Rapier"
    },
    {
        clue = "It isn't Oni's kit, maybe it should be mine.",
        plane = "Noctopia",
        item = "Omayra's Kit"
    },
    {
        clue = "Let's sow a little discord; we just need the right weapon.",
        plane = "Tarterus",
        item = "Blade of Discord"
    },
    {
        clue = "Madness and wickedness, Elaxor radiates both.",
        plane = "Stone",
        item = "Radiance Of Wickedness"
    },
    {
        clue = "Malafont's armor, I want it.",
        plane = "Noctopia",
        item = "A Suit Of Dress Plate"
    },
    {
        clue = "The master of death needs to lose his hood.",
        plane = "Outland",
        item = "Black Master's Hood"
    },
    {
        clue = "Maybe if it was pure the elder wouldn't throw this clear thing around.",
        plane = "Nowhere",
        item = "Clear Psi-Blade"
    },
    {
        clue = "One of them will definitely be blue when you bring me his blade.",
        plane = "Nowhere",
        item = "Blue Psi-Blade"
    },
    {
        clue = "Minor illusions can be just as powerful as major ones. Bring me a minor illusionist's ring.",
        plane = "Air",
        item = "Ring Of Minor Imagery"
    },
    {
        clue = "My collection needs a heartbane loaded weapon in case I ever want to slaughter foes.",
        plane = "Astral",
        item = "Pair Of Kzinti Slaughter Gloves"
    },
    {
        clue = "My collection won't be complete without a way to tame death itself.",
        plane = "Tarterus",
        item = "Whip, \"Death-Tamer\""
    },
    {
        clue = "My dagger set just won't be complete without a golden handled weapon capable of damaging werewolves.",
        plane = "Outland",
        item = "Silver Dagger With A Golden Handle"
    },
    {
        clue = "My rock collection seems incomplete. See if you can turn up a blue or white stone for me.",
        plane = "Astral",
        item = "Blueish-White Stone"
    },
    {
        clue = "No clerics have this aura, just the kzinti war leader.",
        plane = "Kzinti",
        item = "Aura Of Domination"
    },
    {
        clue = "Peel the mark off of a madman.",
        plane = "Stone",
        item = "Mark Of Madness"
    },
    {
        clue = "Pick me up a memento I can use to remember the Gith.",
        plane = "Outland",
        item = "Amulet With A Small Silver Sword Inscribed On It"
    },
    {
        clue = "Please acquire custom made leggings made of panthrodrine. I wear a size 30.",
        plane = "Tarterus",
        item = "Panthrodrine-Skin Leggings"
    },
    {
        clue = "Pluck a phoenix for me please.",
        plane = "Fire",
        item = "Flaming Phoenix Feather"
    },
    {
        clue = "Pry the frozen tooth from a wild hound.",
        plane = "Water",
        item = "Ice Hound's Tooth"
    },
    {
        clue = "Retrieve a dark energy lance for me.",
        plane = "Fire",
        item = "Devilish Lance"
    },
    {
        clue = "Show me how loyal you can be.",
        plane = "Karnath",
        item = "Show Of Loyalty"
    },
    {
        clue = "Silk and velvet, but it is still just a dress of rags.",
        plane = "Noctopia",
        item = "Dress Of Silk And Velvet Rags"
    },
    {
        clue = "Skewer me something from the Orb.",
        plane = "Noctopia",
        item = "Glowing Iron Skewer"
    },
    {
        clue = "Skin a rock wyrm for me please.",
        plane = "Stone",
        item = "Shaleskin Arm Guard"
    },
    {
        clue = "Some merrily dancing fire would be appreciated.",
        plane = "Arcadia",
        item = "Baleflame"
    },
    {
        clue = "Something easy this time? Just grab Ralthar's weapon for me.",
        plane = "Fire",
        item = "Steel Broadsword"
    },
    {
        clue = "The location of the disc I want is considered a secret by some.",
        plane = "Midgaard",
        item = "Stone Disc"
    },
    {
        clue = "The monks are guarding something. Have a \"talk\" with Harold and see what you can bring me.",
        plane = "Thorngate",
        item = "Red Bracer"
    },
    {
        clue = "The thing I desire from you mostly resembles a spear, though it hardly qualifies.",
        plane = "Kzinti",
        item = "Crude Spear"
    },
    {
        clue = "These feathers may try to elude you but I expect you to get them for me anyway.",
        plane = "Arcadia",
        item = "Whirl Of Elusive Feathers"
    },
    {
        clue = "Though the item would make one think otherwise, I would be eternally happy if you were to gather a clasp for me.",
        plane = "Fire",
        item = "Clasp Of Eternal Anguish",
        keyword = "clasp anguish lordgear"
    },
    {
        clue = "Thy task involves an axe. Four shalt thou not count, neither count thou two.",
        plane = "Tarterus",
        item = "Axe Of The Third Plane"
    },
    {
        clue = "Try not to get eaten while retrieving a dha for me.",
        plane = "Karnath",
        item = "Iron Dha"
    },
    {
        clue = "Try not to lose anything yourself while gathering a green blade for me.",
        plane = "Nowhere",
        item = "Green Psi-Blade"
    },
    {
        clue = "Turning big rocks into little rocks by having big rocks wield little rocks I reckon could be useful.",
        plane = "Water",
        item = "Stone Hammer"
    },
    {
        clue = "Turning big rocks into little rocks by having big rocks wield little rocks, what madness.",
        plane = "Stone",
        item = "Rock Hammer"
    },
    {
        clue = "Unicorn horns are said to possess great magic. I want one to test out the properties it possesses.",
        plane = "Air",
        item = "Unicorn Horn"
    },
    {
        clue = "What else would you call a flametongue?",
        plane = "Kzinti",
        item = "Flametongue Called 'Firebrand'"
    },
    {
        clue = "I refuse to add dancing butter knives to my collection. I am drawing the line at a dagger.",
        plane = "Arcadia",
        item = "Dancing Dagger"
    },
    -- sometimes just says it this way:
    {
        clue = "I am drawing the line at a dagger.",
        plane = "Arcadia",
        item = "Dancing Dagger"
    },
    {
        clue = "Where's the beef? Actually, I prefer some venison.",
        plane = "Thorngate",
        item = "Side Of Venison"
    },
    {
        clue = "Which is mightier, earth or air? Bring me a gun where one pushes the other around.",
        plane = "Air",
        item = "Air Gun"
    },
    {
        clue = "Why the senior has to dance with yellow I will never know. He has two so it shouldn't hurt him too bad to give one up.",
        plane = "Nowhere",
        item = "Yellow Psi-Blade"
    },
    {
        clue = "Would you please bring me a talisman of evil? Something an evil witch or hag would hold onto.",
        plane = "Astral",
        item = "Devilish Talisman"
    },
    {
        clue = "You don't have to learn the actual ritual, just get an implement used in dark rites.",
        plane = "Karnath",
        item = "Dagger Of Dark Rites"
    },
    {
        clue = "You don't look to be all that skilled at basket weaving but perhaps you could make something nice from some gith hair.",
        plane = "Outland",
        item = "Assassin's Armband"
    },
    {
        clue = "You might have to bleed a bit to get the red just right on the robe I would like you to gather for me.",
        plane = "Outland",
        item = "Blood Red Robe"
    },
    {
        clue = "You will have to jump through a few hurdles but I know you have it in you to find a faerie script for my collection.",
        plane = "Thorngate",
        item = "Faerie Script"
    },
    {
        clue = "You will probably have to get them custom made, but I would like some coarse leather boots.",
        plane = "Noctopia",
        item = "Coarse Leather Boots"
    },
    {
        clue = "You would think that the boy will know you are coming to take his prophetic staff away and give it to me.",
        plane = "Water",
        item = "Staff Of Prophecy"
    },
    {
        clue = "Do not be oblivious to the signs leading to the item I desire.",
        plane = "Fire",
        item = "Signet Of The Oblivious Defender"
    },
    -- Add more data entries here
}

-- Function to search for the item and plane based on a given clue
function findItemAndPlane(clue)
    for _, entry in ipairs(AllegItems) do
        if clue == entry.clue then
            return entry.item, entry.plane
        end
    end
    return nil, nil  -- Clue not found
end

function checkItemIsAlleg(item)
  local alleg_item
  item = string.lower(item)

  for _, entry in pairs(AllegItems) do
    alleg_item = string.lower(entry.item)
    if item == alleg_item then return true end
  end
  
  return false
end

local AllegKeywordTable = {
  ["amulet with a small silver sword inscribed on it"] = "amulet silver sword inscribed",


}

function getAllegKeyword(item)
 -- some items are too hard to determine their keywords based on the trick below, in that case use the table above
 -- if we have the item in the lookup table, return it's keyword
 --if AllegKeywordTable[item] then return AllegKeywordTable[item] end

 -- otherwise, the below does a good job of determining most alleg item's keywords without having to have every item in the lookup table
 item = string.lower(item)
 item = " " .. item .. " "
 item = string.gsub(item, " of ", " ")
 item = string.gsub(item, " the ", " ")
 item = string.gsub(item, " with ", " ")
 item = string.gsub(item, " a ", " ")
 item = string.gsub(item, " on ", " ")
 item = string.gsub(item, " it ", " ")
 item = string.gsub(item, " small ", " ")
 item = string.gsub(item, " called ", " ")
 item = string.gsub(item, " pair ", " ")
 item = string.gsub(item, " heavy ", "")
 item = string.gsub(item, "broadsword", "broad sword")
 item = string.gsub(item, "shard%-embedded", "shard")
 item = string.gsub(item, "devilish", "devil")
 item = string.gsub(item, "seething", "blaze")
 item = string.gsub(item, "blueish", "bluish")
 item = string.gsub(item, "eternal anguish", "anguish")
 item = string.gsub(item, "%'s", "")
 item = string.gsub(item, "'", "")
 --item = string.gsub(item, " -", " ")
 item = string.gsub(item, '^%s*(.-)%s*$', '%1')
 return item
end



</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Time Functions</name>
						<packageName></packageName>
						<script>function getServerTime(TimeZone)
  if not TimeZone then send("time", false); return os.time() end -- if "time" has never been used, will need to run it the first time

  local local_time = os.time()
  local server_time = local_time - (TimeZone * 3600)
  
  return server_time
end

function calculateDaysBetweenTimes(Time1, Time2)
    -- Get the number of seconds in a day
    local secondsInDay = 24 * 60 * 60

    -- Calculate the absolute time difference in seconds
    local timeDifference = math.abs(Time2 - Time1)

    -- Calculate the number of full days between the two timestamps
    local days = math.floor(timeDifference / secondsInDay)

    -- Check if Time1 is ahead of Time2 (past midnight)
    local date1 = os.date("*t", Time1)
    local date2 = os.date("*t", Time2)

    -- Convert both dates to the same day before performing the comparison
    local sameDayTime1 = os.time({year=date2.year, month=date2.month, day=date2.day, hour=date1.hour, min=date1.min, sec=date1.sec})

    if sameDayTime1 &gt; Time2 then
        -- Adjust days count if Time1 is past midnight
        days = days + 1
    end

    return days
end

function IsMDAY()
  assert(AltList.TimeZone)
  return (os.date('%d', getServerTime(AltList.TimeZone)) == "06")
end

</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Helper functions</name>
						<packageName></packageName>
						<script>function TableSize(t)
  if type(t) ~= "table" then error("TableSize() requires a table as an argument") end
  local count = 0
  for _ in pairs(t) do count = count + 1 end
  return count
end

function deepcopy(o, seen)
  seen = seen or {}
  if not o  then return nil end
  if seen[o] then return seen[o] end

  local no
  if type(o) == 'table' then
    no = {}
    seen[o] = no

    for k, v in next, o, nil do
      no[deepcopy(k, seen)] = deepcopy(v, seen)
    end
    setmetatable(no, deepcopy(getmetatable(o), seen))
  else -- number, string, boolean, etc
    no = o
  end
  return no
end

function format_int(number)
  -- Handle non-numeric inputs
  if type(number) ~= "number" then
    return "format_int(): invalid input"
  end

  local str = tostring(number)
  local minus, int, fraction = str:match('([-]?)(%d+)([.]?%d*)') -- first tries to match optional negative sign, then captures whole number, then captures optional decimal

  -- Insert commas for thousands, millions, etc.
  local formatted = ""
  local length = #int
  for i = 1, length do
    formatted = formatted .. int:sub(i, i)
    if (length - i) % 3 == 0 and i ~= length then
      formatted = formatted .. ","
    end
  end

  return minus .. formatted .. fraction
end

function showCmdSyntax(cmd_name, syntax_tbl, showCmdColour)
  if type(cmd_name) ~= "string" or type(syntax_tbl) ~= "table" then
    error("showCmdSyntax: Invalid inputs (expected string, table)")
    return false
  end
  
  showCmdColour = showCmdColour or "white" -- https://wiki.mudlet.org/images/c/c3/ShowColors.png
  
  cecho("&lt;"..showCmdColour.."&gt;"..cmd_name.."\n")
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
  for _, v in ipairs(syntax_tbl) do
    local dash = (v[1] and v[2]) and "- " or "  "
    local formatStr = string.format("&lt;%s&gt;%-31s%s\n", showCmdColour, v[1] and " " .. v[1] or "", dash .. (v[2] or ""))
    cecho(formatStr)
  end
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
end

function VictoryBeep()
  playSoundFile({name = getMudletHomeDir() .. "/Vagonuth-Inventory-Mgmt/victorybeep.mp3", volume = 75})
end

function printGameMessage(title, message, colour, colour_message)
  colour = colour or "white"
  colour_message = colour_message or ("ansi_" .. colour)
  
  local formatStr = string.format("&lt;%s&gt;%s&lt;%s&gt;: %s\n", colour, title, colour_message, message)
  if StaticVars and StaticVars.GameMsgsChatOutput then
    cecho(StaticVars.GameMsgsChatOutput, formatStr)
  else
    cecho(formatStr)
  end
end

function printMessage(title, message, colour)
  colour = colour or "white"
  
  local formatStr = string.format("&lt;%s&gt;%s&lt;ansi_%s&gt;: %s\n", colour, title, colour, message)
  cecho(formatStr)
end

function Connected()
  local _, _, ret = getConnectionInfo()
  return ret
end

function splitArgumentIntoTwo(input)
    local arg1, arg2

    -- Check for both "words" enclosed in single quotes
    local match1, match2 = input:match("^'(.-)'%s+'(.-)'$")
    if match1 and match2 then
        arg1 = "'" .. match1 .. "'"
        arg2 = "'" .. match2 .. "'"
    else
        -- Check for the pattern with the first "word" in single quotes
        match1, match2 = input:match("^'(.-)'%s+(%S+)$")
        if match1 and match2 then
            arg1 = "'" .. match1 .. "'"
            arg2 = match2
        else
            -- Check for the pattern with the second "word" in single quotes
            match1, match2 = input:match("^(%S+)%s+'(.-)'$")
            if match1 and match2 then
                arg1 = match1
                arg2 = "'" .. match2 .. "'"
            else
                -- Check for the pattern with exactly two words
                match1, match2 = input:match("^(%S+)%s+(%S+)$")
                if match1 and match2 then
                    arg1 = match1
                    arg2 = match2
                else
                    -- Check for a single word
                    match1 = input:match("^(%S+)$")
                    if match1 then
                        arg1 = match1
                    else
                        -- Return an error if no pattern matches
                        return nil, "Invalid input format. Use one or two words, or enclose multiple words in single quotes."
                    end
                end
            end
        end
    end

    return arg1, arg2
end


</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>wait-And-waitline</name>
						<packageName></packageName>
						<script>local threads = {}
function wait(seconds)
    local name = "wait_"..tostring(math.random(1000, 999999))
    threads[name] = coroutine.running()
    if threads[name] == nil then
        cecho("&lt;red&gt;wait(): your code needs to be inside coroutine.wrap\n")
        return false
    end
    tempTimer(seconds, "wait_resume('"..name.."')")
    return coroutine.yield()
end

function wait_resume(name)
    local thread = (threads or {})[name]
    if thread == nil then
        cecho("&lt;red&gt;wait(): coroutine thread not found, coroutine lost\n")
        return false
    end
    threads[name] = nil
    local success,msg = coroutine.resume(thread)
    if success == false then
        cecho("&lt;red&gt;wait(): "..msg.."\n")
        cecho("&lt;orange&gt;details: "..debug.traceback(thread).."\n")
        return false
    end
    return true
end

function wait_line(patterns, timeout, action)
    local name = "wait_line_"..tostring(math.random(1000, 999999))
    threads[name] = { coroutine.running() }
    if threads[name][1] == nil then
        cecho("&lt;red&gt;wait_line(): your code needs to be inside coroutine.wrap\n")
        return false
    end
    threads[name][2] = {}
    if type(patterns) == "table" and #patterns &gt; 0 then
        threads[name][4] = {}
        for i=#patterns,1,-1 do
            threads[name][2][i] = tempRegexTrigger(patterns[i], "multi_line_trigger('"..name.."', "..i..", "..#patterns..")", 1)
            disableTrigger(threads[name][2][i])
        end
        enableTrigger(threads[name][2][1])
    elseif type(patterns) == "string" then
        threads[name][2][1] = { tempRegexTrigger(patterns, "single_line_trigger('"..name.."')", 1) }
    else
        cecho("&lt;red&gt;wait_line(): specified pattern type is incorrect\n")
        return false
    end
    if timeout &gt; 0 then
        local timer_id = tempTimer(timeout, "wait_line_timer('"..name.."')")
        threads[name][3] = function() disableTimer(timer_id) killTimer(timer_id) end
    else
        threads[name][3] = function() end
    end
    if action then send(action) end
    return coroutine.yield() or false
end

function wait_line_resume(name)
    local thread = ((threads or {})[name] or {})[1]
    if thread == nil then
        cecho("&lt;red&gt;wait_line(): coroutine thread not found, coroutine lost\n")
        return false
    end
    if coroutine.status(thread) == "suspended" then
        local args = threads[name][4]
        threads[name] = nil
        local success,msg = coroutine.resume(thread, args)
        if success == false then
            cecho("&lt;red&gt;wait_line(): "..msg.."\n")
            cecho("&lt;orange&gt;details: "..debug.traceback(thread).."\n")
        end
    else
        tempTimer(0, "wait_line_resume('"..name.."')")
    end
end

function single_line_trigger(name)
    threads[name][3]()
    threads[name][4] = matches
    wait_line_resume(name)
end

function multi_line_trigger(name, n, m)
    if n == m then
        threads[name][3]()
        threads[name][4][n] = matches
        wait_line_resume(name)
    else
        threads[name][4][n] = matches
        enableTrigger(threads[name][2][n+1])
    end
end

function wait_line_timer(name)
    for _,v in ipairs(threads[name][2]) do
        for _,i in ipairs(v) do
            disableTrigger(i)
            killTrigger(i)
        end
    end
    wait_line_resume(name)
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>Inventory List</name>
					<packageName></packageName>
					<script>-- Dependencies: 
-- + wait and wait line package installed
-- + Table and Array Functions: deepcopy(), TableSize()

InventoryList = InventoryList or {}
InventoryList.Items = InventoryList.Items or {}
InventoryList.Items._BagNames = InventoryList.Items._BagNames or {}

InventoryList.LoginName = InventoryList.LoginName or nil

OnLocker = OnLocker or {}
OnLocker.isOpen = OnLocker.isOpen or false
OnLocker.len = OnLocker.len or 0
OnLocker.LockerArray = OnLocker.LockerArray or {}


function InventoryList.Save()
  local location = getMudletHomeDir() .. "/InventoryList.lua"
  table.save(location, InventoryList.Items)
end

function InventoryList.Load()
  local location = getMudletHomeDir() .. "/InventoryList.lua"
  if io.exists(location) then
    table.load(location, InventoryList.Items)
  end
end

if TableSize(InventoryList.Items) &lt;= 1 then InventoryList.Load() end
sendGMCP("Char.Group.List")
sendGMCP("Char.Status")
sendGMCP("Char.Vitals")

function InventoryList.GetCharName()
  sendGMCP("Char.Group.List")
  
  if InventoryList.LoginName then
    return InventoryList.LoginName
  end

  local char_name = string.lower(gmcp.Char.Status.character_name):gsub("^%l", string.upper)

  if char_name == "" then error("gmcp.Char.Status.character_name not returning character name"); return nil end

  -- Sometimes gmcp.Char.Status bugs out and requires a relog. We can check this against gmcp.Char.Group.List
  for _,Player in ipairs(gmcp.Char.Group.List) do
    if Player.name == char_name then
      return char_name
    end
  end
  
  cecho("&lt;yellow&gt;Vagonuth-Inventory-Mgmt error: &lt;white&gt;could not get character name, gmcp returning &lt;red&gt;" .. char_name .. "\n")
  cecho("If this is different than the name you logged in with, try reconnecting to AVATAR\n")
  cecho("If your char_name is correct, try running the command again\n\n")

  error("gmcp.Char.Status is not matching gmcp.Char.Group")
  return nil
end

function RemoveColourCodes(name)
    -- Remove sequences that start with \27 followed by [ and then has one or more digits, a semicolon, again one or more digits and ends with an 'm'
    local stripped = string.gsub(name, "\27%[%d+;%d+m", "")

    -- Remove sequences that start with \27
    stripped = string.gsub(stripped, "\27", "")

    -- Remove squares that have |xX| colour stripAnsiCodes
    stripped = string.gsub(stripped,"|%w+|","")

    return stripped
end

-- request_items should be called externally with InventoryList.UpdateItems("inv", (true|false))
-- will call itself recursively to look in containers
-- optional arg is so that the container's name (rather than id number) is used when saving to the array
InventoryList.UpdateItemsLock = InventoryList.UpdateItemsLock or false
function InventoryList.UpdateItems(loc_type, echo, ...)
  if not Connected() then return end
  if gmcp.Char and gmcp.Char.Status and gmcp.Char.Status.level and tonumber(gmcp.Char.Status.level) &gt; 125 then
    if echo then cecho("&lt;red&gt;Inventory Manager doesn't track legendary items\n") end
    return
  end
  -- Will not allow iupdate to be called twice within 10 seconds
  if loc_type == "inv" then
    if InventoryList.UpdateItemsLock then return end
    InventoryList.UpdateItemsLock = true
    tempTimer(10, function() InventoryList.UpdateItemsLock = false end)
  end
  
  local char_name = InventoryList.GetCharName()
  
  InventoryList.Items[char_name] = InventoryList.Items[char_name] or {}
  
  -- Code that will only be run on the parent level call (and not the recursive calls)
  if loc_type == "inv" then
    -- Delete all the saved inventory since we're updating the list (except for lockers)
    for k, _ in pairs(InventoryList.Items[char_name]) do
      if k ~= "locker" then InventoryList.Items[char_name][k] = {} end
    end
    tempTimer(15, function() InventoryList.Save() end) 
  end
    
  coroutine.wrap(function()
    local timeout = 1
    local request = "Char.Items.Inv"
    local tmparray
    local tmpnamearray = {}
    
    assert(loc_type == "inv" or tonumber(loc_type)~= nil, "InventoryList.UpdateItems(): invalid args, should be inv or container id #")

    if tonumber(loc_type)~= nil then 
      request = "Char.Items.Contents " .. loc_type
    end

    repeat
      sendGMCP(request)
      timeout = timeout + 1
      wait(1)
    until (gmcp.Char.Items.List.location == loc_type or timeout &gt;= 10)
    
    if (timeout &gt;= 10) then
      -- Searching containers within containers (eg jeweled scabbard) causes a timeout, assuming mud doesn't allow it
      -- Can also timeout if too many items are in one container
      print("InventoryList.UpdateItems(): timed out after trying " .. timeout .. " times (once per second)" .. (arg.n == 1 and " " .. arg[1] or ""))
      print("InventoryList.UpdateItems(): can happen if too many items are in one container")
      
      
      return false
    else
      tmparray = deepcopy(gmcp.Char.Items.List.items)
      
      -- Remove colour codes from item names
      for _, y in ipairs(tmparray) do
        y.name = RemoveColourCodes(y.name)
      end
      
      -- Game doesn't seem to respond to a request of looking inside of a container that's already insider another container so we won't even try
      if (loc_type == "inv") then -- we'll only look at containers that are in our inventory and open
        if echo then print("Inventory Update: Looking in your inventory") end
        for _, y in ipairs(tmparray) do
          if y.type == "container" and y.state == "open" then
            if echo then print("Inventory Update: Looking in container " .. y.name) end
            InventoryList.UpdateItems(y.id, echo, y.name)
          end   
        end
      end 
      
      -- If we're looking in a bag, arg[1] will be the bag name. Save it to bag_list
      if arg.n == 1 then
        InventoryList.Items._BagNames[loc_type] = arg[1]
        InventoryList.Items[char_name][loc_type] = deepcopy(tmparray)
      else
        InventoryList.Items[char_name][loc_type] = deepcopy(tmparray)
      end
      if echo then print("Inventory Update: Finished updating items in " .. (loc_type == "inv" and "your inventory" or arg[1])) end
      return true
    end
    
  end)()
end

function InventoryList.Search(tbl, search)
  assert(type(search)=="string")
  search = string.lower(search)
  local locations = {}
  for k, v in pairs(tbl) do
    if type(v) == "table" then
      for _, loc in ipairs(InventoryList.Search(v, search)) do
        table.insert(locations, {k, unpack(loc)})
      end
    elseif k == "name" and type(v) == "string" and string.find(string.lower(v), search, 1, true) then
      table.insert(locations, {v})
    end
  end
  return locations
end

function InventoryList.SearchReport(str, exclude_charname)
  local report = InventoryList.Search(InventoryList.Items, str)

  if #report == 0 then
    cecho("&lt;red&gt;No items by that name found!&lt;reset&gt;\n")
    return false
  end

  local exclude_name = exclude_charname and GMCP_name(exclude_charname) or nil

  for _, v in ipairs(report) do
    if not (exclude_name and v[1] == exclude_name) then
      local location = v[2] == "inv" and "inventory" or (v[2] == "locker" and "&lt;blue&gt;Locker&lt;reset&gt;") or ("bag &lt;purple&gt;" .. (InventoryList.Items._BagNames[v[2]] and InventoryList.Items._BagNames[v[2]] or v[2]) .. "&lt;reset&gt;")
      cecho("&lt;white&gt;" .. v[1] .. "&lt;ansi_white&gt; has &lt;yellow&gt;" .. v[4] .. "&lt;ansi_white&gt; in their " .. location .. "\n")
    end
  end

  return true
end

function InventoryList.SearchReportLevel(str, level)
  level = tonumber(level)
  if level == nil or level &lt; 1 or level &gt; 250 then
    cecho("&lt;red&gt;Please choose a level between 1 and 250\n")
    return
  end

  local report = InventoryList.Search(InventoryList.Items, str)
  
  if #report == 0 then
    cecho("&lt;red&gt;No items by that name found!&lt;reset&gt;\n")
    return false
  end
  
  for _, v in ipairs(report) do
    if not AltList.Chars[v[1]] then
      cecho("&lt;red&gt;Please login in with " .. v[1] .. " and run the \"score\" command\n")
    elseif AltList.Chars[v[1]].Level == level then
      local location = v[2] == "inv" and "inventory" or (v[2] == "locker" and "&lt;blue&gt;Locker&lt;reset&gt;") or ("bag &lt;purple&gt;" .. (InventoryList.Items._BagNames[v[2]] and InventoryList.Items._BagNames[v[2]] or v[2]) .. "&lt;reset&gt;")
      cecho("&lt;white&gt;" .. v[1] .. "&lt;ansi_white&gt; has &lt;yellow&gt;" .. v[4] .. "&lt;ansi_white&gt; in their " .. location .. "\n")
    end
  end

end


function InventoryList.QuickSearch(str)
  local report = InventoryList.Search(InventoryList.Items, str)
  
  if #report == 0 then return "" end

  return report[1][1]
end

function InventoryList.CountReport(str, exclude_charname)
  local report = InventoryList.Search(InventoryList.Items, str)
  if #report == 0 then print("No items by that name found!") ; return false end
  
  local exclude_name = exclude_charname and GMCP_name(exclude_charname) or nil

  local count_report = {}

  for _, v in ipairs(report) do
    if not (exclude_name and v[1] == exclude_name) then
      if count_report[v[4]] == nil then
        count_report[v[4]] = 1
      else
        count_report[v[4]] = count_report[v[4]] + 1
      end
    end
  end
  
  for k, v in pairs(count_report) do
    cecho("&lt;white&gt;" .. v .. "&lt;ansi_white&gt; x\t&lt;yellow&gt;" .. k .. "\n")
   end
end

function InventoryList.CountReportLevel(str, level)
  level = tonumber(level)
  if level == nil or level &lt; 1 or level &gt; 250 then
    cecho("&lt;red&gt;Please choose a level between 1 and 250\n")
    return
  end
  
  local report = InventoryList.Search(InventoryList.Items, str)
  if #report == 0 then print("No items by that name found!") ; return false end
  
  local count_report = {}

  for _, v in ipairs(report) do
    if not AltList.Chars[v[1]] then
      cecho("&lt;red&gt;Please login in with " .. v[1] .. " and run the \"score\" command\n")
    elseif AltList.Chars[v[1]].Level == level then
      if count_report[v[4]] == nil then
        count_report[v[4]] = 1
      else
        count_report[v[4]] = count_report[v[4]] + 1
      end
    end
  end
  
  for k, v in pairs(count_report) do
    cecho("&lt;white&gt;" .. v .. "&lt;ansi_white&gt; x\t&lt;yellow&gt;" .. k .. "\n")
   end
end

function InventoryList.HaveItem(str)
  local report = InventoryList.Search(InventoryList.Items, str)
  if #report == 0 then return false else return true end
end

function InventoryList.AddLocker(tbl)
  assert(type(tbl) == "table")
  local char_name = InventoryList.GetCharName()
  InventoryList.Items[char_name]["locker"] = {}
  InventoryList.Items[char_name]["locker"] = deepcopy(tbl)
  InventoryList.Save()
  return true
end

function InventoryList.ReportLockers()
  cecho("&lt;white&gt;Locker Report\n")
  cecho("&lt;white&gt;-----------------------------------------\n")
  
  local total = 0
  local name_list = {}
  for name, _ in pairs(InventoryList.Items) do
    if InventoryList.Items[name].locker and #InventoryList.Items[name].locker &gt; 0 then
      table.insert(name_list, name)
      total = total + 1
    end
  end
  
  table.sort(name_list)
  
  for _, name in ipairs(name_list) do
    colour = "&lt;white&gt;"
    if name == InventoryList.LoginName then
      colour = "&lt;yellow&gt;"
    end
    cecho(colour .. name .. "\n")
  end
  
  cecho("&lt;white&gt;-----------------------------------------\n")
  cecho("&lt;white&gt;Total: " .. total .. "\n")
  cecho("&lt;white&gt;-----------------------------------------\n")

end

function InventoryList.ItemsOnHand(str)
  local report = InventoryList.Search(InventoryList.Items, str)
  return #report
end

local VaultHunter = {
["Orb Of Bravery"] = 5,
["Astral Powder"] = 5,
["Crown of Crystal"] = 2,
["Treaty Of Purity Of Faith"] = 3,
["Amulet of the Cat's Eye"] = 3,
["Green Silken Sarong"] = 3,
["Jade Bracer"] = 1,
["Rod Of The Wicked Rulers"] = 2,
["Necklace Of Severed Fae Ears"] = 2,
["Silver Iguana"] = 1,
["Floating Circle of Books"] = 2,
["Amulet of Guiding Wind"] = 1,
["Orb Of Gith"] = 3,
["Armband Of The Unseen"] = 1,
["Exaltra's Mirror"] = 1,
["Naeadonna's Choker"] = 1,
["Yorimandil's Blindfold"] = 1,
["Sandblasted Emerald"] = 2,
["Majestre's Crop"] = 1

}

function InventoryList.VaultHunter(char_name)
  local tblReport = {{"Item", "Who has it?", "On Hand (Req'd)"}}
  
  local InventorySearchTable = InventoryList.Items
  if char_name and char_name ~= "" and InventoryList.Items[string.lower(char_name):gsub("^%l", string.upper)] then
    InventorySearchTable = InventoryList.Items[string.lower(char_name):gsub("^%l", string.upper)]
  else
    char_name = nil
  end
    

  for item_name, num_reqd in pairs(VaultHunter) do
    local itemsReport = InventoryList.Search(InventorySearchTable, item_name)
    local x = #itemsReport .. " (" .. num_reqd .. ")"

    -- Determine the color based on the required amount
    if #itemsReport  &gt;= num_reqd then
      x = "    &lt;green&gt;" .. x
    else
      x = "    &lt;yellow&gt;" .. x
    end

    if #itemsReport &gt; 0 then
      table.insert(tblReport, {item_name, (char_name and string.lower(char_name):gsub("^%l", string.upper) or itemsReport[1][1]), x})  -- Report the first character who has the item
    else
      table.insert(tblReport, {item_name, "", x})  -- No character has it
    end
  end

  -- Call FormatReportXCol with appropriate arguments, using nil for color
  AltList.FormatReportXCol(3, {-35, -20, -20}, "Vault Hunter Report", tblReport, nil)
end

function InventoryList.ThiefHunter()
  local ThiefHunter = {
    ["glazed gith hide"] = 1,
    ["soft nubuc hide"] = 1,
    ["embossed hide"] = 1,
    ["whole hide of a merman"] = 1,
    ["hide of an unlucky human"] = 1  
  }
  
  local tblReport = {{"Item", "Who has it?", "On Hand (Req'd)"}}

  for item_name, num_reqd in pairs(ThiefHunter) do
    local itemsReport = InventoryList.Search(InventoryList.Items, item_name)
    local x = #itemsReport .. " (" .. num_reqd .. ")"
    
    -- Determine the color based on the required amount
    if #itemsReport &gt;= num_reqd then
      x = "    &lt;green&gt;" .. x
    else
      x = "    &lt;yellow&gt;" .. x
    end
    
    if itemsReport and #itemsReport &gt; 0 then
      table.insert(tblReport, {item_name, itemsReport[1][1], x})
    else
      table.insert(tblReport, {item_name, "", x})
    end
  end

  -- Call FormatReportXCol with appropriate arguments, using nil for color
  AltList.FormatReportXCol(3, {-30, -20, -20}, "Thief Hunter Report", tblReport)
end


function moveItemsBetweenBags(BagOne, BagTwo)
    local BagOne = BagOne or "2.vault"
    local BagTwo = BagTwo or "vault"

    local function moveItem(item, quantity)
        for i = 1, quantity do
            send("get '" .. item .. "' " .. BagOne)
            send("put '" .. item .. "' " .. BagTwo)
        end
    end

    for item_name, quantity in pairs(VaultHunter) do
        local keyword
        if item_name == "Orb Of Bravery" then
            keyword = "bravery"
        elseif item_name == "Orb Of Gith" then
            keyword = "gith"
        elseif item_name == "Amulet of Guiding Wind" then
            keyword = "guiding"
        elseif item_name == "Amulet of the Cat's Eye" then
            keyword = "cat eye"
        elseif item_name == "Silver Iguana" then
            keyword = "silver iguana"
        else
            keyword = string.lower(item_name:match("^([^%s']+)'?"))
        end

        moveItem(keyword, quantity)
    end
end

function turnInTreasureHunter()
  coroutine.wrap(function()   
    for item_name, quantity in pairs(VaultHunter) do
        local keyword
        if item_name == "Orb Of Bravery" then
            keyword = "bravery"
        elseif item_name == "Orb Of Gith" then
            keyword = "gith"
        elseif item_name == "Amulet of Guiding Wind" then
            keyword = "guiding"
        elseif item_name == "Amulet of the Cat's Eye" then
            keyword = "cat"
        else
            keyword = string.lower(item_name:match("^([^%s']+)'?"))
        end
  
        for i = 1, quantity do
          send("give " .. keyword .. " demon")
          wait(5.5)
        end
    end

  end)()
end


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>AltList</name>
					<packageName></packageName>
					<script>-- Mudlet LUA script to track alts and their stats
-- Tracks gold, pracs, QP, insigs, and alleg turn ins

-- + Table and Array Functions: deepcopy(), TableSize()

AltList = AltList or {}
AltList.Chars = AltList.Chars or {}

AltList.TimeZone = AltList.TimeZone or 0
AltList.LoginName = AltList.LoginName or nil


-- Function to save AltList.Chars to AltList.lua
function AltList.Save()
  local location = getMudletHomeDir() .. "/AltList.lua"
  AltList.Chars["AltListTimeZone"] = {}
  AltList.Chars["AltListTimeZone"].TimeZone = AltList.TimeZone
  
  table.save(location, AltList.Chars)
  
  AltList.Chars["AltListTimeZone"] = nil
end

-- Function to load AltList.lua into AltList.Chars
function AltList.Load()
  local location = getMudletHomeDir() .. "/AltList.lua"
  if io.exists(location) then
    table.load(location, AltList.Chars)
    if AltList.Chars["AltListTimeZone"] then
      AltList.TimeZone = AltList.Chars["AltListTimeZone"].TimeZone
      AltList.Chars["AltListTimeZone"] = nil
    end
  end
end

-- Check if AltList is empty, if so, attempt to load it
-- This will be run the first time Mudlet/the profile is opened
if TableSize(AltList.Chars) == 0 then AltList.Load() end


function AltList.GetCharName()
  sendGMCP("Char.Group.List")
  
  if AltList.LoginName then
    return AltList.LoginName
  end
  
  local char_name = string.lower(gmcp.Char.Status.character_name):gsub("^%l", string.upper)

  if char_name == "" then error("gmcp.Char.Status.character_name not returning character name"); return nil end
  
  -- Sometimes gmcp.Char.Status bugs out and requires a relog. We can check this against gmcp.Char.Group.List
  for _,Player in ipairs(gmcp.Char.Group.List) do
    if Player.name == char_name then
      return char_name
    end
  end
  
  cecho("&lt;yellow&gt;Vagonuth-Inventory-Mgmt error: &lt;white&gt;could not get character name, gmcp returning &lt;red&gt;" .. char_name .. "\n")
  cecho("If this is different than the name you logged in with, try reconnecting to AVATAR\n")
  cecho("If your char_name is correct, try running the command again\n\n")
  
  error("gmcp.Char.Status is not matching gmcp.Char.Group")
  return nil
end


AltList.GivenAllegRuby = AltList.GivenAllegRuby or false
AltList.GivenAllegItem = AltList.GivenAllegItem or false

function AltList.PlayerExists(char_name)
  if (AltList.Chars[char_name]==nil) then
    AltList.Chars[char_name] = {}
    AltList.Chars[char_name].Worship = ""
    AltList.Chars[char_name].Devoted = ""
    AltList.Chars[char_name].Gold = 0
    AltList.Chars[char_name].Pracs = 0
    AltList.Chars[char_name].QP = 0
    
    AltList.Chars[char_name].Race = ""
    AltList.Chars[char_name].Class = ""
    AltList.Chars[char_name].Level = 0
    AltList.Chars[char_name].SubLevel = 0
    AltList.Chars[char_name].Max_HP = 0
    AltList.Chars[char_name].Max_MP = 0
    AltList.Chars[char_name].Current_HP = 0
    AltList.Chars[char_name].Current_MP = 0
    AltList.Chars[char_name].HitRoll = 0
    AltList.Chars[char_name].DamRoll= 0
    AltList.Chars[char_name].ArmorClass = 0
    AltList.Chars[char_name].Items = 0
    AltList.Chars[char_name].MaxItems = 0
    AltList.Chars[char_name].Weight = 0
    AltList.Chars[char_name].MaxWeight = 0
    AltList.Chars[char_name].Insigs = {}
    
    AltList.Chars[char_name].Alleg = {}
    AltList.Chars[char_name].Alleg.Insig = ""
    AltList.Chars[char_name].Alleg.Request = ""
    AltList.Chars[char_name].Alleg.Cleared = false
    AltList.Chars[char_name].Alleg.GiveUp = false
    AltList.Chars[char_name].Alleg.LastDate = ""
    
    AltList.Chars[char_name].Spells = {}
    return false
  else
    AltList.UpdateVitals(char_name)
    return true
  end
end

function AltList.UpdateVitals(char_name)
    -- prevent AltList.UpdateInsigs from overwriting Lord insigs with Legend insigs
    if gmcp.Char and gmcp.Char.Status and gmcp.Char.Status.level and tonumber(gmcp.Char.Status.level) &gt; 125 then
      return
    end
    AltList.Chars[char_name].Race = gmcp.Char.Status.race
    AltList.Chars[char_name].Class = gmcp.Char.Status.class
    AltList.Chars[char_name].Level = tonumber(gmcp.Char.Status.level)
    AltList.Chars[char_name].SubLevel = tonumber(gmcp.Char.Status.sublevel)
    AltList.Chars[char_name].Max_HP = tonumber(gmcp.Char.Vitals.maxhp)
    AltList.Chars[char_name].Max_MP = (gmcp.Char.Vitals.maxmp == nil or gmcp.Char.Vitals.maxmp == "0") and 0 or tonumber(gmcp.Char.Vitals.maxmp)
    AltList.Chars[char_name].Current_HP = tonumber(gmcp.Char.Vitals.hp)
    AltList.Chars[char_name].Current_MP = (gmcp.Char.Vitals.maxmp == nil or gmcp.Char.Vitals.maxmp == "0") and 0 or tonumber(gmcp.Char.Vitals.mp)
    AltList.Chars[char_name].HitRoll = tonumber(gmcp.Char.Status.hitroll)
    AltList.Chars[char_name].DamRoll = tonumber(gmcp.Char.Status.damroll)
    AltList.Chars[char_name].ArmorClass = tonumber(gmcp.Char.Status.ac) or 0
    AltList.Chars[char_name].Items = tonumber(gmcp.Char.Vitals.items)
    AltList.Chars[char_name].MaxItems = tonumber(string.sub(gmcp.Char.Vitals.string, -3))
    AltList.Chars[char_name].Weight = tonumber(gmcp.Char.Vitals.wgt)
    AltList.Chars[char_name].MaxWeight = tonumber(gmcp.Char.Vitals.maxwgt)
    AltList.Save()
end


function AltList.UpdateGold(gold)
  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].Gold = tonumber(gold)
  AltList.Save()
end

function AltList.UpdatePracs(pracs)
  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].Pracs = tonumber(pracs)
  AltList.Save()
end

function AltList.UpdateQP(QP, char_name)
  local char_name = char_name or AltList.GetCharName()
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].QP = tonumber(QP)
  AltList.Save()
end

function AltList.UpdateInsigs(tbl_Insigs)
  -- prevent AltList.UpdateInsigs from overwriting Lord insigs with Legend insigs
  if gmcp.Char and gmcp.Char.Status and gmcp.Char.Status.level and tonumber(gmcp.Char.Status.level) &gt; 125 then
    return
  end

  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)  
  
  AltList.Chars[char_name].Insigs = deepcopy(tbl_Insigs)

  for _, insig in ipairs(tbl_Insigs) do
    if insig == "Scratcher" or
       insig == "Busybody" or
       insig == "Deed Doer" or
       insig == "Goto Guy/Gal/Person" or
       insig == "Feat Finisher" or
       insig == "Task Master" then
       
       if AltList.Chars[char_name].Alleg.Insig ~= "" and AltList.Chars[char_name].Alleg.Insig ~= insig then
        -- Alleg promotion!
        VictoryBeep()
        printGameMessage("Alleg!", char_name .. " promoted to " .. insig, "purple", "white")
       end
      AltList.Chars[char_name].Alleg.Insig = insig 
    end
  end
  AltList.Save()
end

function AltList.AllegRecordRequest(alleg_request)
  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].Alleg.Request = alleg_request
  AltList.Chars[char_name].Alleg.LastDate = getServerTime(AltList.TimeZone)
  AltList.Chars[char_name].Alleg.Cleared = false
  AltList.Chars[char_name].Alleg.GiveUp = false
  AltList.Save()
end

function AltList.AllegRecordCleared(char_name)
  if not char_name then char_name = AltList.GetCharName()
  else char_name = string.lower(char_name):gsub("^%l", string.upper) end
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].Alleg.Cleared = true
  AltList.Chars[char_name].Alleg.GiveUp = false
  AltList.Chars[char_name].Alleg.LastDate = getServerTime(AltList.TimeZone)
  AltList.Chars[char_name].Alleg.Request = ""
  AltList.Save()
end

function AltList.AllegRecordGiveUp()
  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)
  AltList.Chars[char_name].Alleg.Cleared = false
  AltList.Chars[char_name].Alleg.GiveUp = true
  AltList.Chars[char_name].Alleg.LastDate = getServerTime(AltList.TimeZone)
  AltList.Chars[char_name].Alleg.Request = ""
  AltList.Save()
end

function AltList.AllegNeeded(BroadcastType)
  local BroadcastType = BroadcastType or "bud"
  local AllegList = {}
  local AllegCounts = {}
  
  for char_name, _ in pairs(AltList.Chars) do
    local request = AltList.Chars[char_name].Alleg.Request
    if request ~= "" and request ~= "Available" then
      if not AllegList[request] then
        AllegList[request] = 1
      else
        AllegList[request] = AllegList[request] + 1
      end
    end
  end

  if TableSize(AllegList) == 0 then cecho("&lt;red&gt;There's no alleg that you need!\n"); return; end

  local AllegNeededMsg = {}
  local AllegNeededIndex = 1
  AllegNeededMsg[AllegNeededIndex] = "Looking for: |BW|"

  for alleg_item, count in pairs(AllegList) do
    local itemText = alleg_item
    if count &gt; 1 then
      itemText = itemText .. " (x" .. count .. ")"
    end
    if (string.len(AllegNeededMsg[AllegNeededIndex]) + string.len(itemText) + 2) &gt; 400 then
      AllegNeededIndex = AllegNeededIndex + 1
      AllegNeededMsg[AllegNeededIndex] = itemText .. " |BY|||BW| "
    else
      AllegNeededMsg[AllegNeededIndex] = AllegNeededMsg[AllegNeededIndex] .. itemText .. " |BY|||BW| "
    end
  end

  for _, msg in ipairs(AllegNeededMsg) do
    send(BroadcastType .. " " .. msg:sub(1, -12) .. ".")
  end
end

function AltList.AllegUpdate(char_name)

    if AltList.Chars[char_name].Alleg.Request == "Available" then return end
    if AltList.Chars[char_name].Alleg.Request == "" and not AltList.Chars[char_name].Alleg.GiveUp and not AltList.Chars[char_name].Alleg.Cleared then return end
      
    local days_since_LastDate = calculateDaysBetweenTimes(AltList.Chars[char_name].Alleg.LastDate, getServerTime(AltList.TimeZone))
    
    if (days_since_LastDate &gt;= 2 and AltList.Chars[char_name].Alleg.GiveUp)
    or (days_since_LastDate &gt;= 1 and AltList.Chars[char_name].Alleg.Cleared) then
        AltList.Chars[char_name].Alleg.GiveUp = false
        AltList.Chars[char_name].Alleg.Cleared = false
        AltList.Chars[char_name].Alleg.LastDate = ""
        AltList.Chars[char_name].Alleg.Request = "Available"
    end
end

function AltList.AllegUpdateAll()
    for char_name,_ in pairs(AltList.Chars) do
      AltList.AllegUpdate(char_name)
    end
    AltList.Save()
end

-- Define a helper function to use the appropriate unpack function based on Lua version
function AltList.SafeUnpack(tbl)
  if table.unpack then
    return table.unpack(tbl) -- Lua 5.2 and later
  else
    return unpack(tbl) -- Lua 5.1 (older versions)
  end
end


function AltList.FormatReportXCol(num_of_columns, tblColSizes, title, tblReport, showCmdColour, totalReport)
  if type(title) ~= "string" or type(tblReport) ~= "table" or type(tblColSizes) ~= "table" or type(num_of_columns) ~= "number" then
    error("Invalid inputs (expected string, number, table, table)")
    return false
  end

  if #tblReport == 0 then
    error("tblReport is empty")
    return
  end

  -- Validate that the number of column sizes matches the number of columns
  if #tblColSizes ~= num_of_columns then
    error("The number of column sizes does not match the specified number of columns")
    return false
  end
  
  local totalColSize = 0

  -- Construct the format string dynamically based on the column sizes
  local lineFormat = "&lt;%s&gt;"
  for i = 1, num_of_columns do
    lineFormat = lineFormat .. "%" .. tblColSizes[i] .. "s"
    tblColSizes[i] = math.abs(tblColSizes[i])
    totalColSize = totalColSize + tblColSizes[i]
  end
  lineFormat = lineFormat .. "\n"

  local lineColour = showCmdColour or "white"

  -- Print the title and separator line
  cecho("&lt;" .. lineColour .. "&gt;" .. title .. "\n")
  cecho("&lt;" .. lineColour .. "&gt;" .. string.rep("-", totalColSize) .. "\n")

  -- Print the report's header (assumes first entry is header row)
  local headerRow = tblReport[1]
  local headerArgs = {}
  for i = 1, num_of_columns do
    headerArgs[#headerArgs + 1] = headerRow[i] or ""
  end
  cecho(string.format(lineFormat, lineColour, AltList.SafeUnpack(headerArgs)))
  table.remove(tblReport, 1)
  cecho("&lt;" .. lineColour .. "&gt;" .. string.rep("-", totalColSize) .. "\n")

  -- Print each row in the report
  for _, row in ipairs(tblReport) do
    if row[1] == AltList.GetCharName() then
      lineColour = "yellow"
    else
      lineColour = showCmdColour or "white"
    end

    -- Prepare the values for each row
    local rowArgs = {}
    for i = 1, num_of_columns do
      rowArgs[#rowArgs + 1] = string.sub(row[i] or "", 1, tblColSizes[i] - 1)
    end

    cecho(string.format(lineFormat, lineColour, AltList.SafeUnpack(rowArgs)))
  end
  
  lineColour = showCmdColour or "white"
  
  if totalReport then
    cecho("&lt;" .. lineColour .. "&gt;" .. string.rep("-", totalColSize) .. "\n")
    cecho(string.format("&lt;%s&gt;%-" .. (totalColSize - tblColSizes[#tblColSizes]) .. "s%" .. tblColSizes[#tblColSizes] .. "s\n", lineColour, "Total:", format_int(totalReport)))
  end

  -- Print the final separator line
  cecho("&lt;" .. lineColour .. "&gt;" .. string.rep("-", totalColSize) .. "\n")
end

function AllegTableSort(a, b)
    -- Custom order for sorting
    local order = {"Task Master", "Feat Finisher", "Goto Guy/Gal/Person", "Deed Doer", "Busybody", "Scratcher", ""}

    local aInsignia = AltList.Chars[a].Alleg.Insig
    local bInsignia = AltList.Chars[b].Alleg.Insig

    -- Get the index of the Insignia values in the custom order
    local aIndex = 0
    local bIndex = 0
    for i, value in ipairs(order) do
        if aInsignia == value then
            aIndex = i
        end
        if bInsignia == value then
            bIndex = i
        end
    end

    return aIndex &lt; bIndex
end

function AltList.ReportAlleg()
  local debug_timer = os.clock()
  AltList.AllegUpdateAll()
  
  local Available = {}
  local Request = {}
  local Tomorrow = {}
  local TwoDays = {}
  
  for char_name,_ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].Level &gt;= 125 then 
      if AltList.Chars[char_name].Alleg.Request == "Available" then 
        table.insert(Available, char_name)
      elseif AltList.Chars[char_name].Alleg.Cleared then
        table.insert(Tomorrow, char_name)
      elseif AltList.Chars[char_name].Alleg.GiveUp then      
        local days_since_LastDate = calculateDaysBetweenTimes(AltList.Chars[char_name].Alleg.LastDate, getServerTime(AltList.TimeZone))
        if days_since_LastDate == 0 then
          table.insert(TwoDays, char_name)
        else
          table.insert(Tomorrow, char_name)
        end
      elseif AltList.Chars[char_name].Alleg.Request ~= "" then
        table.insert(Request, char_name)      
      end
    end
  end
  
  if #Request == 0 and #Available == 0 and #Tomorrow == 0 and #TwoDays == 0 then
    print("No Alleg Report available")
    return
  end
  
  table.sort(Available, AllegTableSort)
  table.sort(Tomorrow, AllegTableSort)
  table.sort(TwoDays, AllegTableSort)
  table.sort(Request, AllegTableSort)
  
  local tblAllegReport = {}
  
  table.insert(tblAllegReport, {"Character", "Alleg Item/Status", "Who has it? (Ttl)", "Insignia"}) 

  if #Request &gt; 0 then
    for _,y in pairs(Request) do
      local item_name = AltList.Chars[y].Alleg.Request
      local item_report = InventoryList.Search(InventoryList.Items, item_name) -- note: adds about 0.25s to processing time when player has 24 items o/s
      if InventoryList.HaveItem(item_name) then
        table.insert(tblAllegReport, {y, item_name, item_report[1][1] .. " (" .. #item_report .. ")" , AltList.Chars[y].Alleg.Insig})
      else
        table.insert(tblAllegReport, {y, item_name, "", AltList.Chars[y].Alleg.Insig})
      end
    end
  end
  if #Available &gt; 0 then
    for _,y in pairs(Available) do
      table.insert(tblAllegReport, {y, "Available", "", AltList.Chars[y].Alleg.Insig})
    end
  end
  if #Tomorrow &gt; 0 then
    for _,y in pairs(Tomorrow) do
      table.insert(tblAllegReport, {y, "Tomorrow " .. (AltList.Chars[y].Alleg.Cleared and "(Cleared)" or "(Give Up)"), "", AltList.Chars[y].Alleg.Insig})
    end
  end
  if #TwoDays &gt; 0 then
    for _,y in pairs(TwoDays) do
      table.insert(tblAllegReport, {y, "Two Days (Give Up)", "", AltList.Chars[y].Alleg.Insig})
    end
  end
  
  AltList.FormatReportXCol(4, {-20, -35, -20, -20}, "Alleg Report", tblAllegReport)
  if #Available &gt; 0 then cecho("&lt;white&gt;" .. #Available .. " alts available to turn in rubies\n") end
    if GlobalVar.Debug then
    printMessage("DEBUG", string.format("AltList.ReportAlleg() ran in %.2f seconds (with %d items)\n", (os.clock() - debug_timer), #Request))
  end
  
end

function AltList.ReportNextAvailableAlleg()
  AltList.AllegUpdateAll()
  
  local Available = {}
  
  for char_name,_ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].Level == 125 and AltList.Chars[char_name].Alleg.Request == "Available" and char_name ~= AltList.GetCharName() then 
        table.insert(Available, char_name)
    end
  end
  
  table.sort(Available, AllegTableSort)

  if #Available == 0 then
    printMessage("Alleg", "Completed on all characters", "yellow", "white")
  else
    printMessage("Alleg", "Next available character: " .. Available[1], "yellow", "white")
  end
end

function AltList.ReportGold()
  local tblCharReport = {}
  local totalGold = 0
  
  -- Collect characters with gold and sum up the total
  for char_name, _ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].Gold &gt; 0 then
      table.insert(tblCharReport, {char_name, AltList.Chars[char_name].Gold})
      totalGold = totalGold + AltList.Chars[char_name].Gold
    end
  end
  
  -- Sort characters by gold amount in descending order
  table.sort(tblCharReport, function(a, b) return a[2] &gt; b[2] end)
  
  for _,tblChar in pairs(tblCharReport) do
    tblChar[2] = format_int(tblChar[2])
  end
  
  -- Add a header row
  table.insert(tblCharReport, 1, {"Character", "Gold"})
  
  -- Call the formatting function with 2 columns, each of width 20
  AltList.FormatReportXCol(2, {-20, 20}, "Gold Report", tblCharReport, nil, totalGold)
end

function AltList.ReportQP()
  local tblCharReport = {}
  local totalQP = 0

  -- Collect characters with QP and sum up the total
  for char_name, _ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].QP &gt; 0 then
      table.insert(tblCharReport, {char_name, AltList.Chars[char_name].QP})
      totalQP = totalQP + AltList.Chars[char_name].QP
    end
  end

  -- Sort characters by QP in descending order
  table.sort(tblCharReport, function(a, b) return a[2] &gt; b[2] end)
  table.insert(tblCharReport, 1, {"Character/Token", "QP"})

  -- Define the token denominations
  local QPtoken_denom = {
    {"QuestPoint Token (1QP)", 1},
    {"QuestPoint Token (2QP)", 2},
    {"QuestPoint Token (3QP)", 3},
    {"QuestPoint Token (4QP)", 4},
    {"QuestPoint Token (5QP)", 5},
    {"QuestPoint Token (10QP)", 10},
    {"QuestPoint Token (20QP)", 20},
    {"QuestPoint Token (30QP)", 30},
    {"Fae Rune For 'Pain'", 5},
    {"Fae Rune For 'Insanity'", 5},
    {"Fae Rune For 'Fire'", 5},
    {"Fae Rune For 'Disease'", 5},
    {"Fae Rune For 'Despair'", 10},
    {"Fae Rune For 'Enslavement'", 12},
    {"Fae Rune For 'Destruction'", 12},
    {"Orderly Dragon Scale", 5},
  }

  -- Collect token information and add to the report
  for _, token_tbl in pairs(QPtoken_denom) do 
    local QPtoken_name = token_tbl[1]
    local denom = token_tbl[2]
    local QPtoken = InventoryList.ItemsOnHand(QPtoken_name)
    
    if QPtoken &gt; 0 then
      table.insert(tblCharReport, {QPtoken_name .. " x " .. QPtoken, QPtoken * denom})
      totalQP = totalQP + QPtoken * denom
    end
  end

  -- Call the report formatting function with 2 columns and the total QP
  AltList.FormatReportXCol(2, {-30, 10}, "QuestPoints (QP)", tblCharReport, nil, totalQP)
end

function AltList.ReportRegen(level)
  local tblCharReport = {}
  local tempReport = {} -- Temporary table to store character data and missing mana percentage

  assert(level &gt; 0 and (level == 250 or level == 125 or level &lt;= 51))

  for char_name, _ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].Level == level then 
      if AltList.Chars[char_name].Current_HP and AltList.Chars[char_name].Current_MP then
        local current_HP = AltList.Chars[char_name].Current_HP
        local max_HP = AltList.Chars[char_name].Max_HP
        local current_MP = AltList.Chars[char_name].Current_MP
        local max_MP = AltList.Chars[char_name].Max_MP

        -- Check if HP or MP is less than 90%
        if (current_HP / max_HP &lt; 0.9 or current_MP / max_MP &lt; 0.9) then
          local hp_report = current_HP .. "/" .. max_HP
          local mp_report = current_MP .. "/" .. max_MP
          local missing_mana_percentage = (max_MP - current_MP) / max_MP
          table.insert(tempReport, {char_name, hp_report, mp_report, missing_mana_percentage})
        end
      end
    end
  end

  -- Sort tempReport in descending order of missing mana percentage
  table.sort(tempReport, function(a, b) return a[4] &gt; b[4] end)

  -- Insert sorted data into tblCharReport
  for _, report in ipairs(tempReport) do
    table.insert(tblCharReport, {report[1], report[2], report[3]})
  end

  -- Add header to the report
  table.insert(tblCharReport, 1, {"Character", "Hit Points", "Mana"})

  -- Call the format function with the new format specifications
  AltList.FormatReportXCol(3, {-20, -20, -20}, "Regen Report (Level: " .. level .. ")", tblCharReport)
end

function AltList.ReportInsig()
  local tblCharReport = {}

  local InsigCount = {
    ["Scratcher"] = 0,
    ["Busybody"] = 0,
    ["Deed Doer"] = 0,
    ["Goto Guy/Gal/Person"] = 0,
    ["Feat Finisher"] = 0,
    ["Task Master"] = 0,
  }
  
  local TotalCount = 0

  -- Count the insignias for characters at level 125
  for char_name, _ in pairs(AltList.Chars) do
    if AltList.Chars[char_name].Level == 125 then
      for _, insig in ipairs(AltList.Chars[char_name].Insigs) do
        if InsigCount[insig] ~= nil then
          InsigCount[insig] = InsigCount[insig] + 1
          TotalCount = TotalCount + 1
        end
      end
    end
  end
  
  if TotalCount == 0 then
    printMessage("Insig Report", "No alts with alleg insigs are tracked. Try logging in with each alt and typing 'insig' once")
    return
  end

  -- Collect insignia counts into the report
  for _, insig in ipairs({"Scratcher", "Busybody", "Deed Doer", "Goto Guy/Gal/Person", "Feat Finisher", "Task Master"}) do
    local count = InsigCount[insig]
    if count &gt; 0 then
      table.insert(tblCharReport, {insig, count})
    end
  end

  -- Add header to the report
  table.insert(tblCharReport, 1, {"Alleg Level", "Quantity"})

  -- Call the format function with the new format specifications
  AltList.FormatReportXCol(2, {-20, 20}, "Alleg Insig Report", tblCharReport, nil, TotalCount)
end

function AltList.ReportInventorySpace(top_x)
  -- inspired by sumnissan's lack of inventory management
  top_x = top_x or 5
  
  -- ensure that top_x is a number
  if type(top_x) ~= "number" then
    error("AltList.ReportInventorySpace(top_x): top_x must be a number")
    return false
  end

  local tblCharReportHero = {} -- for characters Level 51
  local tblCharReportLord = {} -- for characters Level 125

  for char_name, _ in pairs(AltList.Chars) do
    local freeItems = AltList.Chars[char_name].MaxItems - AltList.Chars[char_name].Items
    local freeWeight = AltList.Chars[char_name].MaxWeight - AltList.Chars[char_name].Weight
    local level = AltList.Chars[char_name].Level

    if level == 51 then
      table.insert(tblCharReportHero, {char_name, freeWeight, freeItems})
    elseif level == 125 then
      table.insert(tblCharReportLord, {char_name, freeWeight, freeItems})
    end
  end

  -- Determine if reverse sort is needed
  local ascending = top_x &lt; 0
  top_x = math.abs(top_x)  -- Convert top_x to positive for sorting
  
  -- Sort the tables based on free weight
  if ascending then 
    table.sort(tblCharReportHero, function(a, b) return a[2] &lt; b[2] end)
    table.sort(tblCharReportLord, function(a, b) return a[2] &lt; b[2] end)
  else
    table.sort(tblCharReportHero, function(a, b) return a[2] &gt; b[2] end)
    table.sort(tblCharReportLord, function(a, b) return a[2] &gt; b[2] end)
  end

  
  -- Trim the reports to top_x
  while #tblCharReportHero &gt; top_x + 1 do
    table.remove(tblCharReportHero)
  end

  while #tblCharReportLord &gt; top_x + 1 do
    table.remove(tblCharReportLord)
  end

  -- Add headers
  table.insert(tblCharReportHero, 1, {"Heroes", "Free Weight", "Free Items"})
  table.insert(tblCharReportLord, 1, {"Lords", "Free Weight", "Free Items"})

  if #tblCharReportLord == 1 and #tblCharReportHero == 1 then
    printMessage("Inventory Space Report Error", "You have no lords or heroes on your altlist. Try logging in with your other alts first")
    return
  end
  
  -- Print the inventory space report using the new format
  cecho("\n&lt;white&gt;Inventory Space Report")
  if #tblCharReportLord &gt; 1 then
    AltList.FormatReportXCol(3, {-20, 15, 15}, " ", tblCharReportLord) 
  end
  if #tblCharReportHero &gt; 1 then
    AltList.FormatReportXCol(3, {-20, 15, 15}, " ", tblCharReportHero) 
  end
end

function AltList.UpdateWorship(worship, devoted)
  local char_name = AltList.GetCharName()
  AltList.PlayerExists(char_name)
  
  AltList.Chars[char_name].Worship = worship
  AltList.Chars[char_name].Devoted = devoted
end

function GetSpellLagMod()
  local char_name = AltList.GetCharName()
  -- If we don't know our worship, just return 1 as the modifier
  if AltList.Chars[char_name] == nil or AltList.Chars[char_name].Worship == nil then send("score",false); return 1 end
  
  if AltList.Chars[char_name].Worship == "Durr" or
     AltList.Chars[char_name].Worship == "Quixoltan" or
     AltList.Chars[char_name].Worship == "Kra" then
      return 1.1
  elseif AltList.Chars[char_name].Worship == "Shizaga" then
    return 0.8
  else  
    return 1
  end
end

function GetSpellCostModWorship()
  local char_name = AltList.GetCharName()
  -- If we don't know our worship, just return 1 as the modifier
  if AltList.Chars[char_name] == nil or AltList.Chars[char_name].Worship == nil then send("score",false); return 1 end
  
  if AltList.Chars[char_name].Worship == "Bhyss" then return 0.9 end
  
  if AltList.Chars[char_name].Worship == "Gorn" or
     AltList.Chars[char_name].Worship == "Quixoltan" then return 1.05 end
     
  if AltList.Chars[char_name].Worship == "Shizaga" then return 0.95 end
  
  if AltList.Chars[char_name].Worship == "Tor" or
     AltList.Chars[char_name].Worship == "Werredan" then return 1.1 end

  return 1

end

function GetSpellCostModRacial(race, type)
    local racial mod = 1
    race = string.lower(race)
  
    if not (type == "arcane" or type == "divine" or type == "psionic") then
      pdebug("ERROR: GetSpellCostModRacial(type): type must be one of arcane, divine or psionic")
      error("GetSpellCostModRacial(type): type must be one of arcane, divine or psionic")
    end
    
    if (race == string.lower("Centaur")) then
        if type == "arcane" then racialmod = 0.9 end
        if type == "divine" then racialmod = 0.85 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Deep Gnome")) then
        if type == "arcane" then racialmod = 0.93 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 0.95 end
    elseif (race == string.lower("Draconian")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 0.95 end
    elseif (race == string.lower("Drow")) then
        if type == "arcane" then racialmod = 0.88 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Duergar")) then
        if type == "arcane" then racialmod = 1.1; print("Please confirm value for Duergar with alias: spellcostcheck") end
        if type == "divine" then racialmod = 0.98; print("Please confirm value for Duergar with alias: spellcostcheck")  end
        if type == "psionic" then racialmod = 1.02; print("Please confirm value for Duergar with alias: spellcostcheck")  end
    elseif (race == string.lower("Dwarf")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 1.06 end
    elseif (race == string.lower("Elf")) then
        if type == "arcane" then racialmod = 0.88 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Ent")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 0.8 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Firedrake")) then
        if (tonumber(gmcp.Char.Status.level) &gt; 51 or tonumber(gmcp.Char.Status.sublevel) &gt; 250) then racialmod = 0.98 else racialmod = 1 end
    elseif (race == string.lower("Gargoyle")) then
        if type == "arcane" then racialmod = 0.85 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Giant")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1.1 end
        if type == "psionic" then racialmod = 1.1 end
    elseif (race == string.lower("Gnome")) then
        if type == "arcane" then racialmod = 0.93 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 0.95 end
    elseif (race == string.lower("Goblin")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1.1 end
        if type == "psionic" then racialmod = 1.1 end
    elseif (race == string.lower("Halfling")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Half-Elf")) then
        if type == "arcane" then racialmod = 0.94 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 0.95 end
    elseif (race == string.lower("Half-Orc")) then
        if type == "arcane" then racialmod = 1.05 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1.05 end
    elseif (race == string.lower("Harpy")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1.15 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Human")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Imp")) then
        if type == "arcane" then racialmod = 1; print("Please confirm value for Imp with alias: spellcostcheck") end
        if type == "divine" then racialmod = 1; print("Please confirm value for Imp with alias: spellcostcheck") end
        if type == "psionic" then racialmod = 1; print("Please confirm value for Imp with alias: spellcostcheck") end
    elseif (race == string.lower("Kobold")) then
        if type == "arcane" then racialmod = 1.3 end
        if type == "divine" then racialmod = 1.3 end
        if type == "psionic" then racialmod = 1.3 end
    elseif (race == string.lower("Kzinti")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Lizard Man")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 0.95 end
    elseif (race == string.lower("Ogre")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1.1 end
    elseif (race == string.lower("Orc")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1.1 end
    elseif (race == string.lower("Troglodyte")) then
        if type == "arcane" then racialmod = 1.25 end
        if type == "divine" then racialmod = 1.25 end
        if type == "psionic" then racialmod = 1.225 end
    elseif (race == string.lower("Demonseed")) then
        if type == "arcane" then racialmod = 0.87 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Dragon")) then
        if type == "arcane" then racialmod = 0.9 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.85 end
    elseif (race == string.lower("Drider")) then
        if type == "arcane" then racialmod = 0.98 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("Gith")) then
        if type == "arcane" then racialmod = 0.95 end
        if type == "divine" then racialmod = 0.95 end
        if type == "psionic" then racialmod = 0.83 end
    elseif (race == string.lower("Golem")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1.1 end
        if type == "psionic" then racialmod = 1.1 end
    elseif (race == string.lower("Griffon")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 1 end
    elseif (race == string.lower("High Elf")) then
        if type == "arcane" then racialmod = 0.85 end
        if type == "divine" then racialmod = 0.85 end
        if type == "psionic" then racialmod = 0.8 end
    elseif (race == string.lower("Hobgoblin")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1.1 end
        if type == "psionic" then racialmod = 1.05 end
    elseif (race == string.lower("Ignatur")) then
        if type == "arcane" then racialmod = 0.92 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 0.96 end
    elseif (race == string.lower("Minotaur")) then
        if type == "arcane" then racialmod = 1.25 end
        if type == "divine" then racialmod = 1.15 end
        if type == "psionic" then racialmod = 1.25 end
    elseif (race == string.lower("Miraar")) then
        if type == "arcane" then racialmod = 1 end
        if type == "divine" then racialmod = 1 end
        if type == "psionic" then racialmod = 0.9 end
    elseif (race == string.lower("Sprite")) then
        if type == "arcane" then racialmod = 0.75 end
        if type == "divine" then racialmod = 0.75 end
        if type == "psionic" then racialmod = 0.75 end
    elseif (race == string.lower("Troll")) then
        if type == "arcane" then racialmod = 1.1 end
        if type == "divine" then racialmod = 1.15 end
        if type == "psionic" then racialmod = 1.15 end
    elseif (race == string.lower("Tuataur")) then
        if type == "arcane" then racialmod = 0.9 end
        if type == "divine" then racialmod = 0.9 end
        if type == "psionic" then racialmod = 0.8 end
    else
      error("Unknown race: " .. race)
      return -1     
    end
    
    return racialmod
  
end


function GetSpellCostMod(type)

  local classmod = 1
    
  if (gmcp.Char.Status.class == "Druid") then classmod = 0.85 end
  
  return GetSpellCostModRacial(gmcp.Char.Status.race,type) * GetSpellCostModWorship() * classmod
  
end


function GetSkillLagMod()
  return 1
end

-- AltList.TriggerWorship = AltList.TriggerWorship or nil
--if AltList.TriggerWorship then
--  killTrigger(AltList.TriggerWorship )
--end

--AltList.TriggerWorship = tempRegexTrigger("^You are \d+ years old \(\d+ real life hours?\) and a (?&lt;devoted&gt;devoted worshipper|worshipper) of (?&lt;worship&gt;.*).$", [[AltList.UpdateWorship(matches.worship, (matches.devoted == "devoted worshipper" and true or false))]]) </script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>New script</name>
					<packageName></packageName>
					<script>


</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Vagonuth-Package</name>
			<packageName>Vagonuth-Package</packageName>
			<script></script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Base Package</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>README</name>
					<packageName></packageName>
					<script>-- Vagonuth Package for AVATAR MUD (avatar.outland.org:3000)
-- README FILE
-- Installed with: lua installPackage("https://github.com/raretypeoffox/vagonuth-package/releases/latest/download/Vagonuth-Package.mpackage")


-- *** MDAY TIPS ***

-- By default, alts will try to put alleg looted into a bag with the keyword alleg.
-- This behaviour can be changed in Item Pickup Trigger -- TODO: change to a static variable

-- *** Preaching ***

-- if you'd like to have specific characters on your altlist do certain actions on preachup
-- add an entry for that character in CustomPreachup in the PreachUp script

-- *** Code Customization ***
-- This package auto-updates thus try not to edit the code in the package directly
-- but rather extend through your own triggers/aliases/scripts kept outside of the
-- Vagonuth folders. If you find any bugs that you'd like fixed in the main package,
-- please reach out to Vagonuth/Xykoi/Olodagh on AVATAR or raretypeoffox on Discord.

-- *** Code Customization -- Events ***
-- This package raises custom events that allows you to run code in your own scripts
-- on certain events without having to edit the package code directly. Events you can
-- use include:

-- "CustomProfileInit" -- called 5 seconds after you login. Good for setting up initial variables
-- "CustomGameLoop" -- called continously every 5 seconds. Good for checking StatTable variables
-- "OnMobDeath" -- called whenever a mob dies
-- "OnPreachUp" -- called when a group leader preaches up the group
-- "OnQuit" -- called whenever the player types quit to leave the game
-- "OnCombat" -- called when you enter a fight
-- "EndCombat" -- called when you end the fight
-- "OnLevel" -- called when you level


-- To have your function ExampleFunction() called on one of these events, simply add the following
-- line of code to the end of your script (replacing "CustomGameLoop" with whichever event)

-- safeEventHandler("ExampleFunctionEventID", "CustomGameLoop", "ExampleFunction", false)


-- *** Useful Global Variables ***
-- Battle.Combat -- returns true if in combat, otherwise false
-- StatTable.XXX -- table containing many of your core stats and affects, see script GMCP_Vitals
-- StatTable.Position -- string that contains your position, eg "Sleep", "Stand"
-- GlobalVar.GroupMates -- table containing all your groupmates and their vitals
                        -- you can also use this function: IsGroupMate(groupie_name) (boolean)
-- Battle.Combat -- boolean, true is in combat, otherwise false


-- *** Useful Functions ***

-- GMCP_name(char_name) -- input a characters name, will return their name in GMCP's format
                        -- ie, first letter capitalized only, eg: Vagonuth
                        -- useful for standardizing how you use names in your code
                        
-- printGameMessage(title, message, colour, colour_message)
                        -- prints a message in the bottom right corner window
                        -- used to display status messages
                        -- colour_message is optional
                        
-- beep()               -- Used to play a quick sound to alert you
-- QuickBeep()

-- Grouped()                 -- returns true if grouped, otherwise false 
-- GroupLeader()             -- returns true if you are the group leader, otherwise false
-- IsGroupMate(groupie_name) -- return true if group_name is a player in our group
-- IsGroupLeader(groupie_name) -- returns true if "groupie_name" is the the group leader, otherwise false

-- SafeArea()           -- returns true if Sanctum or Thorngate

-- TryAction(action, wait) -- will attempt an action only if the action hasn't already been tried in the current wait period
                           -- e.g. TryAction("racial revival", 10)
                           
-- Safe Mudlet Functions will handle keeping tracking of all your temp triggers, events, timers and events
      -- safeTempTimer(id, time, func, repeating)
      -- safeKillTimer(id)
      -- safeEventHandler(id, event_name, func, one_shot)
      -- safeKillEventHandler(id)
      -- safeTempTrigger(id, pattern, func, triggerType, expireAfter)
      -- safeKillTrigger(id)
      -- safeTempAlias(id, pattern, func)
      -- safeKillAlias(id)

-- *** Scripts Overview ***

-- Below is a summary of the scripts in this package and what they do.
-- The most important scripts are:
-- Init GlobalVars
-- GMCP Vitals
-- GMCP Group
-- GameLoop
-- Vagonuth GUI Package
-- Battle.Init
-- OnMobDeath

-- *Overview*
-- Events:
-- gmcp.Char.Status / Vitals update -&gt; calls GMCP_Vitals() -&gt; updates GUI with UpdateGUI()
-- gmcp.Char.Group update -&gt; calls GMCP_Group() -&gt; updates GUI with UpdateGroupGUI()

-- Loops:
-- every 5 seconds, call GameLoop() -&gt; if in combat, call GameLoopClass() and GameLoopRace()
-- On the start of combat, call Battle.OnCombat() -&gt; starts Battle.Act() loop until combat ends
------ if autocasting, calls: Battle.AutoCast() / if autohealing, calls: Battle.AutoHeal()


-- * Profile Startup (Init GlobalVars) *

-- All Mudlet and first login of a character startup/init is done in "Init GlobalVars"
-- this script will load our GlobalVar table (via Init.GlobalVars()) which contains most of our global config
-- variables. It also calls Init.Profile() five seconds after you login with a new char. This function
-- sets up all your character specific variables (eg autocast for mages, autoheal for clerics, etc). Any
-- default race/class behaviour you want to setup should be done here.

-- * The Helper Scripts (the other scripts unders Priority Scripts) *
-- These scripts contain a number of useful functions that are used throughout the package.
-- SafeMudlet: provides a way to track and kill all the tempTriggers, tempTimers and temp events
--             generally recommended to use this for all your temps, ie, safeTempTrigger not tempTrigger
-- General: formatting functions, string parsing, etc.
-- Table and Array:  often used functions for working with tables and arrays. Note that if you assign a
--                   variable to an existing array in lua, this will only be a reference not a copy.
--                   When copy tables/arrays, especially when they themselves contain tables/arrays, use deepcopy()
-- Static variables: constant variables, user can edit these
-- Game functions: misc general game helper functions
-- TryAction: allows you to attempt an action once every X seconds, useful to prevent spamming commands
--            generally when sending a command off a trigger, you should use TryAction("command", 5) (eg once every 5 secs max)

-- *Support Packages*
-- Written by others
-- Cross Profile Communication (CPC): allows you to send commands to other profile windows on MDAY, type "#help" for details
-- Wait: provides the ability to wait during a script, see "2s" trigger for an example on how it works

-- *GMCP*
-- GMCP_Vitals: this script is event driven, eg, it'll run everytime the server sends gmcp.Char.Status or gmcp.Char.Vitals
--              the function that's called on event will set up the important StatTable table, which tracks all of our
--              characters current stats that we use throughout this package (eg, hp, mana).
--              The AffectsLookup table contains all the spells/affects affecting us (eg what you see when you type "aff" in game)
--              If you want a new StatTable affects var, simply add it to the table, eg for StatTable.Sanctuary, add:
--              ["Spell: sanctuary"] = "Sanctuary"
-- GMCP_Group:  this script is event driven on gmcp.Char.Group.List, which we request every 5 seconds from the server via a timer
--              it updates the GUI, GlobalVar.GroupMates[] (used many places), sets up any PSI triggers and finds the lowest health
--              group member (used by cleric types to autoheal / viz to monitor)
-- GMCP_Room:   minor script called on event gmcp.Room.Info

-- *GameLoop*
-- Important script that runs every 5 seconds. Manages all the race / class actions that aren't based on triggers
-- examples include tanks switch stances, blds switching dances, troll autorevive, priest out of combat stuff
-- if you want to add new class/race logic, add it to GameLoopClass or GameLoopRace -- note these are only called when in combat
-- if you need out of combat logic, add it to GameLoop

-- *Vagonuth GUI Package*
-- Avatar Layout: sets the main layout for the GUI, including the main window, group window, status window, chat windows, etc
-- Layout Update: updates all the labels in the GUI, called by GameLoop every 5 seconds
--                add custome Race/Class labels using the setNextAvailableLabel* functions
-- Group Update:  updates the group window, called by GMCP_Group every 5 seconds (assuming we recv gmcp.Char.Group.List)

-- *Vagonuth Additional Packages*
-- AutoEnchant: autoenchant script, see script for details
-- AutoCast: logic for auto swapping between single and AoE spells, extra logic for lord wzd sig spell
-- BattleScript: important script that manages all the combat, autocast and autoheal logic
-- OnMobDeath: processes the OnMobDeath queue (eg spells and skills used after killing a mob, like sanc)
-- AutoRescue: autorescue script
-- AutoTarget: autotarget script, including target exclusions
-- CheckMissing: check for missing groupmates
-- Damage Counter: combat damage counter
-- RunsStats: run / xp tracker
-- Battle Tracker: track how many mobs you're fighting for GUI and paladin rescue purposes
-- PreachUp Script: logic for getting spells from bots / self spelling during preachup
-- Online Players: keeps a table of all players online in GlobalVar.OnlinePlayers
-- MobListUpdate: tracks all the mobs you see and saves to MobList
-- GroupOrder script: automates group ordering when you're leading and preachup
-- AutoEquip Blindfold: script for managing Psi's yorimandil's blindfold
-- Psi Weapon Triggers: script for picking up your own/others psi weapons
-- Direction Script: tracks which way you've been moving (handy for maxes - alias showdirs)
-- Tank Direction Trigger script: implements gtell &lt;yourname&gt; &lt;dir&gt; by leader when running a tank
-- AutoLotto - lotto bot script
-- Alpha scripts - scripts still being worked on
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CHANGELOG</name>
					<packageName></packageName>
					<script>-- Vagonuth AVATAR Package Change Log


-- v1.0.0
-- initial release

-- v1.0.1
-- added: repinsig, repinv

-- v1.0.2
-- added: AutoLotto
-- added: ShapeSorting descriptions
-- added: special ammo rotation fletching (alpha)
-- updated: "runstats" cmd now shows all character's level gains during the session
-- bug fixes: wizsig spell
-- fixed autocastspellswap for hero

-- v1.0.3
-- added: add pantheon spells to be autocasted (eg panth glorious)
-- added: kin for kinetic enhancer spells
-- added: autoviolate for sorcerers (eg autoviolate cross)
-- added: explaination of code to README
-- added: glares and snarls trigger
-- added: autofrenzy on/off (overwrites the default)
-- added: palrescue on/off (default on)
-- updated: pantheon now has a grimharvest counter
-- updated: skillstyle moved to autoskill (eg autoskill smash)
-- updated: Psi Triggers now updated from github with option to add local triggers
-- updated: alleg descriptions now represent rarity (how often they appear in lotto)
-- Fixed bug: Battle.AutoCast etc, when getting spell cost reduction, check to see if AltList exists first
-- Fixed bug: Groups now support more than 32 players (however only StaticVars.MaxGroupLabels (default: 32) players will appear in grouplist)
-- Fixed bug: auto pass / bag alleg now checks to see if Alleg Script exists first
-- WIP: improved lord psi triggers (eg preventing enemy gravitas)

-- v1.1.0
-- significant improvement to lord monks (qi, preachup, gameloop)
-- improvements to mnd (psyphon, expanded decept list)
-- added: drider autopoison/expunge
-- added: verbose (on|off) - turns on/off extra messages to GameMessage
-- update: monitor no longer switches on preachup if you're already monitoring someone
-- update: classes that can self spell certain spells (bark, steel) now do so on mday
-- update: pantheon, unholy rampage now works like grim harvest
-- minor update: minor optimization to gmcp updates
-- minor update: autoheal ON/OFF now shows where "Qi" label used to be (for healer types)
-- minor update: added gulch keys
-- minor update: psi's now try to shatter forcefields
-- minor update: alleg/junk now passed/dropped on rc
-- minor update: alleg now picked up when decept causes mob to drop it
-- minor update: added hive mind to layout/preachup
-- minor update: tweaked autofrenzy logic
-- minor update: additional game messages
-- bug fix: alias formatting when there's args
-- bug fix: mnd was over surging
-- bug fix: hellbreach tokens are now touched again

-- v1.1.1 hotfix
-- fixed monk not kicking before flow up
-- fixed psi trigger download
-- fixed overoptimization of gmcp updates
-- fixed rapture bug for low hero psi's
-- removed healing outside of combat (prs test feature)

-- v1.2.0
-- full rewrite of bladedancer dance patterns, users can build custom dance patterns now
-- added: dancepattern and nextstance
-- added "dropjunk" (or "dj") command to quickly clean inventory
-- added mday leader gtell commands "get X Y", "drop X Y", "ablut", "wear all" etc. (only work on mday)
-- added GlobalVar.PlaneName
-- added gt track &lt;x&gt;, if char as autotrack echo on, will track X on leaders command
-- added auto spell switching when lords swap between mid and lord plane
-- improved soldier gameloop (stance shifting at hero and lord)
-- improved immo (moved to gmcp for better keyword targetting / consistency)
-- added auto devour for dragons (based on immo list)
-- bug fix: autolotto wasn't handing out last item
-- bug fix: improved migraine trigger for when dealing with multiple migraines
-- minor fix: changed beckon trigger to not autofollow outside of mday
-- minor fix: added bzk to be included in "ar auto"
-- minor fix: wrt "ar auto" at hero, bld's and small warrior types (&lt; 2500hp) are now auto added to AR
-- minor fix: repvault and repthief now report # of complete sets you have





-- Long-term Todo
-- customizable variables
-- keep custom variables outside of main package so not overwritten when updated
-- have a script create a script outside of main package on first installation
-- python script to convert between .lua and .xml
-- make scan while move client side alias
-- inprogress: make list of mobs with weapon for decept / shatter (mnk)

-- BUGS:
-- 

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="no" isFolder="no">
					<name>VagoInstall</name>
					<packageName></packageName>
					<script>
VagoPackage = VagoPackage or {}
VagoPackage.Version = "v1.2.0"
VagoPackage.OnlinePath = "https://github.com/raretypeoffox/vagonuth-package/releases/latest/download/"
VagoPackage.OnlineVersionFile = "https://raw.githubusercontent.com/raretypeoffox/vagonuth-package/main/versions.lua"
VagoPackage.ProfileName = getProfileName():lower()
VagoPackage.DownloadPath = getMudletHomeDir().."/vagonuth-package/"
VagoPackage.Downloading = false

function VagoPackage:DownloadVersionFile()
    if not io.exists(VagoPackage.DownloadPath) then lfs.mkdir(VagoPackage.DownloadPath) end
    local filename = "versions.lua"
    VagoPackage.Downloading=true
    downloadFile(VagoPackage.DownloadPath .. filename, VagoPackage.OnlineVersionFile)
end

function VagoPackage:CheckVersion()
    local path = VagoPackage.DownloadPath .. "versions.lua"
    local versions = {}
    table.load(path, versions)
    local pos = table.index_of(versions, VagoPackage.Version) or 0
    local line = ""
    if pos ~= #versions then
        if GlobalVar and GlobalVar.DownloadMessage == pos then
          return
        else
          cecho("&lt;white&gt;Newer version of Vagonuth AVATAR Package available\n")
          cecho("&lt;white&gt;Type the command &lt;yellow&gt;download &lt;white&gt;to update\n")
          GlobalVar.DownloadMessage = pos
        end
      end
end

function VagoPackage:UpdateVersion()
    if VagoPackage.downloadFileHandler then
        killAnonymousEventHandler(VagoPackage.downloadFileHandler)
    end
    if table.contains(getPackages(),"Vagonuth-Package") then
        uninstallPackage("Vagonuth-Package")
      end
    installPackage(VagoPackage.OnlinePath .. "Vagonuth-Package.mpackage")
end

function VagoPackage:onFileDownloaded(event, ...)
    if event == "sysDownloadDone" and VagoPackage.Downloading then
        local file = arg[1]
        if string.ends(file,"/versions.lua") then
            VagoPackage.Downloading=false
            VagoPackage:CheckVersion()
        end
    end
end

VagoPackage.downloadFileHandler = VagoPackage.downloadFileHandler or nil

if VagoPackage.downloadFileHandler then
    killAnonymousEventHandler(VagoPackage.downloadFileHandler)
end

VagoPackage.downloadFileHandler = registerAnonymousEventHandler("sysDownloadDone","VagoPackage:onFileDownloaded")

tempTimer(2, [[VagoPackage.DownloadVersionFile()]])



</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Priority Scripts</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Init GlobalVars</name>
						<packageName></packageName>
						<script>-- Initialization Script
-- Sets up all the Global Vars we'll be using throughout the various modules
-- Upon loading up Mudlet / this Profile, scripts are first run from top to bottom.
-- As such, this script should always be the first (ie top) script in Mudlet


StatTable = StatTable or {}
AltList = AltList or {}
AltList.Chars = AltList.Chars or {}
GroupiesUnderAttack = GroupiesUnderAttack or {}
Init = Init or {}

--Testing
LottoCapture = LottoCapture or {}

-- Init.GlobalVars() is ran both on startup and reconnect
-- Use these to setup / reset variables
function Init.GlobalVars()
  GlobalVar = GlobalVar or {}
  GlobalVar.Saved = GlobalVar.Saved or {}

  GlobalVar.GUI = GlobalVar.GUI or true
  
  GlobalVar.Silent = GlobalVar.Silent or false
  GlobalVar.PerformanceMode = GlobalVar.PerformanceMode or false
  GlobalVar.Debug = GlobalVar.Debug or false
  GlobalVar.Verbose = GlobalVar.Verbose or true
  
  GlobalVar.Boons = {}
  GlobalVar.LastBoon = GlobalVar.LastBoon or nil

  GlobalVar.GroupMates = {}
  GlobalVar.MobCount = 0

  GlobalVar.AutoKill = true
  GlobalVar.KillStyle = "kill"
  GlobalVar.AutoBash = false
  GlobalVar.AutoTarget = false

  GlobalVar.LevelGear = false
  GlobalVar.LevelReady = false
  GlobalVar.AutoGurney = ""
  GlobalVar.GroupLeader = ""

  -- Archer Variables
  GlobalVar.AutoFletch = false
  GlobalVar.LastFletch = "" -- For AutoFletch fails
  GlobalVar.LastFletchTries = 0
  GlobalVar.ReloadType = nil
  GlobalVar.AutoTrack = "off"
  GlobalVar.AutoTrackTarget = ""

  -- Caster Variables
  GlobalVar.AutoCast = false
  GlobalVar.SurgeLevel = 2
  GlobalVar.AutoCaster = ""
  GlobalVar.AutoCasterAOE = ""
  GlobalVar.QuickenStatus = false
  
  -- Skill Variables
  GlobalVar.AutoSkill = false
  GlobalVar.SkillStyle = ""
  
  GlobalVar.AutoFrenzy = true
  
  -- Cleric / Druid Variables
  GlobalVar.AutoHeal = false
  GlobalVar.AutoHealTarget = nil
  GlobalVar.AutoHealLowest =  true
  GlobalVar.InterventionTarget = nil
  GlobalVar.Pantheon = nil
  GlobalVar.AutoHealExclusionList = GlobalVar.AutoHealExclusionList or {}

    -- Vizier Variables
  GlobalVar.VizMonitor = ""
  GlobalVar.VizFinalRites = false
  GlobalVar.VizSoulShackle = false
  GlobalVar.NoPhleb = false
  
    -- Paladin Variables
  GlobalVar.PrayerName = ""
  GlobalVar.PaladinRescue = true

  -- Troll Variables
  GlobalVar.AutoRevive = false -- will switch to true on Init call so that it waits 5 seconds
  GlobalVar.AutoReviveHPpct = 0.25

  --Brandish Triggers
  GlobalVar.BrandishStaff = ""
  GlobalVar.BrandishArmor = ""
  GlobalVar.BrandishCharges = 0
  
  AutoCross = false
  
  --Psi Triggers
  GlobalVar.Mindtricks = 0

  -- Variables to reset on reconnect (won't run on initial Init)
  if AR then AR.Status = false; AR.MonitorRescue = false end
  if Battle then Battle.Combat = false end
  
  if Layout then
      AutoKillSetGUI()
      AutoSkillSetGUI()
      AutoBashSetGUI()
      AutoCastSetGUI()
  end
  
  GlobalVar.WelcomeTimer = GlobalVar.WelcomeTimer or nil
  --GlobalVar.LoginName = GlobalVar.LoginName or nil
end

if not GlobalVar then Init.GlobalVars() end


-- Init profile based on class
-- Since gmcp may be laggy, May need to do something like
-- Set Variable "Ready for Init"
-- When StatTable.Class populates
-- Run Class Specific Init then turn off "Ready for Init"
function Init.Profile(timeout)
    --printGameMessage("DEBUG", "Init.Profile called")
    local MAX_TIMEOUT = 5
    timeout = timeout or 0
    if type(timeout) ~= "number" then error("Init.Profile() error: shouldn't be reached"); return end
    if timeout &gt;= MAX_TIMEOUT then pdebug("Init.Profile() timed out: likely no gmcp data"); return end
    if not Connected() then pdebug("Init.Profile() error: not connected, likely logged out quick"); return end
    

    sendGMCP("Char.Status")
    sendGMCP("Char.Vitals")
    
    if not gmcp or not gmcp.Char or not gmcp.Char.Status then
      pdebug("Init.Profile() failed: no gmcp info, trying again in 5 seconds")
      timeout = timeout + 1
      tempTimer(5, function() Init.Profile(timeout) end)
    end
    
    local MyClass = gmcp.Char.Status.class
    local MyRace = gmcp.Char.Status.race
    local MyLevel = tonumber(gmcp.Char.Status.level)
    local MySubLevel = tonumber(gmcp.Char.Status.sublevel)
    
    if not MyClass or not MyRace or not MyLevel or not MySubLevel then
      pdebug("Init.Profile() failed: no gmcp info, trying again in 5 seconds")
      timeout = timeout + 1
      tempTimer(5, function() Init.Profile(timeout) end)
    end
    
    -- Init spells and skills by class/race/level
    Init.Char(MyClass, MyRace, MyLevel, MySubLevel)

    -- GUI Setup
    
    if (GlobalVar.GUI) then
      AutoKillSetGUI()
      AutoSkillSetGUI()
      AutoBashSetGUI()
      AutoCastSetGUI()
    end
     
    -- Raise Custom Event for others to code with
    raiseEvent("CustomProfileInit")
    

end

function Init.Char(MyClass, MyRace, MyLevel, MySubLevel)
    -- Caster Variables
    GlobalVar.AutoCast = false
    GlobalVar.SurgeLevel = (MyLevel == 125 and 2 or 1)
    GlobalVar.AutoCaster = ""
    GlobalVar.AutoCasterSingle = ""
    GlobalVar.AutoCasterAOE = ""
    GlobalVar.QuickenStatus = false
    
    -- Skill Variables
    GlobalVar.AutoSkill = false
    GlobalVar.SkillStyle = ""

    -- AutoCast
    if MyClass == "Mage" then
      if MyLevel == 125 then
        GlobalVar.AutoCast = true
        if MySubLevel &gt; 500 then
          GlobalVar.AutoCaster = "void seeker"
          GlobalVar.AutoCasterSingle = "void seeker"
          GlobalVar.AutoCasterAOE = "banshee wail" 
        else
          GlobalVar.AutoCaster = "maelstrom"
          GlobalVar.AutoCasterSingle = "maelstrom"
          GlobalVar.AutoCasterAOE = "meteor swarm"
        end
      elseif MyLevel == 51 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "disintegrate"
        GlobalVar.AutoCasterSingle = "disintegrate"
        GlobalVar.AutoCasterAOE = "acid rain"
      end
      
    elseif MyClass == "Wizard" then
      if MyLevel == 125 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "maelstrom"
        GlobalVar.AutoCasterSingle = "maelstrom"
        GlobalVar.AutoCasterAOE = "meteor swarm"
      elseif MyLevel == 51 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "disintegrate"
        GlobalVar.AutoCasterSingle = "disintegrate"
        GlobalVar.AutoCasterAOE = "acid rain"
      end
    
    elseif MyClass == "Sorcerer" then
      if MyLevel == 125 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "brimstone"
      elseif MyLevel == 51 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = MySubLevel &gt; 100 and "torment" or "vamp"
      end

    elseif MyClass == "Stormlord" then
      if MyLevel == 125 then
        GlobalVar.AutoKill = false
        GlobalVar.AutoCast = false
        GlobalVar.AutoCaster = ""
        GlobalVar.AutoCasterAOE = ""
      elseif MyLevel == 51 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "disintegrate"
        GlobalVar.AutoCasterSingle = "disintegrate"
        GlobalVar.AutoCasterAOE = "acid rain"
      end
    elseif (MyClass == "Psionicist") then
      if MyLevel == 125 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "fandango"
        GlobalVar.SurgeLevel = 1      
      elseif MyLevel == 51 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "dancing weapon"
        GlobalVar.SurgeLevel = 1
      end
    elseif MyClass == "Mindbender" then
      if MyLevel == 125 then
        GlobalVar.AutoCast = true
        GlobalVar.AutoCaster = "fracture"
        GlobalVar.SurgeLevel = 2      
      elseif MyLevel == 51 then      
        GlobalVar.AutoCast = true
        GlobalVar.SurgeLevel = 1
        GlobalVar.AutoCaster = "ultrablast"    
      end
        
      
    end

    -- AutoHeal
    if (MyClass == "Cleric" or MyClass == "Druid" or MyClass == "Priest") then
      if MyLevel &gt;= 51 then
        GlobalVar.AutoHeal = true
        GlobalVar.AutoHealLowest = true
        GlobalVar.InterventionTarget = nil
      end
    elseif MyClass == "Paladin" then
      if MyLevel == 125 then
        GlobalVar.AutoHeal = true
        GlobalVar.AutoHealTarget = StatTable.CharName
        GlobalVar.AutoHealLowest = false
      end
    
    
    end

    -- Killstyle
    if MyClass == "Rogue" or MyClass == "Black Circle Initiate"  then
      if MyLevel == 125 then GlobalVar.KillStyle = "ass"
      elseif MySubLevel &gt; 101 then GlobalVar.KillStyle = "bs"
      elseif MyLevel &gt;= 50 then GlobalVar.KillStyle = "murder"
      end
    elseif MyClass == "Assassin" then
      if MyLevel == 125 then GlobalVar.KillStyle = "ass"
      elseif MyLevel == 51 then GlobalVar.KillStyle = "surp"
      end
    elseif MyClass == "Bladedancer" then
      if MyLevel == 51 then GlobalVar.KillStyle = "surp"
        if StatTable.SubLevel &gt; 101 then
          GlobalVar.SkillStyle = "vs"
          GlobalVar.AutoSkill = true
        end
      end
    elseif MyClass == "Shadowfist" then
      if MyLevel == 51 then GlobalVar.KillStyle = "surp"
        if StatTable.SubLevel &gt; 101 then
          GlobalVar.SkillStyle = "vs"
          GlobalVar.AutoSkill = true
        end
      end
    elseif MyClass == "Black Circle Initiate" then
      if MyLevel == 125 then GlobalVar.KillStyle = "ass"
      elseif MySubLevel &gt; 101 then GlobalVar.KillStyle = "bs"
      end
    elseif MyClass == "Priest" and MyLevel &gt; 51 then
      GlobalVar.KillStyle = false
    end
    
    -- SkillStyle
    if MyClass == "Soldier" then
      if MyLevel == 125 then
        GlobalVar.AutoSkill = true
        GlobalVar.SkillStyle = "focus"
      end
    end

    
    -- Race
    if (MyRace == "Troll") then
      GlobalVar.AutoRevive = true
    end

end

function Init.FirstTime()
  cecho("\n\n")
  cecho("&lt;yellow&gt;=======================================================\n")
  cecho("&lt;yellow&gt;***\t&lt;white&gt;Welcome to Vagonuth Package " .. VagoPackage.Version .. "\t&lt;yellow&gt;***\n")
  cecho("&lt;yellow&gt;=======================================================\n\n")
  cecho("&lt;white&gt;Learn the basic commands available to you by typing &lt;yellow&gt;cmds\n")
  cecho("&lt;white&gt;It's recommend you run &lt;yellow&gt;setup &lt;white&gt;with each character\n")
  cecho("&lt;white&gt;Adjust your GUI's font size with &lt;yellow&gt;fontsize &lt;#&gt;\n")
  cecho("&lt;white&gt;To auto login with a password, type &lt;yellow&gt;pwd &lt;password\n")
  cecho("&lt;white&gt;To set your buddy chat name, type &lt;yellow&gt;bud-set &lt;name&gt; &lt;colour&gt;\n")
  cecho("&lt;white&gt;If you wish to minimize gtells, type &lt;yellow&gt;silent on\n")
  cecho("&lt;white&gt;You'll find many useful inventory management commands by typing &lt;yellow&gt;ihelp\n")
  cecho("&lt;white&gt;Learn more about autorescue by typing &lt;yellow&gt;ar&lt;white&gt;, quickstart: &lt;yellow&gt;ar on; ar auto\n")
  cecho("\n\n")
  cecho("&lt;red&gt;Note:\t&lt;white&gt;This package auto-updates. If you edit the code directly,\n")
  cecho("&lt;white&gt;\tthis will overwrite your code\n")
  cecho("&lt;white&gt;\tSee the README under Scripts for coding best practices\n")
  
  -- Install CPC if not already installed
  if not table.contains(getPackages(),"Cross Profile Communication") then
	 installPackage("https://github.com/takilara/cpc/releases/latest/download/cpc.mpackage")
  end
end

function Init.ProfileOnLogin()
  safeTempTrigger("Init.LoginTrigger", "^(Welcome( back)? to the AVATAR System(, Hero|, Lord|, Lady)? (?&lt;charname&gt;\\w+).|Reconnecting.)$", 
    function() 
      tempTimer(5, function() Init.Profile() end)
      tempTimer(7, function()
        if StatTable.Level == 125 and GetPlaneName() == "Midgaardia" then
          printGameMessage("Lord on Midgaard", "Spells and skills reset to hero defaults", "yellow", "white")
          Init.Char(StatTable.Class, StatTable.Race, 51, 999)
          AutoCastStatus()
          AutoCastSetGUI()
        end
      end)
    end, "regex")

      

end


sendGMCP("Char.Status")
sendGMCP("Char.Vitals")
tempTimer(0, function() Init.ProfileOnLogin() end)



-- Saved Variables
function SaveProfileVars()
  GlobalVar.Saved = {}
  GlobalVar.Saved.BuddyChatName = GlobalVar.BuddyChatName or nil
  GlobalVar.Saved.BuddyChatColour = GlobalVar.BuddyChatColour or nil
  GlobalVar.Saved.Silent = GlobalVar.Silent or false
  GlobalVar.Saved.Password = GlobalVar.Password or nil
  GlobalVar.Saved.AutoStance = GlobalVar.AutoStance or false
  GlobalVar.Saved.AutoPlane = GlobalVar.AutoPlane or false
  GlobalVar.Saved.Silent = GlobalVar.Silent or false
  GlobalVar.Saved.FontSize = GlobalVar.FontSize or nil
  GlobalVar.Saved.Debug = GlobalVar.Debug or false
  GlobalVar.Saved.Verbose = GlobalVar.Verbose or false
  GlobalVar.Saved.AutoFrenzy = GlobalVar.AutoFrenzy or true
  GlobalVar.Saved.PaladinRescue = GlobalVar.PaladinRescue or true
  GlobalVar.Saved.DownloadMessage = GlobalVar.DownloadMessage or nil
  local location = getMudletHomeDir() .. "/ProfileVariables.lua"
  table.save(location, GlobalVar.Saved)

end

function LoadProfileVars()
  local location = getMudletHomeDir() .. "/ProfileVariables.lua"
  GlobalVar.Saved = GlobalVar.Saved or {}
  if io.exists(location) then
    table.load(location, GlobalVar.Saved)
  else
    tempTimer(10, function() Init.FirstTime() end)
    SaveProfileVars()
  end
  GlobalVar.Saved = GlobalVar.Saved or {}
  GlobalVar.BuddyChatName = GlobalVar.Saved.BuddyChatName or nil
  GlobalVar.BuddyChatColour = GlobalVar.Saved.BuddyChatColour or nil
  GlobalVar.Silent = GlobalVar.Saved.Silent or false
  GlobalVar.Password = GlobalVar.Saved.Password or nil
  GlobalVar.AutoStance = GlobalVar.Saved.AutoStance or false
  GlobalVar.AutoPlane = GlobalVar.Saved.AutoPlane or false
  GlobalVar.Silent = GlobalVar.Saved.Silent or false
  GlobalVar.FontSize = GlobalVar.Saved.FontSize or nil
  GlobalVar.Debug = GlobalVar.Saved.Debug or false
  GlobalVar.Verbose = GlobalVar.Saved.Verbose or false
  GlobalVar.AutoFrenzy = GlobalVar.Saved.AutoFrenzy or true
  GlobalVar.PaladinRescue =  GlobalVar.Saved.PaladinRescue or true
  GlobalVar.DownloadMessage = GlobalVar.Saved.DownloadMessage or nil
end

LoadProfileVars()


-- Exit script
function OnMudletExit()
  SaveProfileVars()
end

function OnMudletDisconnect()
  RunStats.EchoSessionAll()
  OnMobDeathQueueClear(false)
  Init.GlobalVars()
  
  GMCP_Vitals()
  DamageCounter.Reset()
  AutoCastCleanUp()
  
  if (GlobalVar.GUI) then
    AutoKillSetGUI()
    AutoSkillSetGUI()
    AutoBashSetGUI()
    AutoCastSetGUI()
  end
end

OnSysExitEventHandler = OnSysExitEventHandler or nil

if OnSysExitEventHandler then
  killAnonymousEventHandler(OnSysExitEventHandler)
end

OnSysExitEventHandler = registerAnonymousEventHandler("sysExitEvent","OnMudletExit",false)


OnSysConnectEventHandler = OnSysConnectEventHandler or nil

if OnSysConnectEventHandler  then
  killAnonymousEventHandler(OnSysConnectEventHandler )
end

OnSysConnectEventHandler = registerAnonymousEventHandler("sysDisconnectionEvent", "OnMudletDisconnect")








</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Safe Mudlet Functions</name>
						<packageName></packageName>
						<script>-- MUDLET BUG
-- killTriggers take approx 2 seconds to kill before taking affect. This can result in triggers being called multiple times
-- if trigger is matched shortly after killTrigger
-- see issue for details: https://github.com/Mudlet/Mudlet/issues/5284

safeTimerTable = safeTimerTable or {}
safeEventTable = safeEventTable or {}
safeTriggerTable = safeTriggerTable or {}
safeAliasTable = safeAliasTable or {}

function safeTempTimer(id, time, func, repeating)
  local repeating = repeating or false

  -- If the timer exists, kill it
  if safeTimerTable[id] then
    killTimer(safeTimerTable[id])
  end
  
  safeTimerTable[id] = tempTimer(time, func, repeating)
  return safeTimerTable[id]
end

function safeKillTimer(id)
  if safeTimerTable[id] then
    local retval = killTimer(safeTimerTable[id])
    safeTimerTable[id] = nil
    return retval
  end
  return false
end


function safeEventHandler(id, event_name, func, one_shot)
  one_shot = one_shot or false
  
  -- If the event exists, kill it
  if safeEventTable[id] then
    killAnonymousEventHandler(safeEventTable[id])
  end
  
  safeEventTable[id] = registerAnonymousEventHandler(event_name, func, one_shot)
  return safeEventTable[id]
end

function safeKillEventHandler(id)
  if safeEventTable[id] then
    local retval = killAnonymousEventHandler(safeEventTable[id])
    safeEventTable[id] = nil
    return retval
  end
  return false
end

-- Table to associate trigger types to their respective functions
local triggerFunctions = {
  substring = tempTrigger,
  exact = tempExactMatchTrigger,
  begin = tempBeginOfLineTrigger,
  regex = tempRegexTrigger
}

function safeTempTrigger(id, pattern, func, triggerType, expireAfter)
  local triggerType = triggerType or "substring"  -- default type if not specified
  local expireAfter = expireAfter or nil

  -- Ensure the triggerType is valid
  if not triggerFunctions[triggerType] then
    error("Invalid trigger type specified!")
    return false
  end

  -- If the trigger exists, kill it
  if safeTriggerTable[id] then
    killTrigger(safeTriggerTable[id])
  end

  -- Call the appropriate function from the lookup table
  safeTriggerTable[id] = triggerFunctions[triggerType](pattern, func, expireAfter)
  return safeTriggerTable[id]
end

function safeKillTrigger(id)
  if safeTriggerTable[id] then
    local retval = killTrigger(safeTriggerTable[id])
    safeTriggerTable[id] = nil
    return retval
  end
  return false
end

function safeTempAlias(id, pattern, func)
  if safeAliasTable[id] then
    killAlias(safeAliasTable[id])
  end

  safeAliasTable[id] = tempAlias(pattern, func)
  return safeAliasTable[id]
end

function safeKillAlias(id)
  if safeAliasTable[id] then
    local retval = killAlias(safeAliasTable[id])
    safeAliasTable[id] = nil
    return retval
  end
  return false
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>General Functions</name>
						<packageName></packageName>
						<script>
cs = getCommandSeparator() -- shortcut for getCommandSeparator()

-- format_int(number), where number is an integer, returns a formatted string
function format_int(number)
  -- Handle non-numeric inputs
  if type(number) ~= "number" then
    return "format_int(): invalid input"
  end

  local str = tostring(number)
  local minus, int, fraction = str:match('([-]?)(%d+)([.]?%d*)') -- first tries to match optional negative sign, then captures whole number, then captures optional decimal

  -- Insert commas for thousands, millions, etc.
  local formatted = ""
  local length = #int
  for i = 1, length do
    formatted = formatted .. int:sub(i, i)
    if (length - i) % 3 == 0 and i ~= length then
      formatted = formatted .. ","
    end
  end

  return minus .. formatted .. fraction
end

-- Returns str with the first letter capitalized
function firstToUpper(str)
    return (str:gsub("^%l", string.upper))
end

function firstToLower(str)
  return (str:gsub("^%u", string.lower))
end

-- Returns char_name in GMCP format (for matching data)
-- could be done directly in a function with: string.lower(StatTable.CharName):gsub("^%l", string.upper)
function GMCP_name(char_name)
  return firstToUpper(string.lower(char_name))
end

function splitstring(inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                table.insert(t, str)
        end
        return t
end

function texttocolour(colour, args)
        local str = ""
        local colours = { "|"..colour.."|", "|"..colour.."|",  "|"..colour.."|", "|"..colour.."|", "|B"..colour.."|" }
        local pass = 1
 
        for char in args:gmatch"." do
                str = str .. colours[pass] .. char
                if pass == #colours then pass = 1 end
                pass = math.random (1,5)
        end
 
        return (str)
end

-- Returns first word in a string
function first_word_in_string(str)
  assert(str~=nil)
  local words = {}
  words[1], words[2] = str:match("(%w+)(%W+)")
  if words[1] == nil then words[1] = str end
  return words[1]
end

function pdebug(string)
  if (GlobalVar.Debug) then
    cecho("\n&lt;white&gt;DEBUG&lt;ansi_white&gt;: " .. string .. "\n")
  end
end



function reversedir(dir)
   if (dir == "north") then return "south"
   elseif(dir == "south") then return "north"
   elseif(dir == "west") then return "east"
   elseif(dir == "east") then return "west"
   elseif(dir == "up") then return "down"
   elseif(dir == "down") then return "up"
   else error("reversedir() error: bad input") end
end


-- References: 
-- https://www.lua.org/pil/23.1.html
-- https://stackoverflow.com/questions/10838961/lua-find-out-calling-function
function traceback()
    local current_func = debug.getinfo(2,"n")
    local calling_func = debug.getinfo(3,"n")
    if (calling_func.name) then print(current_func.name.. "() was called by ".. calling_func.name.. "()!") end
end

function traceback_detail()
  local level = 1
  while true do
    local info = debug.getinfo(level, "Sln")
    if not info then break end
    if info.what == "C" then   -- is a C function?
      print(level, "C function")
    else   -- a Lua function
      if (info.name) then
        print(string.format("[%s] line %d: %s",
                            info.short_src, 
                            info.currentline, info.name))
      else
        print(string.format("[%s] line %d",
                  info.short_src, 
                  info.currentline))
      end
    end
    level = level + 1
  end
end

-- example: lua showCmdSyntax("Autokill",{{"Autokill &lt;target&gt;","Blah Blah"},{"Killstyle &lt;style&gt;","ooga booga"}})
function showCmdSyntax(cmd_name, syntax_tbl, showCmdColour)
  if type(cmd_name) ~= "string" or type(syntax_tbl) ~= "table" then
    error("showCmdSyntax: Invalid inputs (expected string, table)")
    return false
  end
  
  showCmdColour = showCmdColour or "white" -- https://wiki.mudlet.org/images/c/c3/ShowColors.png
  
  cecho("&lt;"..showCmdColour.."&gt;"..cmd_name.."\n")
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
  for _, v in ipairs(syntax_tbl) do
    local dash = (v[1] and v[2]) and "- " or "  "
    local formatStr = string.format("&lt;%s&gt;%-31s%s\n", showCmdColour, v[1] and " " .. v[1] or "", dash .. (v[2] or ""))
    cecho(formatStr)
  end
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
end

function showTableThreeColwithHeader(cmd_name, syntax_tbl, showCmdColour)
  if type(cmd_name) ~= "string" or type(syntax_tbl) ~= "table" then
    error("showCmdSyntax: Invalid inputs (expected string, table)")
    return false
  end
  
  showCmdColour = showCmdColour or "white" -- https://wiki.mudlet.org/images/c/c3/ShowColors.png
  
  cecho("&lt;"..showCmdColour.."&gt;"..cmd_name.."\n")
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
  cecho(string.format("&lt;%s&gt;%-30s%-30s%s\n", showCmdColour, syntax_tbl[1][1], syntax_tbl[1][2], syntax_tbl[1][3]))
  table.remove(syntax_tbl,1)
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
  for _, v in ipairs(syntax_tbl) do
    local formatStr = string.format("&lt;%s&gt;%-30s%-30s%s\n", showCmdColour, v[1], v[2], v[3])
    cecho(formatStr)
  end
  cecho("&lt;"..showCmdColour.."&gt;---------------------------------------------------------------------------------------\n")
end

function printMessage(title, message, colour)
  colour = colour or "white"
  
  local formatStr = string.format("&lt;%s&gt;%s&lt;ansi_%s&gt;: %s\n", colour, title, colour, message)
  cecho(formatStr)
end

function printGameMessage(title, message, colour, colour_message)
  if not GlobalVar.GUI then printMessage(title, message, colour); return end
  
  colour = colour or "white"
  colour_message = colour_message or ("ansi_" .. colour)
  
  local formatStr = string.format("&lt;%s&gt;%s&lt;%s&gt;: %s\n", colour, title, colour_message, message)
  cecho(StaticVars.GameMsgsChatOutput, formatStr)
end

-- Send less important game messages here so players can turn them off
function printGameMessageVerbose(...)
  if not GlobalVar.Verbose then return end
  printGameMessage(...)
  
end

-- Only calls a functon if it exists
-- usage: safeCall(function_name, arg1, arg2, etc)
-- returns functions return value, otherwise returns nil if func not found
function safeCall(func, ...)
    if type(func) == "function" then
        return func(...)  -- Call the function and return its result, if any
    end
end


function RemoveColourCodes(name)
    -- Remove sequences that start with \27 followed by [ and then has one or more digits, a semicolon, again one or more digits and ends with an 'm'
    local stripped = string.gsub(name, "\27%[%d+;%d+m", "")
    
    stripped = string.gsub(stripped, "%[%d+;%d+m", "")

    -- Remove sequences that start with \27
    stripped = string.gsub(stripped, "\27", "")

    -- Remove squares that have |xX| colour stripAnsiCodes
    stripped = string.gsub(stripped,"|%w+|","")

    return stripped
end

function Connected()
  local _, _, ret = getConnectionInfo()
  return ret
end

function RemoveArticle(inputString)
    -- Check if the input is valid (a non-nil string)
    if type(inputString) ~= "string" then
        return nil, "Error: Input is not a valid string."
    end

    -- Pattern to match leading articles "a", "an", or "the" followed by a space
    local pattern = "^(%a+%s)"
    
    -- Remove the matching pattern from the string
    local cleanedString = inputString:gsub(pattern, function(article)
        if article:lower() == "a " or article:lower() == "an " or article:lower() == "the " then
            return ""
        else
            return article
        end
    end)

    -- Return the cleaned string
    return cleanedString
end

function splitArgumentIntoTwo(input)
    local arg1, arg2

    -- Check for both "words" enclosed in single quotes
    local match1, match2 = input:match("^'(.-)'%s+'(.-)'$")
    if match1 and match2 then
        arg1 = "'" .. match1 .. "'"
        arg2 = "'" .. match2 .. "'"
    else
        -- Check for the pattern with the first "word" in single quotes
        match1, match2 = input:match("^'(.-)'%s+(%S+)$")
        if match1 and match2 then
            arg1 = "'" .. match1 .. "'"
            arg2 = match2
        else
            -- Check for the pattern with the second "word" in single quotes
            match1, match2 = input:match("^(%S+)%s+'(.-)'$")
            if match1 and match2 then
                arg1 = match1
                arg2 = "'" .. match2 .. "'"
            else
                -- Check for the pattern with exactly two words
                match1, match2 = input:match("^(%S+)%s+(%S+)$")
                if match1 and match2 then
                    arg1 = match1
                    arg2 = match2
                else
                    -- Check for a single word
                    match1 = input:match("^(%S+)$")
                    if match1 then
                        arg1 = match1
                    else
                        -- Return an error if no pattern matches
                        return nil, "Invalid input format. Use one or two words, or enclose multiple words in single quotes."
                    end
                end
            end
        end
    end

    return arg1, arg2
end



</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Table and Array Functions</name>
						<packageName></packageName>
						<script> -- print out an array, for debugging
 -- Only works for an array (i.e. numerically indexed table)
 function ArrayShow(t)
  for i=1,#t do    
    print("total:"..#t, "i:"..i, "v:"..t[i]);
  end
end

-- Works on Tables and Arrays, including nested tables
function TableDump(o)
  if type(o) == 'table' then
    local s = '{ '
    for k,v in pairs(o) do
      if type(k) ~= 'number' then k = '"'..k..'"' end
      s = s .. '['..k..'] = ' .. TableDump(v) .. ','
    end
    return s .. '} '
  else
    return tostring(o)
  end
end

function TableShow(t)
  print(TableDump(t))
end

function TableSize(t)
  if type(t) ~= "table" then error("TableSize() requires a table as an argument") end
  local count = 0
  for _ in pairs(t) do count = count + 1 end
  return count
end


-- Returns true if value 'val' is in array 'tab', otherwise false
function ArrayHasValue(tab, val)
  for index, value in ipairs(tab) do
    if value == val then
      return true
    end
  end
    return false
end

function compareTables(t1, t2)
  if type(t1) ~= "table" or type(t2) ~= "table" then
    return false
  end
  for k,v in pairs(t1) do
    if type(v) == "table" then
      if not compareTables(v, t2[k]) then
        return false
      end
    else
      if t2[k] ~= v then
        return false
      end
    end
  end
  for k,v in pairs(t2) do
    if type(v) == "table" then
      if not compareTables(v, t1[k]) then
        return false
      end
    else
      if t1[k] ~= v then
        return false
      end
    end
  end
  return true
end


-- Check if an array has a given substring within one of its members
-- Not designed for large arrays
function ArrayHasSubstring(array, substring)

  assert(#array&lt;1000)
  
  for i=1,#array do    
    if (string.find(substring,array[i]) ~= nil) then
        return true
    end
  end
  
  return false
end


-- Use this function via ArrayRemove below
function _ArrayRemove(t, fnKeep)
    local j, n = 1, #t;

    for i=1,n do
        if (not fnKeep(t, i, j)) then
            -- Move i's kept value to j's position, if it's not already there.
            if (i ~= j) then
                t[j] = t[i];
                t[i] = nil;
            end
            j = j + 1; -- Increment position of where we'll place the next kept value.
        else
            t[i] = nil;
        end
    end

    return t;
end

-- ArrayRemove: removes all instances of "string" in numberically indexed table "t"
-- Only works for an array (i.e. numerically indexed table)
-- From Stack Overflow: https://stackoverflow.com/questions/12394841/safely-remove-items-from-an-array-table-while-iterating
function ArrayRemove(t, string)
  _ArrayRemove(t, function(t, i, j)
      -- Return true to keep the value, or false to discard it.
      local v = t[i];
      return (v == string);
      -- To remove multiple values, use return (v == "a" or v == "b" or v == "c"); etc 
  end)
end

-- https://stackoverflow.com/questions/640642/how-do-you-copy-a-lua-table-by-value
function deepcopy(o, seen)
  seen = seen or {}
  if not o  then return {} end
  if seen[o] then return seen[o] end

  local no
  if type(o) == 'table' then
    no = {}
    seen[o] = no

    for k, v in next, o, nil do
      no[deepcopy(k, seen)] = deepcopy(v, seen)
    end
    setmetatable(no, deepcopy(getmetatable(o), seen))
  else -- number, string, boolean, etc
    no = o
  end
  return no
end


-- compare functions for sorting tables, e.g., table.sort(array,compare)
function compare(a,b)
  return a[1] &lt; b[1]
end

function rcompare(a,b)
  return a[1] &gt; b[1]
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Static Variables</name>
						<packageName></packageName>
						<script>StaticVars = StaticVars or {}

-- NOTE
-- FOR ALL CHARACTER NAMES IN THESE VARIABLES
-- Use the GMCP format, ie, first letter upper case, remainder lowercase
-- eg Xykoi (correct), NOT xykoi, XYKOI, XYKoi etc. (incorrect)

-- Maximum amount of groupmates to show on the left-hand side (large monitors may support more)
StaticVars.MaxGroupLabels = 32 

-- Update bots as required
StaticVars.DruidBots = { "Viridi", "FlutterFly", "Yorrick", "Idle"}
StaticVars.PsiBots = {"Neodox", "Xykith", "Raisteel", "Corimax"}
StaticVars.PrsBots = {"Martyr", "Gobo", "Eiri", "Arby", "Textual", "Logic"}

-- Some defualts
StaticVars.DarkRaces = {"Drow", "Duergar", "Gargoyle", "Kobold", "Deep Gnome", "Demonseed", "Troll"}
StaticVars.FrenzyClasses = {"Berserker", "Archer", "Assassin", "Fusilier", "Soldier", "Psionicist", "Rogue", "Black Cirle Initiate"}
StaticVars.GameMsgsChatOutput = "GameChat"

-- Priest Config: for soul cleanse trigger, set your characters bag name (eg loot) and default held (eg lodestone) for the trigger to work properly
StaticVars.SoulCleanse = {}
StaticVars.SoulCleanse.Defaults = {"loot", "sceptre"}
StaticVars.SoulCleanse = {
  ["Ayas"] = {"loot", "sceptre"},
  ["Zephyra"] = {"loot", "sceptre"},
} -- Make sure to use normal capitalization, eg, first letter capitalized, remainder lower case

-- List of default pantheon spells for your chars, edit as you like
StaticVars.Default_Pantheon = {
  ["Halgod"] = "artificer blessing",
  ["Hezzur"] = "glorious conquest",
}  -- Make sure to use normal capitalization, eg, first letter capitalized, remainder lower case

StaticVars.PantheonNumber = 4 -- number of mobs to wait for before activating grim harvest or unholy rampage


-- Edit to the name you want pgem's passed to on MDAY
StaticVars.PGemHolder = "Halgod"

-- default bag to put items into
StaticVars.AllegBagName = "alleg"  
StaticVars.LootBagName = "loot"

-- What hp % we consider a groupie injured or critical
-- affects a number of healing mechanics
StaticVars.InjuredPercent = 0.85
StaticVars.CriticalPercent = 0.6

StaticVars.Junk = {
--["small wooden lockbox"] = "small wooden lockbox",

["lab memo"] = "memo",
["silver broad sword"] = "silver broad sword",
["dark blue sleeves"] = "dark blue sleeves",
["scimitar of fire"] = "scimitar fire",
["black pentagram"] = "pentagram",
["angelic lance"] = "angel lance",
["kzinti pickaxe"] = "pickaxe",
["kzinti melee claw"] = "kzinti melee claw lordgear",
["kzinti captain's claw"] = "kzinti captain claw lordgear",
["huge bastard sword"] = "bastard sword",
["shiv"] = "shiv",
["ethereal shield"] = "ethereal shield",
["obsidian shield"] = "obsidian shield",
["obsidian spear"] = "obsidian spear",
["military cloak"] = "military cloak",
["banded mail uniform"] = "banded mail uniform",
["obsidian crossbow"] = "obsidian crossbow",
["clutch of lightning arrows"] = "lightning arrows",
["clutch of ice arrows"] = "ice arrows",
["brace of lightning bolts"] = "brace lightning bolts",
["ivory bow"] = "ivory bow tusk",
["obsidian dagger"] = "obsidian dagger",
["servant's dagger"] = "servant's dagger",
["silver dagger"] = "silver dagger",
["ornate staff"] = "ornate staff",
["ivory hilted silver dagger"] = "ivory hilted silver dagger",
["black soft leather boots"] = "black soft leather boots",
["glowing silver sword"] = "glowing silver sword",
["dull silver sword"] = "dull silver sword",
["jagged silver sword"] = "jagged silver sword",
["jet black robe"] = "jet black robe",
["3-pronged iron claw"] = "3-pronged iron claw",
["cruel iron bow"] = "cruel iron bow",
["big stone slab"] = "stone slab",
["giant's club"] = "giant's club",
["long salamander spear"] = "long salamander spear",
["vial of murky fluid"] = "potion vial murky",
["flowing dark blue robe"] = "flowing dark blue robe",
["armor of the Purifying Flame"] = "armor red white flame lordgear",
["steel tower shield"] = "steel tower shield",
["flowing dark blue robe"] = "flowing dark blue robe",
["gold hilted flaming silver sword"] = "gold hilted flaming silver sword",
["ivory hilted silver dagger"] = "ivory hilted silver dagger",
--["black bracer"] = "black bracer",
["silver long sword"] = "silver long sword",
["loose fitting black silk pants"] = "loose fitting black silk pants",
["black master's robe"] = "black master's master robe",
["crystalline spear"] = "crystalline spear",
["mithril and glass leg plates"] = "mithril glass leg plates",
["mithril and glass chestplate"] = "mithril glass chestplate",
["mithril and glass helm"] = "mithril glass helm",
["mithril and glass arm plates"] = "mithril glass arm plates",
["mithril and glass boots"] = "mithril glass boots",
["mithril and glass bracer"] = "mithril glass bracer",
["mithril and glass girth"] = "mithril glass girth",
["lightning crossbow"] = "lightning crossbow",
["florentine longsword"] = "florentine longsword",
["crystal sabre"] = "crystal sabre",
["thought shield"] = "thought shield",
["ruby dagger"] = "ruby dagger",
["silver trident"] = "silver trident",
["copper spear"] = "copper spear",
["deadly manople"] = "manople deadly sword",
["bronze flyssa"] = "flyssa bronze blade",
["silver spear wrapped in ivy"] = "silver spear ivy",
["poisonous kzin claws"] = "poisonous claws",
["ethereal Glass Shield"] = "astral shield ethereal",
["Astral Chestplate"] = "astral chestplate armor ethereal",
["circular band of malachite"] = "malachite band lordgear",
["silvery knife"] = "silvery knife",
["silvery dagger"] = "silvery dagger",
["silvery sword"] = "silvery sword",
["splint mail vest"] = "vest splint",
["pair of splint mail sleeves"] = "sleeves splint",
["splint mail skirt"] = "skirt splint",
["thin two-handed sword"] = "sword thin two two-handed",
["extremely sharp and thin sword"] = "thin sword",
["carrion beetle mandible"] = "carrion beetle mandible",
["lava-rock blackjack"] = "lava rock blackjack lordgear",
["fire dagger"] = "fire dagger lordgear",
["gauntlets of protection"] = "gauntlets protection",
["broken silver blade"] = "blade githyanki gith silver lordgear",
["dark green robe"] = "dark green robe",
["rusty axe"] = "rusty axe",
["leg of a table"] = "leg table",
["black sabre"] = "black sabre lordwield",
["stone-capped spear"] = "stone capped spear",
["polished splintmail"] = "splint splintmail",
["dwarven sling"] = "dwarven sling",
["hording claw"] = "hording claw",
["kzinti hunting claw"] = "kzinti hunting claw lordgear",
["animal hides"] = "animal hides lordgear",
["mithrilmail skirt"] = "mithrilmail skirt",
["mithrilmail collar"] = "mithrilmail collar",
["mithrilmail belt"] = "mithrilmail belt",
["mithrilmail sleeves"] = "mithrilmail sleeves",
["mithrilmail cowl"] =  "mithrilmail cowl",
["mithrilmail armor"] =  "mithrilmail armor",
["heartstopping stiletto"] = "heartstopping stiletto",
["vicious vial"] = "vicious vial",
["necrokukri"] = "necrokukri curved knife",
["dagger tinged with green"] = "dagger green",
["sunset-red dagger"] = "dagger sunset-red",
["darkwood shield"] = "darkwood shield",
["blood-mithril skirt"] = "blood-mithril hauberk skirt chain",
["blood-mithril cowl"] = "blood-mithril cowl mithril chain",
["blood-mithril hauberk"] = "blood-mithril hauberk mithril chain ",
["blood-mithril mantle"] = "blood-mithril mantle mithril chain",
["lightning axe"] = "lightning axe",
["ice blade"] = "ice blade",
["dark red mace"] = "red dark mace lordgear",
["iron-studded mace"] = "iron mace",
["iron trident"] = "iron trident",
["small, deadly sword"] = "small deadly sword",
["large band of elemental earth"] = "elemental earth band lordgear",
["barbed black spear"] = "black spear barbed lordgear",
["crimson spear"] = "crimson spear",
["glass halberd"] = "glass halberd",
["ephemeral blade"] = "ephemeral blade",
["darkwood shield"] = "darkwood shield",
["iron barbed flail"] = "iron barbed flail",
["mist of Tarterus"] = "mist tarterus lordgear",
["sharp blood-covered sword"] = "sword blood-covered",
["jagged spear of crystal-clear ice"] = "ice spear jagged",
["cracked stone spear"] = "spear stone cracked",
["watchman's shield"] = "watchman's shield round smooth obsidian silver",
["fang axe"] = "fang axe beast darkwood white",
["serated barb"] = "serated barb",
["obsidian bow"] = "obsidian bow smooth arc",
["grey robe lined with crystals"] = "crystals grey robe",
["silvery bow"] = "silvery bow",
["pink ice ring"] = "pink ice ring",
["wide strip of hard flesh"] = "hard flesh strip lordgear",
["bow of light"] = "light bow lordgear",
["skeletal sword"] = "skeletal sword",
["enormous carved bone staff"] = "bone staff",
["coral Shield"] = "coral shield lordshield",
["Astral Longsword"] = "astral longsword",
["Lightspear"] = "lightspear",
["glass sphere wrapped in green web"] = "glass sphere green web",
["green web cloak"] = "web cloak green",
["emerald-encrusted silver shield"] = "emerald shield silver",
["sultan's Greaves"] = "coral sultan greaves",
["public Approval"] = "public approval",
["violet psi-blade"] = "psi-blade energy violet",
["smoky psi-blade"] = "psi-blade energy smoky",
--["pure psi-blade"] = "psi-blade energy pure",
["emerald-encrusted silver shield"] = "emerald shield silver",
["dull blood-smeared sword"] = "blood-smeared sword",
["hurling hammer"] = "hurling hammer",
["sturdy oaken staff"] = "oaken staff",
["(Dull) a slaves pick axe"] = "pick axe slave",
["standard issue lantern"] = "standard issue lantern",
["sacrificial dagger"] = "sacrificial dagger blade",
["girtablilu stinger"] = "girtablilu stinger",
["curved girtablilu longbow"] = "girtablilu longbow bow",
["witches broom"] = "witches broom",
["old but nasty morningstar"] = "old morningstar",
["honed dirk"] = "dirk",
["sinister-looking blackjack"] = "blackjack stick",
["heavily tarnished scythe"] = "tarnished scythe",
["skeletal bow"] = "skeletal bow",
["black buckler"] = "black spike buckler skin lordgear",
["two-handed broad sword"] = "broad sword",
["blade of the Crusaders"] = "crusader blade lordgear",
["armor of the Purifying Flame"] = "armor red white flame lordgear",
["stone demonhide"] = "stone demonhide",
["crimson spear"] = "crimson spear",
["blue-green demonscale wrap"] = "blue-green demonscale wrap",
["Staff of Torment"] = "staff torment",
["sturdy scimitar"] = "scimitar",
["reinforced buckler"] = "buckler shield",
["stout branch"] = "branch",
["unholy sword of the githyanki"] = "sword gith",
["black cloak"] = "black cloak lordgear",
["small, knotted whip"] = "knotted whip",
["Rotting Ring"] = "rotting ring twisted loop vine",
["sea sabre"] = "sea sabre",
["sea sword"] = "sea sword",
["sea saw"] = "sea saw",
["sea bow"] = "sea bow",
["amulet of sorrow"] = "amulet sorrow",
["ethereal sword"] = "ethereal sword",
["chaos shield"] = "chaos shield",
["cape of the Merman"] = "cape",
["signet of Zydarielle"] = "signet zydarielle thin delicate ring obsidian",
["signet of Kipparielle"] = "signet obsidian ring cats eye gem",
["signet of Syriohl"] = "gold ring bronze copper leaves",
["signet of Valyce"] = "signet valyce ring white stone",
["leather bracer"] = "leather bracer lordgear gorn",
["red belt"] = "red cotton belt lordgear gorn",
["pair of white pants"] = "white cotton pants lordgear gorn",
["white tunic"] = "white cotton tunic lordgear gorn",
["massive demon blade"] = "massive demon blade",
["shadow blade"] = "shadow blade",
["giant wood-shafted axe"]= "axe giant",
["silvery-colored potion"] = " potion silvery",
["slaughtering gloves"] = "slaughtering gloves",
["Tuataur battle tunic"] = "Tuataur battle tunic loose gi",
["Golden Helmet of Mambrino"] = "Golden Helmet of Mambrino",
["small demon's amulet"] = "amulet demon",
["cloud of dancing shards"] = "cloud dancing shards",
["habiliments of purity"] = "habiliments purity",
["boots of the Righteous Path"] = "boots Righteous Path",
["Tul-Sith tattoo"] = "Tul-Sith tattoo",
["scroll with githyanki writings on it"] = "scroll githyanki",
["signet of Malafont"] = "signet malafont gold heavy ring",
["signet of Yorimandil"] = "Yorimandil signet ring black stone",
["disease-ridden tatters"] = "tatters disease ridden",
["heavy steel rod called, \"Twin\""] = "steel rod twin",
["can of Armor-Brite polish"] = "can armor brite polish",
["sword of the Survivor"] = "sword Survivor",
["iridescent titanium dagger"]= "dagger iridescent titanium",
["iridescent titanium sword"]= "sword iridescent titanium",
["scrap metal club"] = "scrap metal club",
["large gear"] = "gear",







-- junk ammo
["standard arrows"] = "standard arrows brace",
["brace of barbed arrows"] = "arrows brace barbed",




-- situtionally decent items, you may want to comment out if you're new:
["Great Shield, \"Tyranny\""] = "great shield tyranny lordgear",
["lord's head chalice"] = "chalice head lord",
["sword of ascension"] = " sword ascension",
["white dragonscale vambrace"] = "white dragonscale vambrace",
["watershape"] = "watershape",
["plate of the oblivious defender"] = "armor plate oblivious defender",
["helm of the oblivious defender"] = "helmet oblivious defender",
["gleam of fading hope"] = "gleam ember flicker fading hope",
["ring of the Burning River"] = "ring burning river lordgear",
["nightsky cuirass"] = "nightsky cuirass chest-plate armored",

}

DamageVerbTable = DamageVerbTable or {}

DamageVerbTable["nil"] = {0, 0, "white"}
DamageVerbTable["pathetic"] = {1, 2, "white"}
DamageVerbTable["weak"] = {3, 4, "white"}
DamageVerbTable["intensity"] = {5, 6, "white"}
DamageVerbTable["punishing"] = {7, 8, "white"}
DamageVerbTable["surprising"] = {9, 10, "white"}
DamageVerbTable["amazing"] = {11, 14, "white"}
DamageVerbTable["astonishing"] = {15, 18, "white"}
DamageVerbTable["mauling"] = {19, 22, "white"}
DamageVerbTable["MAULING"] = {23, 26, "white"}
DamageVerbTable["*MAULING*"] = {27, 30, "white"}
DamageVerbTable["**MAULING**"] = {31, 34, "white"}
DamageVerbTable["***MAULING***"] = {35, 38, "white"}
DamageVerbTable["decimating"] = {39, 42, "white"}
DamageVerbTable["DECIMATING"] = {43, 46, "white"}
DamageVerbTable["*DECIMATING*"] = {47, 50, "white"}
DamageVerbTable["**DECIMATING**"] = {51, 55, "white"}
DamageVerbTable["***DECIMATING***"] = {56, 60, "white"}
DamageVerbTable["devastating"] = {61, 65, "white"}
DamageVerbTable["DEVASTATING"] = {66, 70, "white"}
DamageVerbTable["*DEVASTATING*"] = {71, 75, "white"}
DamageVerbTable["**DEVASTATING**"] = {76, 80, "white"}
DamageVerbTable["***DEVASTATING***"] = {81, 85, "white"}
DamageVerbTable["pulverizing"] = {86, 90, "white"}
DamageVerbTable["PULVERIZING"] = {91, 95, "white"}
DamageVerbTable["*PULVERIZING*"] = {96, 100, "white"}
DamageVerbTable["**PULVERIZING**"] = {101, 110, "white"}
DamageVerbTable["***PULVERIZING***"] = {111, 120, "white"}
DamageVerbTable["maiming"] = {121, 130, "white"}
DamageVerbTable["MAIMING"] = {131, 140, "white"}
DamageVerbTable["*MAIMING*"] = {141, 150, "white"}
DamageVerbTable["**MAIMING**"] = {151, 160, "white"}
DamageVerbTable["***MAIMING***"] = {161, 170, "white"}
DamageVerbTable["eviscerating"] = {171, 180, "white"}
DamageVerbTable["EVISCERATING"] = {181, 190, "white"}
DamageVerbTable["*EVISCERATING*"] = {191, 200, "white"}
DamageVerbTable["**EVISCERATING**"] = {201, 225, "white"}
DamageVerbTable["***EVISCERATING***"] = {226, 250, "white"}
DamageVerbTable["mutilating"] = {251, 275, "pink"}
DamageVerbTable["MUTILATING"] = {276, 300, "pink"}
DamageVerbTable["*MUTILATING*"] = {301, 325, "pink"}
DamageVerbTable["**MUTILATING**"] = {326, 350, "pink"}
DamageVerbTable["***MUTILATING***"] = {351, 375, "pink"}
DamageVerbTable["disemboweling"] = {376, 400, "pink"}
DamageVerbTable["DISEMBOWELING"] = {401, 425, "pink"}
DamageVerbTable["*DISEMBOWELING*"] = {426, 450, "pink"}
DamageVerbTable["**DISEMBOWELING**"] = {451, 475, "pink"}
DamageVerbTable["***DISEMBOWELING***"] = {476, 500, "green"}
DamageVerbTable["dismembering"] = {501, 550, "green"}
DamageVerbTable["DISMEMBERING"] = {551, 600, "green"}
DamageVerbTable["*DISMEMBERING*"] = {601, 650, "green"}
DamageVerbTable["**DISMEMBERING**"] = {651, 700, "green"}
DamageVerbTable["***DISMEMBERING***"] = {701, 750, "green"}
DamageVerbTable["massacring"] = {751, 800, "green"}
DamageVerbTable["MASSACRING"] = {801, 850, "green"}
DamageVerbTable["*MASSACRING*"] = {851, 900, "green"}
DamageVerbTable["**MASSACRING**"] = {901, 950, "green"}
DamageVerbTable["***MASSACRING***"] = {951, 1000, "green"}
DamageVerbTable["mangling"] = {1001, 1100, "yellow"}
DamageVerbTable["MANGLING"] = {1101, 1200, "yellow"}
DamageVerbTable["*MANGLING*"] = {1201, 1300, "yellow"}
DamageVerbTable["**MANGLING**"] = {1301, 1400, "yellow"}
DamageVerbTable["***MANGLING***"] = {1401, 1500, "yellow"}
DamageVerbTable["demolishing"] = {1501, 1600, "yellow"}
DamageVerbTable["DEMOLISHING"] = {1601, 1700, "yellow"}
DamageVerbTable["*DEMOLISHING*"] = {1701, 1800, "yellow"}
DamageVerbTable["**DEMOLISHING**"] = {1801, 1900, "yellow"}
DamageVerbTable["***DEMOLISHING***"] = {1901, 2000, "yellow"}
DamageVerbTable["obliterating"] = {2001, 2200, "red"}
DamageVerbTable["OBLITERATING"] = {2201, 2400, "red"}
DamageVerbTable["*OBLITERATING*"] = {2401, 2600, "red"}
DamageVerbTable["**OBLITERATING**"] = {2601, 2800, "red"}
DamageVerbTable["***OBLITERATING***"] = {2801, 3000, "red"}
DamageVerbTable["annihilating"] = {3001, 3200, "red"}
DamageVerbTable["ANNIHILATING"] = {3201, 3400, "red"}
DamageVerbTable["*ANNIHILATING*"] = {3401, 3600, "red"}
DamageVerbTable["**ANNIHILATING**"] = {3601, 3800, "red"}
DamageVerbTable["***ANNIHILATING***"] = {3801, 4100, "red"}
DamageVerbTable["&gt;***ANNIHILATING***&lt;"] = {4001, 4500, "red"}
DamageVerbTable["&gt;&gt;***ANNIHILATING***&lt;&lt;"] = {4501, 5000, "red"}
DamageVerbTable["&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;"] = {5001, 5500, "red"}
DamageVerbTable["&gt;&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;&lt;"] = {5501, 6000, "red"}
DamageVerbTable["eradicating"] = {6001, 6500, "blue"}
DamageVerbTable["ERADICATING"] = {6500, 7000, "blue"}
DamageVerbTable["*ERADICATING*"] = {7000, 7500, "blue"}
DamageVerbTable["**ERADICATING**"] = {7500, 7800, "blue"}
DamageVerbTable["***ERADICATING***"] = {7800, 8200, "blue"}
DamageVerbTable["&gt;***ERADICATING***&lt;"] = {8200, 8500, "blue"}
DamageVerbTable["&gt;&gt;***ERADICATING***&lt;&lt;"] = {8500, 9000, "blue"}
DamageVerbTable["&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;"] = {9000, 9500, "blue"}
DamageVerbTable["&gt;&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;&lt;"] = {9500, 1000, "blue"}
DamageVerbTable["vaporizing"] = {10000, 11000, "blue"}
DamageVerbTable["VAPORIZING"] = {11000, 12000, "blue"}
DamageVerbTable["*VAPORIZING*"] = {12000, 13000, "blue"}
DamageVerbTable["**VAPORIZING**"] = {13000, 14000, "blue"}
DamageVerbTable["***VAPORIZING***"] = {14000, 15000, "blue"}
DamageVerbTable["&gt;***VAPORIZING***&lt;"] = {15000, 16500, "blue"}
DamageVerbTable["&gt;&gt;***VAPORIZING***&lt;&lt;"] = {16500, 18000, "blue"}
DamageVerbTable["&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;"] = {18000, 19000, "blue"}
DamageVerbTable["&gt;&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;&lt;"] = {19000, 20000, "blue"}
DamageVerbTable["destructive"] = {20000, 21000, "purple"}
DamageVerbTable["DESTRUCTIVE"] = {21000, 22000, "purple"}
DamageVerbTable["*DESTRUCTIVE*"] = {22000, 23000, "purple"}
DamageVerbTable["**DESTRUCTIVE**"] = {23000, 24000, "purple"}
DamageVerbTable["***DESTRUCTIVE***"] = {24000, 25000, "purple"}
DamageVerbTable["****DESTRUCTIVE****"] = {25000, 26000, "purple"}
DamageVerbTable["&gt;****DESTRUCTIVE****&lt;"] = {26000, 27000, "purple"}
DamageVerbTable["&gt;&gt;****DESTRUCTIVE****&lt;&lt;"] = {27000, 28000, "purple"}
DamageVerbTable["&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;"] = {28000, 29000, "purple"}
DamageVerbTable["&gt;&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;&lt;"] = {29000, 30000, "purple"}
DamageVerbTable["=&gt;&gt;&gt;&gt;***DESTRUCTIVE***&lt;&lt;&lt;&lt;="] = {30000, 31000, "purple"}
DamageVerbTable["==&gt;&gt;&gt;&gt;**DESTRUCTIVE**&lt;&lt;&lt;&lt;=="] = {31000, 32000, "purple"}
DamageVerbTable["===&gt;&gt;&gt;&gt;*DESTRUCTIVE*&lt;&lt;&lt;&lt;==="] = {32000, 33000, "purple"}
DamageVerbTable["====&gt;&gt;&gt;&gt;DESTRUCTIVE&lt;&lt;&lt;&lt;===="] = {33000, 34000, "purple"}
DamageVerbTable["extreme"] = {34000, 35000, "dark_violet"}
DamageVerbTable["EXTREME"] = {35000, 36000, "dark_violet"}
DamageVerbTable["*EXTREME*"] = {36000, 37000, "dark_violet"}
DamageVerbTable["**EXTREME**"] = {37000, 38000, "dark_violet"}
DamageVerbTable["***EXTREME***"] = {38000, 39000, "dark_violet"}
DamageVerbTable["****EXTREME****"] = {39000, 40000, "dark_violet"}
DamageVerbTable["&gt;****EXTREME****&lt;"] = {40000, 41000, "dark_violet"}
DamageVerbTable["&gt;&gt;****EXTREME****&lt;&lt;"] = {41000, 42000, "dark_violet"}
DamageVerbTable["&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;"] = {42000, 43000, "dark_violet"}
DamageVerbTable["&gt;&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;&lt;"] = {43000, 44500, "dark_violet"}
DamageVerbTable["=&gt;&gt;&gt;&gt;***EXTREME***&lt;&lt;&lt;&lt;="] = {44500, 47000, "dark_violet"}
DamageVerbTable["==&gt;&gt;&gt;&gt;**EXTREME**&lt;&lt;&lt;&lt;=="] = {47000, 48000, "dark_violet"}
DamageVerbTable["===&gt;&gt;&gt;&gt;*EXTREME*&lt;&lt;&lt;&lt;==="] = {48000, 50000, "dark_violet"}
DamageVerbTable["====&gt;&gt;&gt;&gt;EXTREME&lt;&lt;&lt;&lt;===="] = {50000, 51000, "dark_violet"}
DamageVerbTable["porcine"] = {51000, 53000, "gold"}
DamageVerbTable["PORCINE"] = {53000, 55000, "gold"}
DamageVerbTable["*PORCINE*"] = {55000, 57000, "gold"}
DamageVerbTable["**PORCINE**"] = {57000, 59000, "gold"}
DamageVerbTable["***PORCINE***"] = {59000, 61000, "gold"}
DamageVerbTable["&gt;***PORCINE***&lt;"] = {61000, 65000, "gold"}
DamageVerbTable["&gt;&gt;***PORCINE***&lt;&lt;"] = {65000, 70000, "gold"}
DamageVerbTable["&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;"] = {70000, 75000, "gold"}
DamageVerbTable["&gt;&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;&lt;"] = {75000, 80000, "gold"}
DamageVerbTable["Divine"] = {80000, 100000, "gold"}
DamageVerbTable["daunting"] = {100000, 200000, "gold"}








</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Try Action Functions</name>
						<packageName></packageName>
						<script>TryActionSet = TryActionSet or {}
TryFunctionSet = TryFunctionSet or {}
TryLockSet = TryLockSet or {}
TryLookStatus = TryLookStatus or true

-- TryAction: will attempt an action only if the action hasn't already been tried in the current wait period
-- Syntax: TryAction(action, wait)
-- action - command to send to server
-- wait - time to wait before allowing the command to be tried again
-- e.g. TryAction("racial revival", 10)
function TryAction(action, wait)
  assert(wait&gt;0)
  assert(action~="cast" or action ~= "rescue" or action ~= "queue" or action ~= "queuepriority")
  if TryActionSet[action] == nil then
    TryActionSet[action] = true
    send(action)
    tempTimer(wait, function() TryActionSet[action] = nil end)
    return true
  else
    -- action already called
    return false
  end
end

-- TryCast: will try a spell only if another spell hasn't been cast in the wait period
-- Syntax: TryCast(action, wait)
-- action - command to send to server
-- wait - time to wait before allowing the command to be tried again
-- e.g. TryCast("cast sanc", 7)
function TryCast(action, wait)
  assert(wait&gt;0)
  --pdebug("TryCast(" .. action .. ", " .. wait .. ") called")
  if TryActionSet["cast"] == nil then
    TryActionSet["cast"] = true
    send(action) 
    tempTimer(wait, function() TryActionSet["cast"] = nil end)
    return true
  else
    -- action already called
    return false
  end  
end

function TryRescue(action, wait)
  assert(wait&gt;0)
  if TryActionSet["rescue"] == nil then
    TryActionSet["rescue"] = true
    send(action) 
    tempTimer(wait, function() TryActionSet["rescue"] = nil end)
    return true
  else
    -- action already called
    return false
  end  
end

function TryQueue(action, wait)
  assert(wait&gt;0)
  if TryActionSet["queue"] == nil then
    TryActionSet["queue"] = true
    OnMobDeathQueue(action)
    tempTimer(wait, function() TryActionSet["queue"] = nil end)
    return true
  else
    -- action already called
    return false
  end  
end

function TryQueuePriority(action, wait)
  assert(wait&gt;0)
  if TryActionSet["queuepriority"] == nil then
    TryActionSet["queuepriority"] = true
    OnMobDeathQueuePriority(action)
    tempTimer(wait, function() TryActionSet["queuepriority"] = nil end)
    return true
  else
    -- action already called
    return false
  end  
end

function TryPrint(message, wait)
  assert(wait&gt;0)
  if TryActionSet["print"] == nil then
    TryActionSet["print"] = true
    print(message)
    tempTimer(wait, function() TryActionSet["print"] = nil end)
    return true
  else
    -- action already called
    return false
  end  
end

-- TryFunction(func_id, func, args, wait)
-- Usage: set a unique identifier with func_id
--        input function is passed in two parts: 
--        function name (without brackets) and function arguments as a table
--        wait is in seconds
-- Example: TryFunction("printAlertID", printGameMessage, {"Alert!", "This is a test alert"}, 10)
-- Example: TryFunction("BeepTest", beep, nil, 5)
function TryFunction(func_id, func, args, wait)
  if TryFunctionSet[func_id] == nil then
    TryFunctionSet[func_id] = true
    if args then func(unpack(args)) else func() end
    safeTempTimer("TryFunction-" .. func_id, wait, function() TryFunctionSet[func_id] = nil; end)
    return true
  else
    return false
  end
end


-- returns true if unlocked, otherwise false
function TryLock(lock_id, wait)
  assert(wait&gt;0)
  if not TryLockSet[lock_id] then
    TryLockSet[lock_id] = true
    safeTempTimer("TryLock-" .. lock_id, wait, function() TryLockSet[lock_id] = nil; end)
    return true
  else
    return false
  end
end

function TryActionOnce(action)
  local Action_ID = "ONCE-" .. string.lower(action)
  if TryActionSet[Action_ID] == nil then
    TryActionSet[Action_ID] = true
    send(action)
    return true
  else
    -- action already called
    return false
  end
end


function TryLook()
  if TryLookStatus then
    send("look")
    TryLookStatus = false
    safeEventHandler("TryLookSetTrue", "gmcp.Room.Players", TryLookSetTrue, true)
    return true
  else
    return false
  end
end

function TryLookSetTrue()
  TryLookStatus = true
end

safeEventHandler("TryLookSetTrue", "gmcp.Room.Players", TryLookSetTrue, true)








</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Game Functions</name>
						<packageName></packageName>
						<script>function beep()
  if GlobalVar.Silent then return end
  playSoundFile({name = getMudletHomeDir().. "/Vagonuth-Package/beep.wav"})
end

function QuickBeep()
  if GlobalVar.Silent then return end
  playSoundFile({name = getMudletHomeDir().. "/Vagonuth-Package/quickbeep.wav"})
end

function QuickBeepVerbose()
  if not GlobalVar.Verbose then return end
  QuickBeep()
end

function VictoryBeep()
  if GlobalVar.Silent then return end
  playSoundFile({name = getMudletHomeDir().. "/Vagonuth-Package/victorybeep.mp3", volume = 75})
end

function TingleBeep()
  if GlobalVar.Silent then return end
  playSoundFile({name = getMudletHomeDir().. "/Vagonuth-Package/tingle.mp3", volume = 75})
end


function IsGroupMate(groupie_name) 
  groupie_name = GMCP_name(groupie_name)

  for k,v in ipairs(gmcp.Char.Group.List) do
      v.name = RemoveColourCodes(v.name)
      v.name = GMCP_name(v.name)
      if (v.name == groupie_name) then
        return true -- return TRUE if group_name is a player in our group
      end
  end

  return false -- return FALSE is groupie_name is not a player in our group OR he's invis and we can't detect them
end

-- Grouped() - returns true if grouped, otherwise false 
function Grouped()
  return (TableSize(GlobalVar.GroupMates) &gt; 1)
end

-- GroupLeader() - returns true if you are the group leader, otherwise false
function GroupLeader()
  return (GlobalVar.GroupLeader == StatTable.CharName)
end

-- IsGroupLeader(groupie_name) - returns true if "groupie_name" is the the group leader, otherwise false
function IsGroupLeader(groupie_name)
  groupie_name = GMCP_name(groupie_name)
  if groupie_name == "Someone" then return false end
  if groupie_name == GlobalVar.GroupLeader then return true else return false end
end

-- Returns how many in group
function GroupSize()
  return TableSize(GlobalVar.GroupMates)
end

-- SafeArea() -- returns true if Sanctum or Thorngate
function SafeArea()
  if (gmcp.Room.Info.zone == "{ ALL  } AVATAR  Sanctum" or 
      gmcp.Room.Info.zone == "{ LORD } Dev     Rietta's Wonders" or 
      gmcp.Room.Info.zone == "{ LORD } Crom    Thorngate" or
      gmcp.Room.Info.zone == "{ LORD } Vorak   Lord Mud School" or
      gmcp.Room.Info.zone == "{ LORD } Odin    Labyrinth of Bo'vul" or
      gmcp.Room.Info.zone == "{ LORD } Crom    The House of Bandu" or
      gmcp.Room.Info.zone == "{ ALL  } AVATAR  Locker Rental Agency") then
    return true
  else
    return false
  end
end

-- While at sanc,d,w or thorn 2e, asks the known bots there for heals based on missing hp
function AskBotsForHeals()
  local healspell
  local healaugment = 4
  local missinghp = (StatTable.max_health - StatTable.current_health)
  local healmultiple = 1
  
  assert(missinghp &gt;= 0, "AskBotsforHeals() Error: missinghp not a positive integer")

  if (gmcp.Room.Info.zone == "{ ALL  } AVATAR  Sanctum") then
    healspell = "div"
  elseif (gmcp.Room.Info.zone == "{ LORD } Dev     Rietta's Wonders") then
    healspell = "comf"
    healmultiple = 2 -- comf provides twice the hp as div (i.e. 500hp, instead of 250hp)
  else
    print("AskBotsForHeals() Error: not in sanc or thorn 2e")
    return false
  end
  
  -- Only ask for div4 (comf4) if missing 1000hp (2000hp), otherwise save the bots some mana and ask for a smaller heal
  if missinghp &lt; (1000 * healmultiple) then
    if missinghp == 0 then
      return true
    elseif missinghp &lt; (250 * healmultiple) then
      healaugment = ""
    elseif missinghp &lt; (500 * healmultiple) then
      healaugment = 2
    else
      healaugment = 3
    end
  end
  
  if gmcp.Room.Players["Yorrick"] then send("tell yorrick " .. healspell .. healaugment) end
  if gmcp.Room.Players["Martyr"] then send("tell martyr " .. healspell .. healaugment) end
  if gmcp.Room.Players["Logic"] then send("tell logic " .. healspell .. healaugment) end
  if gmcp.Room.Players["Textual"] then send("tell textual " .. healspell .. healaugment) end
  if gmcp.Room.Players["Idle"] then send("tell idle " .. healspell .. healaugment) end
  if gmcp.Room.Players["Eiri"] then send("tell eiri " .. healspell .. healaugment) end
  if gmcp.Room.Players["Arby"] then send("tell arby ".. healspell) end
  if gmcp.Room.Players["Viridi"] then send("tell viridi " .. healspell .. healaugment) end  
  --if gmcp.Room.Players["Juevo"] then send("tell juevo " .. healspell .. healaugment) end
  if gmcp.Room.Players["FlutterFly"] then send("tell flutterfly " .. healspell .. healaugment) end
  if gmcp.Room.Players["Gobo"] then send("tell gobo " .. healspell .. healaugment) end
  return true

end

-- Cleans up the mobname you receive from gmcp.Room.Players[].fullname to remove auras/white spaces
function Clean_MobName(mobname)
    -- Strip brackets, first for single words, second for double words (eg White Aura), likely a better way to do this
    mobname = string.gsub(mobname,"%((%a+)%)","")
    mobname = string.gsub(mobname,"%((%a+ %a+)%)","")
    -- Strip leading and trailing white space
    mobname = string.gsub(mobname, '^%s*(.-)%s*$', '%1')
    return mobname
end


function sendbot(bot, command)
  if (gmcp.Room.Players[bot]) then 
    send("tell " .. bot .. " " .. command)
    return true
  else
    return false
  end
end

function BladetranceMax()
  local MyLevel = StatTable.Level
  local MySubLevel = StatTable.SubLevel

  if MyLevel &lt; 51 then return 0 
  elseif MyLevel == 51  then
    if MySubLevel &lt; 675 then return 0
    elseif MySubLevel &lt; 800 then return 2
    else return 3 end
  elseif MyLevel == 125 then
    if MySubLevel &lt; 100 then return 3
    elseif MySubLevel &lt; 300 then return 4
    elseif MySubLevel &lt; 800 then return 5
    else return 8 end
  else return 8 end

  error("BladetranceMax(): shouldn't be reached")
end

function BldDancing()
  if StatTable.BladedanceTimer or StatTable.DervishTimer or StatTable.InspireTimer or StatTable.UnendTimer or StatTable.VeilTimer then
    return true
  else
    return false
  end
end

function ReverseDir(dir)

  local reversedir  = {
            n = "s",
            e = "w",
            s = "n",
            w = "e",
            u = "d",
            d = "u",
            }
            
  if reversedir[dir] == nil then
    error("Invalid direction provided to ReverseDir - acceptable characters: n, w, e, s, d, u")
    return
  end
  
  return reversedir[dir]
end


-- Beginning Speedwalk

walklist = {}
walkdelay = 0

function speedwalktimer()
  send(walklist[1])
  table.remove(walklist, 1)
  if #walklist&gt;0 then
    tempTimer(walkdelay, [[speedwalktimer()]])
  end
end

-- todo could do a check to make sure its less than 48 sends / wait after 48 sends (see setup alias code)
function speedwalk(dirString, backwards, delay)
  local dirString = dirString:lower()
  walklist      = {}
  walkdelay     = delay
  local reversedir  = {
              n = "s",
              e = "w",
              s = "n",
              w = "e",
              u = "d",
              d = "u",
              }

  if not backwards then
    for count, direction in string.gmatch(dirString, "([0-9]*)([neswud]?t?)") do      -- Edited since AVATAR doesn't have SE, NW, etc., originally was: "([0-9]*)([neswudio][ewnu]?t?)"
        count = (count == "" and 1 or count)
      for i=1, count do
        if delay then walklist[#walklist+1] = direction 
        else if direction ~= "" then send(direction, false) end
        end
      end
    end
  else
    for direction, count in string.gmatch(dirString:reverse(), "(t?[neswud])([0-9]*)") do     -- See above "(t?[ewnu]?[neswudio])([0-9]*)" 
        count = (count == "" and 1 or count)
      for i=1, count do
        if delay then walklist[#walklist+1] = reversedir[direction]
        else if reversedir[direction] ~= "" then send(reversedir[direction], false) end
        end
      end
    end
  end

if walkdelay then speedwalktimer() end

end
-- End speedwalk

function HighlightSelfOnLotto()
  tmpTriggerIDLotto = tmpTriggerIDLotto or nil
  tmpTriggerNameLotto = "LottoSelfHighlight"
  
  if tmpTriggerIDLotto then
    killTrigger(tmpTriggerNameLotto)
    tmpTriggerIDLotto = nil
  end
  
  tmpTriggerIDLotto = tempComplexRegexTrigger(tmpTriggerNameLotto, "^  " .. StatTable.CharName .. "!$", [[]], 0, 0, 0, 0, 0, "yellow", "black", 0, 0, 0, nil)
end

safeEventHandler("HighlightSelfOnLottoID", "CustomProfileInit", "HighlightSelfOnLotto", false)

-- Function to check if StatTable.Class is in the provided list of classes
function IsClass(classList)
    for _, class in ipairs(classList) do
        if StatTable.Class == class then
            return true
        end
    end
    return false
end

-- Function to check if StatTable.Class is not in the provided list of classes
function IsNotClass(classList)
    return not IsClass(classList)
end

-- Function to check if StatTable.Race is in the provided list of Racees
function IsRace(RaceList)
    for _, Race in ipairs(RaceList) do
        if StatTable.Race == Race then
            return true
        end
    end
    return false
end

-- Function to check if StatTable.Race is not in the provided list of Racees
function IsNotRace(RaceList)
    return not IsRace(RaceList)
end

</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Support Packages</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>wait-and-wait-line-v4</name>
						<packageName>wait-and-wait-line-v4</packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>wait-And-waitline</name>
							<packageName></packageName>
							<script>local threads = {}
function wait(seconds)
    local name = "wait_"..tostring(math.random(1000, 999999))
    threads[name] = coroutine.running()
    if threads[name] == nil then
        cecho("&lt;red&gt;wait(): your code needs to be inside coroutine.wrap\n")
        return false
    end
    tempTimer(seconds, "wait_resume('"..name.."')")
    return coroutine.yield()
end

function wait_resume(name)
    local thread = (threads or {})[name]
    if thread == nil then
        cecho("&lt;red&gt;wait(): coroutine thread not found, coroutine lost\n")
        return false
    end
    threads[name] = nil
    local success,msg = coroutine.resume(thread)
    if success == false then
        cecho("&lt;red&gt;wait(): "..msg.."\n")
        cecho("&lt;orange&gt;details: "..debug.traceback(thread).."\n")
        return false
    end
    return true
end

function wait_line(patterns, timeout, action)
    local name = "wait_line_"..tostring(math.random(1000, 999999))
    threads[name] = { coroutine.running() }
    if threads[name][1] == nil then
        cecho("&lt;red&gt;wait_line(): your code needs to be inside coroutine.wrap\n")
        return false
    end
    threads[name][2] = {}
    if type(patterns) == "table" and #patterns &gt; 0 then
        threads[name][4] = {}
        for i=#patterns,1,-1 do
            threads[name][2][i] = tempRegexTrigger(patterns[i], "multi_line_trigger('"..name.."', "..i..", "..#patterns..")", 1)
            disableTrigger(threads[name][2][i])
        end
        enableTrigger(threads[name][2][1])
    elseif type(patterns) == "string" then
        threads[name][2][1] = { tempRegexTrigger(patterns, "single_line_trigger('"..name.."')", 1) }
    else
        cecho("&lt;red&gt;wait_line(): specified pattern type is incorrect\n")
        return false
    end
    if timeout &gt; 0 then
        local timer_id = tempTimer(timeout, "wait_line_timer('"..name.."')")
        threads[name][3] = function() disableTimer(timer_id) killTimer(timer_id) end
    else
        threads[name][3] = function() end
    end
    if action then send(action) end
    return coroutine.yield() or false
end

function wait_line_resume(name)
    local thread = ((threads or {})[name] or {})[1]
    if thread == nil then
        cecho("&lt;red&gt;wait_line(): coroutine thread not found, coroutine lost\n")
        return false
    end
    if coroutine.status(thread) == "suspended" then
        local args = threads[name][4]
        threads[name] = nil
        local success,msg = coroutine.resume(thread, args)
        if success == false then
            cecho("&lt;red&gt;wait_line(): "..msg.."\n")
            cecho("&lt;orange&gt;details: "..debug.traceback(thread).."\n")
        end
    else
        tempTimer(0, "wait_line_resume('"..name.."')")
    end
end

function single_line_trigger(name)
    threads[name][3]()
    threads[name][4] = matches
    wait_line_resume(name)
end

function multi_line_trigger(name, n, m)
    if n == m then
        threads[name][3]()
        threads[name][4][n] = matches
        wait_line_resume(name)
    else
        threads[name][4][n] = matches
        enableTrigger(threads[name][2][n+1])
    end
end

function wait_line_timer(name)
    for _,v in ipairs(threads[name][2]) do
        for _,i in ipairs(v) do
            disableTrigger(i)
            killTrigger(i)
        end
    end
    wait_line_resume(name)
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GMCP</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>GMCP_Vitals</name>
						<packageName></packageName>
						<script>-------------------------------------------------
--         GMCP Update for Status and Vitals   --
-------------------------------------------------

-- AffectsLookup Table
-- Adding new affects to StatTable, e.g, StatTable.Sanctuary, is as easy as adding another entry to AffectsLookup
-- e.g., ["Spell: sanctuary"] = "Sanctuary",
-- you can find the correct spell name by typing "lua gmcp.Char.Status.affects" in game

StatTable = StatTable or {}
StatTable.BladetranceLevel = StatTable.BladetranceLevel or 0

local AffectsLookup = {
  ["Spell: sneak"] = "Sneak",
  ["Spell: shadow form"] = "Sneak",
  ["Spell: move hidden"] = "MoveHidden",
  ["Spell: invis"] = "Invis",
  ["Spell: improved invis"] = "Invis",
  ["Spell: water breathing"] = "WaterBreathing",
  ["Spell: sanctuary"] = "Sanctuary",
  ["Spell: iron monk"] = "Sanctuary",
  ["Spell: fortitudes"] = "Fortitude",
  ["Spell: foci"] = "Foci",
  ["Spell: invincibility"] = "Invincibility",
  ["Spell: barkskin"] = "Barkskin",
  ["Spell: steel skeleton"] = "SteelSkeleton",
  ["Spell: iron skin"] = "IronSkin",
  ["Spell: frenzy"] = "Frenzy",
  ["Spell: awen"] = "Awen",
  ["Spell: aegis"] = "Awen",
  ["Spell: holy aura"] = "HolyAura",
  ["Spell: concentrate"] = "Concentrate",
  ["Spell: werrebocler"] = "Werrebocler",
  ["Spell: endurance"] = "Endurance",
  ["Spell: acumen"] = "Acumen",
  ["Spell: savvy"] = "Savvy",
  ["Spell: mystical barrier"] = "Mystical",
  ["Spell: alertness"] = "Alertness",
  ["Spell: intervention"] = "Intervention",
  ["Spell: blind devotion"] = "BlindDevotion",
  ["Spell: consummation"] = "Consummation",
  ["Spell: solitude"] = "Solitude",
  ["Spell: protection good"] = "ProtectionGood",
  ["Spell: protection evil"] = "ProtectionEvil",
  
  ["Exhausted Spell: solitude"] = "SolitudeTimer",
   ["Exhausted Spell: intervention"] = "InterventionExhaust",
  
  -- sld
  ["Exhausted Spell: square"] = "SquareExhaust",
  ["Exhausted Spell: echelon"] = "EchelonExhaust",
  ["Exhausted Spell: phalanx"] = "PhalanxExhaust",
  ["Exhausted Spell: column"] = "ColumnExhaust",
  ["Spell: square"] = "StanceSquare",
  ["Spell: echelon"] = "StanceEchelon",
  ["Spell: phalanx"] = "StancePhalanx",
  ["Spell: column"] = "StanceColumn",
  
  ["Spell: ether link"] = "EtherLink",
  ["Spell: ether warp"] = "EtherWarp",
  --["Spell: ether crash"] = "EtherCrash",
  ["Exhausted Spell: ether link"] = "EtherLinkExhaust",
  ["Exhausted Spell: ether warp"] = "EtherWarpExhaust",
  --["Exhausted Spell: ether crash"] = "EtherCrashExhaust",
  
  ["Spell: spring rain"] = "SpringRain",
  ["Spell: dark embrace"] = "DarkEmbrace",
  ["Spell: blizzard"] = "Blizzard",
  ["Spell: gale stratum"] = "GaleStratum",
  ["Exhausted Spell: water breathing"] = "WaterBreathingExhaust",
  ["Exhausted Spell: giant strength"] = "GiantStrengthExhaust",
  ["Exhausted Spell: fireball"] = "FireballExhaust",
  ["Exhausted Spell: chill touch"] = "ChillTouchExhaust",
  ["Exhausted Spell: acid blast"] = "AcidBlastExhaust",
  ["Exhausted Spell: burning hands"] = "BurningHandsExhaust",
  ["Exhausted Spell: lightning bolt"] = "LightningBoltExhaust",
  ["Exhausted Spell: cure light"] = "CureLightExhaust",
  ["Exhausted Spell: cure serious"] = "CureSeriousExhaust",
  ["Exhausted Spell: cure critical"] = "CureCriticalExhaust",
  
  
  -- bladedancer
  ["Spell: bladedance"] = "BladedanceTimer",
  ["Spell: dervish dance"] = "DervishTimer",  
  ["Spell: inspiring dance"] = "InspireTimer",
  ["Spell: unending dance"] = "UnendTimer",
  ["Spell: veil of blades"] = "VeilTimer",
  ["Spell: bladetrance"] = "Bladetrance",
  ["Exhausted Spell: bladetrance"] = "BladetranceExhaust",
  ["Exhausted Spell: bladedance"] = "BladedanceExhaust",
  ["Exhausted Spell: dervish dance"] = "DervishExhaust",
  ["Exhausted Spell: inspiring dance"] = "InspireExhaust",
  ["Exhausted Spell: unending dance"] = "UnendExhaust",
  ["Exhausted Spell: veil of blades"] = "VeilExhaust",
  ["Spell: iron veil"] = "IronVeil",
  ["Spell: furious rampage"] = "Rampage",
  
  -- cleric
  ["Spell: artificer blessing"] = "ArtificerBlessing",
  ["Spell: artificer blessing aura"] = "ArtificerBlessingAura", 
  ["Spell: discordia"] = "Discordia",
  ["Spell: discordia aura"] = "DiscordiaAura",
  ["Spell: divine adjutant"] = "DivineAdjutant",
  ["Spell: divine grace"] = "DivineGrace",
  ["Spell: glorious conquest"] = "GloriousConquest",
  ["Spell: grim harvest"] = "GrimHarvest",
  ["Spell: grim harvest aura"] = "GrimHarvestAura",
  ["Spell: hallowed nimbus"] = "HallowedNimbus",
  ["Spell: protective vigil"] = "ProtectiveVigil",
  ["Spell: sylvan benediction"] = "SylvanBenediction",
  ["Spell: unholy rampage"] = "UnholyRampage",  
  ["Spell: unholy rampage aura"] = "UnholyRampageAura", 
    
  ["Spell: saving grace"] = "SavingGrace",
  ["Spell: death shroud"] = "DeathShroud",
  ["Spell: defiled flesh"]= "DefiledFlesh",
  ["Spell: vile philosophy"] = "VilePhilosophy",
  ["Spell: summon necrit"] = "SummonNecrit",
  ["Spell: immolation"] = "Immolation",
  ["Spell: astral prison"] = "AstralPrison",
  ["Exhausted Spell: tainted genius"] = "TaintedExhaust",
  ["Exhausted Spell: unholy bargain"] = "UnholyBargainExhaust",
  ["Exhausted Spell: brimstone"] = "BrimstoneExhaust",
  ["Exhausted Spell: emotive drain"] = "EmotiveDrainExhaust",
  
  ["Spell: regeneration"]  = "Regeneration",
  ["Spell: protective stance"] = "StanceProtective",
  ["Exhausted Spell: protective stance"] = "StanceProtectiveExhaust",
  ["Spell: surefoot stance"] = "StanceSurefoot",
  ["Exhausted Spell: surefoot stance"] = "StanceSurefootExhaust",  
  ["Spell: relentless stance"] = "StanceRelentless",
  ["Exhausted Spell: relentless stance"] = "StanceRelentlessExhaust",
  ["Exhausted Spell: soul stance"] = "StanceSoulExhaust",
  ["Spell: rally"] = "Rally",
  ["Spell: tear"] = "Tear",
  ["Exhausted Spell: tear"] = "TearExhaust",
  ["Spell: fervor"] = "Fervor",
  ["Spell: prayer"] = "Prayer",
  ["Spell: holy zeal"] = "HolyZeal",
  ["Spell: joined boon"] = "JoinedBoon",
  ["Spell: heroic boon"] = "HeroicBoon",
  ["Spell: shared boon"] = "SharedBoon",
  ["Spell: valorous boon"] = "ValorousBoon",
  ["Spell: final boon"] = "FinalBoon",
  
  -- monk / shf
  ["Spell: bear stance"] = "BearStance",
  ["Spell: emu stance"] = "EmuStance",
  ["Spell: tiger stance"] = "TigerStance",
  ["Exhausted Spell: bear stance"] = "BearStanceExhaust",
  ["Exhausted Spell: emu stance"] = "EmuStanceExhaust",
  ["Exhausted Spell: tiger stance"] = "TigerStanceExhaust",
  ["Exhausted Spell: vampire fang"] = "VampireFangExhaust",
  ["Exhausted Spell: spectral fang"] = "SpectralFangExhaust",
  ["Spell: vampire fang"] = "VampireFang",
  ["Spell: spectral fang"] = "SpectralFang",
  ["Spell: dagger hand"] = "DaggerHand",
  ["Spell: stone fist"] = "StoneFist",
  ["Spell: flow like water"] = "FlowLikeWater",
  ["Exhausted Spell: flow like water"] = "FlowLikeWaterExhaust",
  ["Spell: burning fury"] = "BurningFury",
  ["Exhausted Spell: burning fury"] = "BurningFuryExhaust",

  
  
  
  -- Psi's / Mnd's
  ["Spell: kinetic chain"] = "KineticChain",
  ["Exhausted Spell: kinetic chain"] = "KineticChainExhaust",
  ["Spell: gravitas"] = "Gravitas",
  ["Exhausted Spell: gravitas"] = "GravitasExhaust",
  ["Spell: fury of the mind"] = "FuryOfTheMind",
  ["Spell: minds eye"] = "MindsEye",
  ["Spell: stunning weapon"] = "StunningWeapon",
  ["Spell: distracting weapon"] = "DistractingWeapon",
  ["Spell: disabling weapon"] = "DisablingWeapon",
  ["Spell: restricting weapon"] = "RestrictingWeapon",
  ["Spell: felling weapon"] = "FellingWeapon",
  ["Spell: conscious weapon"] = "ConsciousWeapon",
  ["Spell: intelligent weapon"] = "IntelligentWeapon",
  ["Spell: orbit"] = "Orbit",
  ["Spell: empathic resonance"] = "EmpathicResonance",
  ["Spell: hive mind"] = "HiveMind",
  ["Exhausted Spell: psyphon"] = "PsyphonExhaust",
  
  -- migraine exhausts
  ["Exhausted Spell: water breathing"] = "WaterBreathingExhaust",
  ["Exhausted Spell: giant strength"] = "GiantStrengthExhaust",
  ["Exhausted Spell: fly"] = "FlyExhaust",
  ["Exhausted Spell: cure light"] = "CureLightExhaust",
  
  -- racials
  ["Spell: racial revival"] = "RacialRevival",
  ["Racial revival fatigue"] = "RacialRevivalFatigue",
  ["Spell: racial fire aura"] = "RacialFireaura",
  ["Racial fireaura fatigue"] = "RacialFireauraFatigue",
  ["Racial innervate fatigue"] = "RacialInnervateFatigue",
  ["Spell: racial galvanize"] = "RacialGalvanize",
  ["Racial galvanize fatigue"] = "RacialGalvanizeFatigue",
  ["Racial breath fatigue"] = "RacialBreathFatigue",
  ["Spell: racial frenzy"] = "RacialFrenzy",
  ["Racial frenzy fatigue"] = "RacialFrenzyFatigue",
  ["Racial roar fatigue"] = "RacialRoarFatigue",
  ["Racial expunge fatigue"] = "RacialExpungeFatigue",
  ["Spell: racial devour"] = "RacialDevour",
  ["Racial devour fatigue"] = "RacialDevourFatigue",
  
  -- debuffs
  ["Spell: calm"] = "Calm",
  ["Spell: awe"] = "Calm",
  ["Spell: fear"] = "Fear",
  ["Spell: poison"] = "Poison",
  ["Spell: curse"] = "Curse",
  ["Spell: demonfire"] = "Demonfire",
  ["Spell: virus"] = "Virus",
  ["Spell: biotoxin"] = "Biotoxin",
  ["Spell: venom"] = "Venom",
  ["Spell: toxin"] = "Toxin",
  ["Spell: doom toxin"] = "DoomToxin",
  ["Spell: flash"] = "Flash",
  ["Spell: weaken"] = "Weaken",
  ["Spell: blindness"] = "Blindness",
  ["Spell: overconfidence"] = "Overconfidence",
  ["Spell: scramble"] = "Scramble",
  ["Spell: panic"] = "Panic",
  ["Spell: heartbane"] = "Heartbane",
  ["Spell: unrest"] = "Unrest",
  ["Spell: faerie fire"] = "FaerieFire",
  ["Spell: plague"] = "Plague",
  ["Spell: shun"] = "Shun",
  
  ["Spell: hand of god"] = "HandOfGod",
  
}

function GMCP_Vitals()    
    StatTable.CharName = GMCP_name(gmcp.Char.Status.character_name)
    StatTable.Race, StatTable.Class = gmcp.Char.Status.race, gmcp.Char.Status.class
    StatTable.Level, StatTable.SubLevel = tonumber(gmcp.Char.Status.level), tonumber(gmcp.Char.Status.sublevel)
    StatTable.HitRoll, StatTable.DamRoll = tonumber(gmcp.Char.Status.hitroll) or 0, tonumber(gmcp.Char.Status.damroll) or 0
    StatTable.ArmorClass = tonumber(gmcp.Char.Status.ac) or 0
    StatTable.Items, StatTable.MaxItems = tonumber(gmcp.Char.Vitals.items), tonumber(string.sub(gmcp.Char.Vitals.string, -3))
    StatTable.Weight, StatTable.MaxWeight = tonumber(gmcp.Char.Vitals.wgt), tonumber(gmcp.Char.Vitals.maxwgt)
    StatTable.Alignment = tonumber(gmcp.Char.Status.alignment) or 0
    StatTable.Position = gmcp.Char.Vitals.position
    StatTable.Quicken = tonumber(gmcp.Char.Vitals.quicken) or 0
    StatTable.Augment = tonumber(gmcp.Char.Vitals.augment) or 0
    StatTable.Surge = tonumber(gmcp.Char.Vitals.surge) or 0
     
    StatTable.current_health, StatTable.max_health = tonumber(gmcp.Char.Vitals.hp), tonumber(gmcp.Char.Vitals.maxhp)
    StatTable.current_mana = (gmcp.Char.Vitals.maxmp == nil or gmcp.Char.Vitals.maxmp == "0") and 1 or tonumber(gmcp.Char.Vitals.mp)
    StatTable.max_mana = (gmcp.Char.Vitals.maxmp == nil or gmcp.Char.Vitals.maxmp == "0") and 1 or tonumber(gmcp.Char.Vitals.maxmp)
    StatTable.current_moves, StatTable.max_moves = tonumber(gmcp.Char.Vitals.mv), tonumber(gmcp.Char.Vitals.maxmv)
    StatTable.current_tnl,StatTable.max_tnl = tonumber(gmcp.Char.Vitals.tnl), tonumber(gmcp.Char.Vitals.maxtnl)
    StatTable.current_mon,StatTable.max_mon = 0, 0
    StatTable.current_mon,StatTable.max_mon = tonumber(gmcp.Char.Vitals.monhp), tonumber(gmcp.Char.Vitals.maxmonhp)
    
    StatTable.Enemy = gmcp.Char.Status.opponent_name
    StatTable.EnemyHP, StatTable.EnemyMaxHP = tonumber(gmcp.Char.Status.opponent_health), tonumber(gmcp.Char.Status.opponent_health_max)
    
    StatTable.InnerQi = tonumber(gmcp.Char.Vitals.innerqi) or 0
    StatTable.OuterQi = tonumber(gmcp.Char.Vitals.outerqi) or 0
     
    for _, affect in pairs(AffectsLookup) do
      StatTable[affect] = nil
    end
    
    -- Affects that cannot be looked up with GetDuration(v) should be listed seperately below
    StatTable.Tainted = nil
    StatTable.Oath = nil
    StatTable.EtherCrash = nil
    StatTable.EtherCrashDuration = nil
    StatTable.EtherCrashExhaust = nil
    StatTable.RacialInnervate = nil
    StatTable.RacialInnervateRegen = nil
    
    -- Iterate over gmcp.Char.Status.affects and set StatTable variables using the lookup table
    if StatTable.Level &gt;= 25 and not (gmcp.Char.Status.affects == "" or gmcp.Char.Status.affects == nil) then  
        for k,v in pairs(gmcp.Char.Status.affects) do
        
            -- Check if the affect name exists in the lookup table
            local fieldName = AffectsLookup[k]
            
            if fieldName then
                StatTable[fieldName] = GetDuration(v)
            elseif(k == "Spell: tainted genius") then StatTable.Tainted = 1
            elseif(k == "Spell: oath") then StatTable.Oath = splitstring(v, " ")[2]
            elseif(k == "Spell: ether crash") then
              -- In the affects time, Ether Crash is set to 1 if it's turned on and 2 if its been exhausted
              StatTable.EtherCrash = tonumber(string.match(v, 'by%s*(%d+)'))
              if StatTable.EtherCrash == 1 then
                StatTable.EtherCrashDuration = GetDuration(v)
              else
                StatTable.EtherCrashExhaust = GetDuration(v)
              end
            elseif(k == "Exhausted Spell: ether crash") then
              if not StatTable.EtherCrashExhaust then StatTable.EtherCrashExhaust = GetDuration(v) end
            elseif(k == "Spell: racial innervate") then
                StatTable.RacialInnervate = tonumber(string.match(v, '(%d[,.%d]*)%s*hours'))
                StatTable.RacialInnervateRegen = tonumber(string.match(v, '%d[%d.,]*'))
            end
        end
    end

    if(GlobalVar.GUI) then UpdateGUI() end 

end
    
function GetDuration(affect)
    if(affect == "continuous") then return affect
    elseif (affect == "seems to be wavering") then return "Wavering"
    elseif(affect == "for a very long time") then return "Very Long"
    elseif(affect == "for seemingly forever") then return "Forever"
    elseif(affect == "for a long time") then return "Long Time"
    elseif(affect == "for a while") then return "A While"
    elseif(affect == "for a small amount of time") then return "Small Time"
    elseif(affect == "for a tiny amount of time") then return "Tiny Time"
    elseif(string.sub(affect, -19) == "for an unknown time") then return 1
    --else return tonumber(string.match(affect, "for (%d+) hours")) end
    else return tonumber(string.match(affect,"%d+",string.len(affect) -10)) end
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Vitals</string>
							<string>gmcp.Char.Status</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>GMCP_Group</name>
						<packageName></packageName>
						<script>function GMCP_Group()
    local GroupieTableIndex = 0
    
    StatTable.InjuredCount = 0
    StatTable.CriticalInjured = 0
    GlobalVar.VizMonitor = ""
    LastGroupUpdate = deepcopy(GlobalVar.GroupMates) or {}
    GlobalVar.GroupMates = {}
    GlobalVar.PsiInGroup = false
    
    local InjuredPercent = StaticVars.InjuredPercent
    local CriticalPercent = StaticVars.CriticalPercent
    
    local smallest_hppct = InjuredPercent -- swap monitors to groupie with lowest hp% &lt; 85%
    local GroupList = gmcp.Char.Group.List or nil
    local PlayersInRoom = gmcp.Room.Players or nil
    
    if not GroupList then return end
    
    -- Hide all the group labels
    for index = 1, StaticVars.MaxGroupLabels do
      GroupieTable[index]:hide()
    end

    for _, Player in ipairs(GroupList) do
      GroupieTableIndex = GroupieTableIndex + 1    
      
      -- Clean's the players name if they are currently coloured
      Player.name = GMCP_name(RemoveColourCodes(Player.name))
      
      -- We're blind! Let's see if we can figure out who is who anyways
      if Player.name == "Someone" then
        Player.name = UpdateGroupMatesFindSomeone(Player, LastGroupUpdate)
      end
      
      -- Update GroupMates table
      UpdateGroupMateVitals(Player)
     
      -- Update GUI Groupmate table
      if GlobalVar.GUI and GroupieTableIndex &lt;= StaticVars.MaxGroupLabels then
          UpdateGroupGUI(GroupieTableIndex, Player)
      end
    
      -- Save who the GroupLeader is for use in other functions
      if Player.leader then 
          GlobalVar.GroupLeader = Player.name
      end
      
      -- To improve trigger performance, only enable PSI weapon pick up trigs when a PSI is in the group
      if(Player.class == "Psi" and Player.race ~= "Gth" and Player.name ~= "Someone") then
          GlobalVar.PsiInGroup = true
          if not PSITrigger.TriedLookUp[Player.name] then pdebug("GMCP_Group called PSITrigger.Update() due to new Psi in the group"); PSITrigger.Update() end
      end

      -- Code to count how many injured and wounded (defined at the top) are in the group
      if(Player.position ~= "Sleep" and Player.position ~= "Rest") then --we don't want to capture groupings regening
        
        local player_hppct = tonumber(Player.hp) / tonumber(Player.maxhp)
          
        if(player_hppct &lt; InjuredPercent) then
          StatTable.InjuredCount = StatTable.InjuredCount +1
          if(player_hppct &lt; CriticalPercent) then
            StatTable.CriticalInjured = StatTable.CriticalInjured +1
          end
        end
        
        -- For all groupies that are not us, check who has the lowest % of HP and set them as our monitor
        if (Player.name ~= StatTable.CharName and (Player.position ~= "Sleep" or Player.position ~= "Rest")) then
          if (player_hppct &lt; smallest_hppct) and not GlobalVar.AutoHealExclusionList[Player.name] then
            smallest_hppct = player_hppct
            GlobalVar.VizMonitor = Player.name
          end
        end
      end -- end of counting injured groupies
      
      if StatTable.Position == "Sleep" and Player.position == "Fight" then
        TryPrint("Alert! Group mates are fighting!", 10)
      end
      
    end -- end for loop
end

function UpdateGroupMatesFindSomeone(Player, LastGroupUpdate)
  if TableSize(LastGroupUpdate) == 0 then return "Someone" end
  
  for player_name, playertbl in pairs(LastGroupUpdate) do
    if playertbl.class == Player.class and playertbl.maxhp == tonumber(Player.maxhp) and playertbl.maxmp == tonumber(Player.maxmp) then  
      return player_name
    end         
  end 
  return "Someone"
end 

function UpdateGroupMateVitals(Player)
    -- Create Global Groupmate table for use in other functions. If more groupmate stats from GMCP needed, add below
    GlobalVar.GroupMates[Player.name] = {}
    GlobalVar.GroupMates[Player.name].hp = tonumber(Player.hp)
    GlobalVar.GroupMates[Player.name].maxhp = tonumber(Player.maxhp)
    GlobalVar.GroupMates[Player.name].mp = tonumber(Player.mp)
    GlobalVar.GroupMates[Player.name].maxmp = tonumber(Player.maxmp)
    GlobalVar.GroupMates[Player.name].class = Player.class
    return
end
</script>
						<eventHandlerList>
							<string>gmcp.Char.Group.List</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>GMCP_Room</name>
						<packageName></packageName>
						<script>function GMCP_Room() 
  GlobalVar.PlaneName = GetPlaneName()
  if(GlobalVar.GUI) then
    RoomLabel:echo("&lt;center&gt;" .. RemoveColourCodes(gmcp.Room.Info.name) .. " (" .. GlobalVar.PlaneName .. ")&lt;/center&gt;")
    ExitListLabel:echo("&lt;center&gt;" .. table.concat(table.keys(gmcp.Room.Info.exits), " ") .. "&lt;/center&gt;")
    
    Victim1Label:hide()
    Victim2Label:hide()
    Victim3Label:hide()
    Victim1Label:setClickCallback("")
    Victim2Label:setClickCallback("")
    Victim3Label:setClickCallback("")
    
    if GlobalVar.RoomBlockedCasting then
      AutoCastON()
      GlobalVar.RoomBlockedCasting = nil
    end
  end
  
  
 
end


safeTempTrigger("RoomBlocksSpellCasting", "This room blocks your mind from spellcasting!", function()
  if GlobalVar.AutoCast then
    AutoCastOFF()
    GlobalVar.RoomBlockedCasting = true
   end
end, "begin")</script>
						<eventHandlerList>
							<string>gmcp.Room.Info</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>GMCP_OnlinePlayers</name>
						<packageName></packageName>
						<script>GlobalVar = GlobalVar or {}
GlobalVar.OnlinePlayers = GlobalVar.OnlinePlayers or nil

function getOnlinePlayers()
    if not Connected() then return end
    if IsMDAY() then return end -- requesting Comm.Channel.Players doesn't work on mday, likely too many players online
    gmcp.Comm = gmcp.Comm or {}
    gmcp.Comm.Channel = gmcp.Comm.Channel or {}
    gmcp.Comm.Channel.Players = nil
    GlobalVar.OnlinePlayers = {}
    sendGMCP("Comm.Channel.Players")
    
    coroutine.wrap(function()
      local timeout = 0
      
      wait(1)
      
      while gmcp.Comm.Channel.Players == nil and timeout &lt; 10 do
        sendGMCP("Comm.Channel.Players")
        wait(2)
        timeout = timeout + 1
      end
      
      if timeout &gt;= 10 then
        pdebug("getOnlinePlayers() timed out")
        return
      end
           
      for i, player in ipairs(gmcp.Comm.Channel.Players) do
          GlobalVar.OnlinePlayers[player.name] = true
      end

    end)()
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>GameLoop</name>
					<packageName></packageName>
					<script> 
 local function UseSkillAfterExhaust(Skill, SkillExhaust, Command)
  if Skill == nil and SkillExhaust == nil then
    if TryAction(Command, 30) then
      printGameMessageVerbose("GameLoop", Command)
    end
  end 
 end
 
 -- note: only ran while we're in combat
 function GameLoopClass(MyClass)
  local mana_pct = StatTable.current_mana / StatTable.max_mana

  if MyClass == "Sorcerer" then       

    
    if StatTable.Level == 125 then
      if (StatTable.BrimstoneExhaust ~= nil and string.lower(GlobalVar.AutoCaster) == "brimstone") then
        AutoCastSetSpell("maelstrom")                 
      end
      
      -- Move this to trigger once migraine exhaust over trigger text captured
      if (StatTable.BrimstoneExhaust == nil and StatTable.Level == 125 and string.lower(GlobalVar.AutoCaster) == "maelstrom") then
        AutoCastSetSpell("brimstone")
      end
      
    -- Use Unholy Bargain when avail and at max health
      if not StatTable.UnholyBargainExhaust and StatTable.current_health &gt;= StatTable.max_health and StatTable.current_moves &gt; 2000 and StatTable.current_mana &lt; (StatTable.max_mana - 1000) and not GroupLeader() then
        TryQueue("cast 'unholy bargain'", 60)
      end      
    end
  elseif MyClass == "Stormlord" then
    if StatTable.Level == 125 then
      if not StatTable.Solitude and not StatTable.GaleStratum and mana_pct &gt; 0.5 then
        TryAction("cast stratum gale", 30)
      end

    end

  elseif MyClass == "Bladedancer" then
    GameLoopBLD()
    elseif MyClass == "Warrior" then
      if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
      if StatTable.Level &lt; 48 then return end
      if AR.Status then
        UseSkillAfterExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "stance protective")
        if StatTable.StanceProtectiveExhaust then UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot") end
      else
        UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot")
      end
  elseif MyClass == "Bodyguard" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    if StatTable.Level &lt; 48 then return end
    
    if AR.Status then
      UseSkillAfterExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "stance protective")
      if StatTable.StanceProtectiveExhaust then UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot") end
    else
      UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot")
    end      
    if not StatTable.Alertness and Grouped() and StatTable.current_moves &gt; 1000 and TryLock("GameLoopAlertness", 30) then Battle.DoAfterCombat("alertness") end
    
  elseif MyClass == "Ripper" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    if StatTable.Level &lt; 48 then return end
    if AR.Status then
      UseSkillAfterExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "stance protective")
      if StatTable.StanceProtectiveExhaust then UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot") end
    else
      UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot")
    end
  elseif MyClass == "Berserker" then
    if not GlobalVar.AutoStance then return end
    if StatTable.Level == 51 and not StatTable.Rally then TryAction("rally", 60) end
  
  elseif MyClass == "Paladin" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    if StatTable.Level &lt; 48 then return end
    if AR.Status then
      UseSkillAfterExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "stance protective")
      if StatTable.StanceProtectiveExhaust then UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot") end
    else
      UseSkillAfterExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "stance surefoot")
    end
  elseif MyClass == "Monk" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    if AR.Status and (StatTable.Level == 125 or StatTable.SubLevel &gt; 101) then
      UseSkillAfterExhaust(StatTable.BearStance, StatTable.BearStanceExhaust, "stance bear")
      if not StatTable.BearStance then UseSkillAfterExhaust(StatTable.EmuStance, StatTable.EmuStanceExhaust, "stance emu") end
    end
    if StatTable.Level == 125 then
      if not StatTable.StoneFist then Battle.DoAfterCombat("cast 'stone fist'") end
      
      -- qi loop      
      local chakra = Battle.EnemiesChakra[gmcp.Char.Status.opponent_name] or nil
      
      if StatTable.OuterQi &gt;= 10 then
         if tonumber(gmcp.Char.Status.opponent_level) &gt; 180 then --or StatTable.OuterQi == 23 (ie max)
            if StatTable.SubLevel &gt;= 250 then
              TryAction("qi wave", 5)
            else
              TryAction("qi blast", 5)
            end
         end
      end
      
      if StatTable.SubLevel &gt;= 200 and not StatTable.FlowLikeWater and not StatTable.FlowLikeWaterExhaust and StatTable.InnerQi &gt;= 5 then
        Battle.DoAfterCombat("cast 'flow like water'")

      
      -- if there are groupies to rescue or we're in lag, try again later.
      -- TODO: perhaps check if we're the only tank?
      elseif (AR.Status and table.size(AR.RescueStack) &gt; 0) or tonumber(gmcp.Char.Vitals.lag) &gt; 0 then
        return
      elseif chakra and StatTable.SubLevel &gt;= 100 and StatTable.InnerQi &gt;= 7 then
        TryAction("qi invert " .. (chakra and chakra or ""), 15)
      elseif chakra and StatTable.InnerQi &gt;= 7 then
        TryAction("qi strike " .. (chakra and chakra or ""), 15)
      elseif StatTable.StoneFist and StatTable.InnerQi &gt;= 7 then
        TryAction("qi punch", 5)
      elseif StatTable.DaggerHand and StatTable.InnerQi &gt;= 7 then
        TryAction("qi thrust", 5)  
      else
        TryAction("kick", 5)
      end
      
    end
  elseif MyClass == "Shadowfist" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    
    if StatTable.Level == 51 and StatTable.SubLevel &gt; 100 then
      if not StatTable.DaggerHand then Battle.DoAfterCombat("cast 'dagger hand'") end
      
      -- Vampire fang will be prioritzed when health is less than 75% max, otherwise spectral is prioritized
      if not StatTable.VampireFangExhaust and StatTable.current_health &lt; (StatTable.max_health * 0.75) then
        UseSkillAfterExhaust(StatTable.VampireFang, StatTable.VampireFangExhaust, "stance vampire fang")
      else
        UseSkillAfterExhaust(StatTable.SpectralFang, StatTable.SpectralFangExhaust, "stance spectral fang")
        if StatTable.SpectralFangExhaust then UseSkillAfterExhaust(StatTable.VampireFang, StatTable.VampireFangExhaust, "stance vampire fang") end
      end
      
    elseif StatTable.Level == 125 then
      if not StatTable.StoneFist then Battle.DoAfterCombat("cast 'stone fist'") end

      -- Vampire fang will be prioritzed when health is less than 75% max, otherwise spectral is prioritized
      if not (StatTable.VampireFang or StatTable.SpectralFang) then
        if not StatTable.VampireFangExhaust and (StatTable.current_health &lt; (StatTable.max_health * 0.75) or StatTable.SpectralFangExhaust) then
          Battle.DoAfterCombat("stance vampire fang")
          TryAction("ctr vital stay", 5)
        elseif not StatTable.SpectralFangExhaust then
          Battle.DoAfterCombat("stance spectral fang")
          TryAction("ctr push stay", 5)
        end
      end
      
      -- qi loop      
      local chakra = Battle.EnemiesChakra[gmcp.Char.Status.opponent_name] or nil
      
      -- outer qi logic
      if StatTable.OuterQi &gt;= 10 then
        if tonumber(gmcp.Char.Status.opponent_level) &gt; 180 then --or StatTable.OuterQi == 23 (ie max)
          if StatTable.SubLevel &gt;= 250 then
            TryAction("qi wave", 5)
          else
            TryAction("qi blast", 5)
          end
        end
      end

      -- inner qi logic
      if StatTable.SubLevel &gt;= 200 and not StatTable.BurningFury and not StatTable.BurningFuryExhaust and StatTable.InnerQi &gt;= 5 then
          Battle.DoAfterCombat("cast 'burning fury'")
      -- if there are groupies to rescue or we're in lag, try again later.
      -- TODO: perhaps check if we're the only tank?
      elseif (AR.Status and table.size(AR.RescueStack) &gt; 0) or tonumber(gmcp.Char.Vitals.lag) &gt; 0 then
        return
      elseif chakra and StatTable.SubLevel &gt;= 100 and StatTable.InnerQi &gt;= 7 then
        TryAction("qi drain " .. (chakra and chakra or ""), 15)
      elseif chakra and StatTable.InnerQi &gt;= 7 then
        TryAction("qi strike " .. (chakra and chakra or ""), 15)
      elseif StatTable.StoneFist and StatTable.InnerQi &gt;= 7 then
        TryAction("qi punch", 5)
      elseif StatTable.DaggerHand and StatTable.InnerQi &gt;= 7 then
        TryAction("qi thrust", 5)  
      else
        TryAction("vital", 5)
      end
    end
  elseif MyClass == "Soldier" then
    if not GlobalVar.AutoStance then return end -- only swap if GlobalVar.AutoStance is on
    if StatTable.Level == 125 or StatTable.SubLevel &gt;= 101 then
      if not StatTable.StanceEchelon and not StatTable.EchelonExhaust then
        Battle.DoAfterCombat("stance echelon")
      elseif not StatTable.StanceEchelon and not StatTable.StanceSquare and not StatTable.SquareExhaust then
        Battle.DoAfterCombat("stance square")
      end       

    end
  elseif MyClass == "Cleric" then
    if GlobalVar.Pantheon and not StatTable.ArtificerBlessing and not StatTable.Discordia and not StatTable.DivineAdjutant and not StatTable.DivineGrace and
       not StatTable.GloriousConquest and not StatTable.GrimHarvest and not StatTable.HallowedNimbus and not StatTable.ProtectiveVigil and
       not StatTable.SylvanBenediction and not StatTable.UnholyRampage then
       
       if TryLock("GameLoopPantheon", 30) then 
         Battle.DoAfterCombat("cast '" .. GlobalVar.Pantheon .. "'") 
       end
    end

  
  
    
  elseif MyClass == "Priest" then
       
   
  elseif MyClass == "Psionicist" then
  
  
  elseif MyClass == "Mindbender" then
    if StatTable.Level == 125 and not StatTable.HiveMind and StatTable.current_mana &gt; 1000 then
      Battle.DoAfterCombat("cast 'hive mind'") 
    end

  end -- end of MyClass
 end
 
 function GameLoopRace(MyRace)
   if MyRace == "Troll" then
      if (GlobalVar.AutoRevive and (StatTable.current_health / StatTable.max_health) &lt; GlobalVar.AutoReviveHPpct and StatTable.current_health &gt; 100 and StatTable.Foci) then 
        UseSkillAfterExhaust(StatTable.RacialRevival, StatTable.RacialRevivalFatigue, "racial revival")
      end
   elseif MyRace == "Firedrake" and StatTable.Level == 125 then
        if not StatTable.RacialBreathFatigue and not GroupLeader() then TryAction("racial breath", 30) end
  
  
   elseif MyRace == "Kzinti" then
   
      if (StatTable.Level == 125 and StatTable.DamRoll &gt; 200) or (StatTable.Level == 51 and StatTable.DamRoll &gt;  100) then
        UseSkillAfterExhaust(StatTable.RacialFrenzy, StatTable.RacialFrenzyFatigue, "racial frenzy")
      end
      
  elseif MyRace == "Orc" then
      if (StatTable.Level == 125 and (StatTable.DamRoll &gt; 200 or StatTable.HitRoll &gt; 200)) or (StatTable.Level == 51 and (StatTable.DamRoll &gt;  100 or StatTable.HitRoll &gt; 100)) then
        UseSkillAfterExhaust(StatTable.RacialFrenzy, StatTable.RacialFrenzyFatigue, "racial frenzy")
      end
  elseif MyRace == "Ignatur" then
    
    if StatTable.Level == 51 and not RacialFireaura and not StatTable.RacialFireauraFatigue then
      TryAction("racial fireaura", 30)
    end
  
  
  
   end -- end of MyRace
 end
 

 function GameLoop()
  
  local MyClass = StatTable.Class
  local MyRace = StatTable.Race
  
  if not MyClass or not MyRace then return end
  
  -- Misc Run Scripts
  if (StatTable.current_health == StatTable.max_health and StatTable.current_mana == StatTable.max_mana and StatTable.Foci and StatTable.Position == "Sleep" and (not SafeArea() or Grouped())) then TryAction("stand",30) end
  
  if MyClass ~= "Sorcerer" and MyClass ~= "Shadowfist" and MyRace ~= "Demonseed" and
     StatTable.Alignment &lt; 750 and StatTable.Level &gt;= 51 and
     (not AltList or not AltList.Chars[StatTable.CharName].Insig or not AltList.Chars[StatTable.CharName].Insig.AcolyteOfTheTemple) then
    
    if (MyClass == "Priest" and StatTable.Level == 125 and StatTable.CriticalInjured == 0 and not Battle.Combat) then
      if StatTable.Alignment &lt; 700 then TryAction("quicken 3" .. cs .. "cast absolve" .. cs .. "quicken off", 60) end
      TryAction("quicken 3" .. cs .. "preach absolve" .. cs .. "quicken off",60)
    else

      if IsMDAY() then 
        TryAction("emote alignment has dropped below 750 - please |BW|preach absolve|N|", 600) 
      else
        TryFunction("printAlignmentWarningID", printGameMessage, {"Warning!", "Alignment is below 750!"}, 600)
      end
      
    end
  end
  
  
  -- Monitor rescue
  if AR.Status and AR.MonitorRescue and IsGroupMate(StatTable.Monitor) then
    if tonumber(gmcp.Char.Vitals.monhp) and StatTable.current_mon &gt; 0 and StatTable.max_mon &gt; 0 and StatTable.Monitor ~= "" then
        local MonitorHPpct = StatTable.current_mon / StatTable.max_mon
        if MonitorHPpct &lt; AR.MontorRescueHPpct then
            TryAction("rescue " .. StatTable.Monitor, 5)
        end
    end
  end
 
  -- Reset Bladetrance level if needed
  if not StatTable.Bladetrance then 
   StatTable.BladetranceLevel = 0
  elseif StatTable.Bladetrance and StatTable.BladetranceLevel == 0 then
    TryAction("bladetrance", 30)
  end

  
  -- Wear leveling gear if enabled and tnl less than 300 (should go elsewhere)
  if (GlobalVar.LevelReady == false and GlobalVar.LevelGear == true) then
    if (StatTable.current_tnl &lt;= 300) then
      send("level")
      GlobalVar.LevelReady = true
    end
  end
  
  -- Priest specific out of combat stuff
  if MyClass == "Priest" and (StatTable.Position == "Stand" or StatTable.Position == "Fighting") then
    if (StatTable.Level &gt; 51 or StatTable.SubLevel &gt; 250) and not StatTable.Intervention and Battle.Recent then
      -- how do we know when intervention is down on target?
      -- todo fix the below, only works on self (first arg should be nil for others)
      UseSkillAfterExhaust(StatTable.Intervention, StatTable.InterventionExhaust, "cast intervention " .. (GlobalVar.InterventionTarget and GlobalVar.InterventionTarget or ""))    
    end
    
   if StatTable.Level == 125 and gmcp.Char.Vitals.lag == "0" then
      if (StatTable.Fear or StatTable.Blindness or StatTable.Flash or StatTable.Scramble or StatTable.Overconfidence) and (StatTable.CriticalInjured == 0 or not Battle.Combat) then
        --TryCast("preach clarify", 30)
        if TryFunction("PreachClarify", Battle.NextAct, {"preach clarify", 7}, 15) then
          printGameMessage("GameLoop", "Attempting to preach clarify")
        end
      elseif (StatTable.Poison or StatTable.Virus or StatTable.Weaken) and (StatTable.CriticalInjured == 0 or not Battle.Combat) then

        if TryFunction("PreachPanacea", Battle.NextAct, {"quicken 5" .. getCommandSeparator() .. "preach panacea" .. getCommandSeparator() .. "quicken off", 7}, 15) then
          printGameMessage("GameLoop", "Attempting to preach panacea")
        end
      --elseif StatTable.InjuredCount &gt; 0 and (StatTable.current_mana / StatTable.max_mana) &gt; 0.5 and not SafeArea() then
        --if StatTable.Augment then TryAction("augment off", 120) end
        --TryCast("cast comfort " .. GlobalVar.VizMonitor, 10)      
      end
    end
      
  end
  
  
  -- Call Class and Race specific GameLoops if we are in combat
  if Battle.Combat then
    GameLoopClass(MyClass)
    GameLoopRace(MyRace)
    
  elseif not SafeArea() and StatTable.Position == "Stand" then -- out of combat stuff, not in safe area
    if MyClass == "Cleric" then castPantheonSpell() end
    if MyClass == "Psionicist" then castKineticEnhancers() end
  end
    
    if StatTable.Level == 125 then
      if StatTable.Curse and StatTable.Curse ~= "continuous" and
        IsNotClass({"Priest", "Berserker", "Shadowfist", "Bodyguard", "Black Circle Initiate"}) then
        --Battle.DoAfterCombat("cast 'remove curse'")
        -- 
        if not Battle.Combat then TryAction("cast 'remove curse'", 60) end
      elseif StatTable.Curse and StatTable.Class == "Priest" then
        TryAction("quicken 3" .. getCommandSeparator() .. "preach absolve" .. getCommandSeparator() .. "quicken off", 30)   
      end
    end

  --else printGameMessage("GameLoop", "Not in combat") 
  raiseEvent("CustomGameLoop") -- can be used if you want to write your own custom commands
end


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>GameLoop - BLD</name>
					<packageName></packageName>
					<script>--------------------------------------------------------------------------------
-- Dance Pattern Definitions (MODIFIABLE BY USER)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--
-- Applies a dance pattern template defined by a configuration table.
-- The configuration table can include a PrimaryDance, SecondaryDance (optional),
-- TertiaryDance (optional), and a RestartDance fallback.
--
-- The template should be a table with the following structure:
--
-- {
--   PrimaryDance = {
--     NextDance = "Inspire",         -- key for DanceName lookup
--     BladetranceBinary = false,     -- true to enter/deepen, false to break
--     DanceList = {"Veil", "Unend"}, -- Dances to swap from into our NextDance
--     StanceTimer = {1, 3},          -- table for DanceList above, can also be a single value for all
--   },
--   SecondaryDance = {                -- optional
--     NextDance = "Veil",             
--     BladetranceBinary = true,       
--     DanceList = {"Inspire", "Bladedance", "Dervish"},
--     StanceTimer = 1,                
--   },
--   TertiaryDance = {                 -- optional
--     NextDance = ""
--     BladetranceBinary = true/false
--     DanceList = {""},
--     StanceTimer = 1,
--   },
--   -- If we're not dancing (eg we wake up from regen), which dance should we pop into?
--   RestartDance = {"Inspire", "Veil", "Unend", "Bladedance", "Dervish"}
-- }
--

local dancePatterns = {
  default = {
    PrimaryDance = {
      NextDance = "Inspire",
      BladetranceBinary = false,
      DanceList = {"Veil", "Unend"},
      StanceTimer = {1, 3},
    },
    SecondaryDance = {
      NextDance = "Veil",
      BladetranceBinary = true,
      DanceList = {"Inspire", "Bladedance", "Dervish"},
      StanceTimer = 1,
    },
    RestartDance = {"Inspire", "Veil", "Unend", "Bladedance", "Dervish"},
  },
  melee = {
    PrimaryDance = {
      NextDance = "Bladedance",
      BladetranceBinary = false,
      DanceList = {"Dervish", "Inspire", "Veil", "Unend"},
      StanceTimer = {4, 4, 4, 5},
    },
    SecondaryDance = {
      NextDance = "Dervish",
      BladetranceBinary = false,
      DanceList = {"Bladedance"},
      StanceTimer = 4,
    },
    RestartDance = {"Bladedance", "Dervish", "Veil", "Unend", "Inspire"},
  },
  tank = {
    PrimaryDance = {
      NextDance = "Veil",
      BladetranceBinary = true,
      DanceList = {"Dervish", "Inspire", "Bladedance", "Unend"},
      StanceTimer = {1, 1, 1, 3},
    },
    SecondaryDance = {
      NextDance = "Unend",
      BladetranceBinary = false,
      DanceList = {"Veil"},
      StanceTimer = 1,
    },
    RestartDance = {"Veil", "Unend", "Inspire", "Bladedance", "Dervish"},
  },
  inspire = {
      PrimaryDance = {
      NextDance = "Inspire",
      BladetranceBinary = false,
      DanceList = {"Veil", "Bladedance", "Dervish", "Unend"},
      StanceTimer = {4, 4, 4, 5},
    },
    SecondaryDance = {
      NextDance = "Veil",
      BladetranceBinary = true,
      DanceList = {"Inspire"},
      StanceTimer = 1,
    },
    RestartDance = {"Inspire", "Veil", "Unend", "Bladedance", "Dervish"},
  },
  fast_inspire = {
    PrimaryDance = {
      NextDance = "Inspire",
      BladetranceBinary = false,
      DanceList = {"Veil", "Unend"},
      StanceTimer = {7, 5},
    },
    SecondaryDance = {
      NextDance = "Veil",
      BladetranceBinary = true,
      DanceList = {"Bladedance", "Dervish"},
      StanceTimer = 7,
    },
    TertiaryDance = {
      NextDance = "Dervish",
      BladetranceBinary = false,
      DanceList = {"Inspire"},
      StanceTimer = 7,
    },
    RestartDance = {"Inspire", "Veil", "Dervish", "Bladedance", "Unend"},
  },
  prac = {
    PrimaryDance = {
      NextDance = "Unend",
      BladetranceBinary = false,
      DanceList = {"Bladedance", "Unend"},
      StanceTimer = {7, 5},
    },
    SecondaryDance = {
      NextDance = "Bladedance",
      BladetranceBinary = false,
      DanceList = {"Inspire", "Dervish"},
      StanceTimer = 7,
    },
    TertiaryDance = {
      NextDance = "Dervish",
      BladetranceBinary = false,
      DanceList = {"Unend"},
      StanceTimer = 7,
    },
    RestartDance = {"Inspire", "Veil", "Dervish", "Bladedance", "Unend"},
  },
  hero = {
    -- For hero, we only need one stage:
    PrimaryDance = {
      NextDance = "Bladedance",         -- Start with Bladedance...
      BladetranceBinary = false,          -- ...and then if unavailable, try Dervish.
      DanceList = {"Bladedance", "Dervish"},
      StanceTimer = 2,                    -- Same threshold for both.
    },
    RestartDance = {"Bladedance", "Dervish"},
  },
}

--------------------------------------------------------------------------------
-- Helper Functions (DO NOT CHANGE)
--------------------------------------------------------------------------------

-- Mapping keys to their corresponding dance names. Do not change
local DanceName = {
  Inspire = "inspiring dance",
  Veil    = "veil of blades",
  Unend   = "unending dance",
  Dervish = "dervish dance",
  Bladedance = "bladedance",
}

local function autoStancePrerequisites()
  if not GlobalVar.AutoStance then return false end
  if not gmcp.Char.Status.opponent_health and tonumber(gmcp.Char.Status.opponent_health) &lt; 30 then return false end
  if tonumber(gmcp.Char.Vitals.lag) &gt; 0 then return false end
  return true
end

-- Break out of bladetrance if mana is low.
local function breakTranceIfNeeded()
  if StatTable.BladetranceLevel &gt; 0 and StatTable.current_mana &lt; 2000 then
    TryAction("bladetrance break", 10)
    return true
  end
  return false
end

-- Enter bladetrance (and deepen it if possible) when mana is sufficient.
local function enterTranceIfManaOk()
  local manapct = StatTable.current_mana / StatTable.max_mana
  if manapct &gt; 0.5 then
    TryAction("bladetrance enter", 10)
    if StatTable.current_mana &gt; 10000 then
      TryAction("bladetrance deepen;bladetrance deepen", 10)
    elseif StatTable.current_mana &gt; 5000 then
      TryAction("bladetrance deepen", 10)
    end
  end
end

-- General function to try a stance by name.
local function tryStance(stanceName)
  TryAction("stance " .. stanceName, 10)
end

-- Checks if any of the specified timers equal stanceTimer.
-- If one does, it emits an emote using the uppercase dance name.
-- Returns true if an emote was triggered, false otherwise.
local function checkTimersForEmote(stanceTimer, timerKeys)
  for _, key in ipairs(timerKeys) do
    local timerField = key .. "Timer"  -- e.g. "Inspire" becomes "InspireTimer"
    if StatTable[timerField] and StatTable[timerField] == stanceTimer then
      local danceNameUpper = string.upper(DanceName[key])
      TryAction("emote |N| |BW|" .. danceNameUpper .. " @ |BY|" .. stanceTimer, 60)
      return true
    end
  end
  return false
end

-- Handle a manually set next stance. Returns true if handled.
local function handleNextStance()
  local stanceTimer = GlobalVar.NextStanceTimer or 1
  if GlobalVar.NextStance and (
       (StatTable.InspireTimer and StatTable.InspireTimer &lt;= stanceTimer) or
       (StatTable.BladedanceTimer and StatTable.BladedanceTimer &lt;= stanceTimer) or
       (StatTable.DervishTimer and StatTable.DervishTimer &lt;= stanceTimer) or
       (StatTable.VeilTimer and StatTable.VeilTimer &lt;= stanceTimer) or
       (StatTable.UnendTimer and StatTable.UnendTimer &lt;= stanceTimer)
     ) then
    TryAction("stance " .. GlobalVar.NextStance, 10)
    GlobalVar.NextStance = nil
    GlobalVar.NextStanceTimer = nil
    return true
  end
  return false
end

-- Function that attempts to start dancing using an ordered list of dance keys.
local function StartDancingAgain(priorityList)
  for _, key in ipairs(priorityList) do
    if not StatTable[key .. "Exhaust"] then
      tryStance(DanceName[key])
      return true  -- Dance started, exit the function.
    end
  end
  return false  -- No dance was available.
end

--------------------------------------------------------------------------------
-- SwitchToDanceIf
--
-- Checks a set of dance timers against threshold values, and if any of the
-- specified timers are below their thresholds, switches the stance to a
-- designated dance. Optionally, it can also manage bladetrance (enter or break)
-- based on the provided flag.
--
-- This function supports two modes for threshold specification:
-- 1. Single Number Mode: If a single number is provided for thresholds, that
--    number is applied as the threshold for all dances in the DanceList.
-- 2. Table Mode: If a table of numbers is provided, each dance in DanceList uses
--    the corresponding threshold value from the table.
--
-- Parameters:
--   NextDance (string)
--     The key for the dance to switch to if the condition is met.
--     This key is used to look up the full stance name in the DanceName table.
--
--   BladetranceBinary (boolean)
--     If true, the function will attempt to enter bladetrance (and deepen it)
--     when switching stances; if false, and bladetrance is active, it will
--     instead break it.
--
--   DanceList (table)
--     A table (array) of dance keys (strings) whose corresponding timers
--     should be checked. For each key, the function constructs the timer field
--     name by appending "Timer" (e.g., "Inspire" becomes "InspireTimer").
--
--   StanceTimerOrList (number or table)
--     Either a single number to be used as the threshold for all timers in
--     DanceList, or a table of numbers providing a distinct threshold for each
--     dance key in DanceList.
--
-- Returns:
--   boolean
--     Returns true if at least one timer in DanceList is below its threshold,
--     and the stance was switched accordingly. Returns false otherwise.
--
-- Usage Examples:
--
--   -- Use the same threshold for all dances:
--   SwitchToDanceIf("Veil", true, {"Inspire", "Bladedance", "Dervish"}, stanceTimer)
--
--   -- Use different thresholds for each dance:
--   SwitchToDanceIf("Inspire", false, {"Veil", "Unend"}, {stanceTimer, stanceTimer + 2})
--------------------------------------------------------------------------------
local function SwitchToDanceIf(NextDance, BladetranceBinary, DanceList, StanceTimerOrList)
  local StanceTimerList = {}
  if type(StanceTimerOrList) == "table" then
    StanceTimerList = StanceTimerOrList
  else
    for i = 1, #DanceList do
      StanceTimerList[i] = StanceTimerOrList
    end
  end

  local conditionMet = false
  for i, key in ipairs(DanceList) do
    local threshold = StanceTimerList[i]
    local timerField = key .. "Timer"  -- e.g., "Inspire" becomes "InspireTimer"
    if StatTable[timerField] and StatTable[timerField] &lt;= threshold then
      conditionMet = true
      break
    end
  end

  if conditionMet then
    tryStance(DanceName[NextDance])
    if BladetranceBinary then
      enterTranceIfManaOk()
    elseif StatTable.Bladetrance then
      TryAction("bladetrance break", 10)
    end
    return true
  end

  return false
end

--------------------------------------------------------------------------------
-- Dance Pattern Validation
--------------------------------------------------------------------------------
local function validateDancePattern(pattern)
  local valid = true
  local errors = {}

  -- Define valid dance names using the keys in our DanceName table.
  local validNames = {
    Inspire    = true,
    Veil       = true,
    Unend      = true,
    Dervish    = true,
    Bladedance = true,
  }

  -- Helper: validate a single stage (Primary, Secondary, or Tertiary).
  local function checkStage(stage, stageName)
    if not stage then 
      return
    end

    -- 1. Check that NextDance is a valid name.
    if type(stage.NextDance) ~= "string" or not validNames[stage.NextDance] then
      valid = false
      table.insert(errors, stageName .. ": NextDance must be one of the valid names.")
    end

    -- 2. Check that BladetranceBinary is a boolean.
    if type(stage.BladetranceBinary) ~= "boolean" then
      valid = false
      table.insert(errors, stageName .. ": BladetranceBinary must be a boolean.")
    end

    -- 3. Check that DanceList is a table and that each element is valid.
    if type(stage.DanceList) ~= "table" then
      valid = false
      table.insert(errors, stageName .. ": DanceList must be a table.")
    else
      for i, name in ipairs(stage.DanceList) do
        if type(name) ~= "string" or not validNames[name] then
          valid = false
          table.insert(errors, stageName .. ": DanceList element at index " .. i .. " is invalid.")
        end
      end
    end

    -- 4. Check that StanceTimer is valid:
    if type(stage.StanceTimer) == "number" then
      if stage.StanceTimer &lt; 0 or stage.StanceTimer &gt; 20 then
        valid = false
        table.insert(errors, stageName .. ": StanceTimer must be between 0 and 20.")
      end
    elseif type(stage.StanceTimer) == "table" then
      if not stage.DanceList or #stage.StanceTimer ~= #stage.DanceList then
        valid = false
        table.insert(errors, stageName .. ": When StanceTimer is a table, its length must match the length of DanceList.")
      else
        for i, timer in ipairs(stage.StanceTimer) do
          if type(timer) ~= "number" or timer &lt; 0 or timer &gt; 20 then
            valid = false
            table.insert(errors, stageName .. ": StanceTimer element at index " .. i .. " must be a number between 0 and 20.")
          end
        end
      end
    else
      valid = false
      table.insert(errors, stageName .. ": StanceTimer must be a number or a table of numbers.")
    end
  end

  -- Validate each stage.
  checkStage(pattern.PrimaryDance, "PrimaryDance")
  checkStage(pattern.SecondaryDance, "SecondaryDance")
  checkStage(pattern.TertiaryDance, "TertiaryDance")

  -- 5. Check that across Primary, Secondary, and Tertiary, every valid dance is represented at least once.
  local combinedSet = {}
  for _, stage in ipairs({pattern.PrimaryDance, pattern.SecondaryDance, pattern.TertiaryDance}) do
    if stage and stage.DanceList then
      for _, name in ipairs(stage.DanceList) do
        combinedSet[name] = true
      end
    end
  end

  for danceName, _ in pairs(validNames) do
    if not combinedSet[danceName] then
      valid = false
      table.insert(errors, "The dance '" .. danceName .. "' is not represented in any DanceList.")
    end
  end

  -- 6. Check that RestartDance is a table and contains all five valid dances.
  if type(pattern.RestartDance) ~= "table" then
    valid = false
    table.insert(errors, "RestartDance must be a table.")
  else
    local restartSet = {}
    for _, name in ipairs(pattern.RestartDance) do
      restartSet[name] = true
    end
    for danceName, _ in pairs(validNames) do
      if not restartSet[danceName] then
        valid = false
        table.insert(errors, "RestartDance does not contain '" .. danceName .. "'.")
      end
    end
  end

  return valid, errors
end

--------------------------------------------------------------------------------
-- Alias Functions
--------------------------------------------------------------------------------

-- Helper function to build a comma-separated list of available dance patterns (excluding "hero").
function getAvailablePatternsString()
  local available = {}
  for key, _ in pairs(dancePatterns) do
    if key ~= "hero" then  -- Exclude hero from the printed list.
      table.insert(available, key)
    end
  end
  table.sort(available)
  return table.concat(available, ", ")
end

-- Global function to set the dance pattern. Used by the alias
function setDancePattern(userInput)
  local userPattern = userInput or ""

  
  -- If no pattern provided or the captured argument is "dancepattern", show syntax and list available patterns.
  if userPattern == "" then
    showCmdSyntax("DancePattern\n\tSyntax: dancepattern &lt;pattern&gt;",
      {{"dancepattern &lt;pattern&gt;", "Sets the dance pattern. Valid patterns: " .. getAvailablePatternsString()}})
    
    cecho("Available dance patterns: &lt;yellow&gt;" .. getAvailablePatternsString() .. "\n")
    cecho("Current dance pattern: &lt;yellow&gt;" .. (GlobalVar.DancePattern and GlobalVar.DancePattern or "default") .. "\n")
    return
  end

  local patternInput = string.lower(userPattern)

  -- Validate that the pattern exists.
  if not dancePatterns[patternInput] then
    cecho("DancePattern Error: Dance pattern '" .. patternInput .. "' does not exist.\n")
    cecho("&lt;yellow&gt;Available dance patterns: " .. getAvailablePatternsString() .. "\n")
    return
  end

  local chosenPattern = dancePatterns[patternInput]

  -- Validate the chosen dance pattern.
  local valid, errList = validateDancePattern(chosenPattern)
  if not valid then
    cecho("DancePattern Error: Dance pattern '" .. patternInput .. "' failed validation:\n")
    for _, err in ipairs(errList) do
      cecho("&lt;yellow&gt;" .. err .. "\n")
    end
    return
  end

  -- Update GlobalVar.
  GlobalVar.DancePattern = patternInput
  cecho("&lt;white&gt;Dance pattern set to " .. GlobalVar.DancePattern .. "\n")
end


--------------------------------------------------------------------------------
-- Run the Dance Pattern
--------------------------------------------------------------------------------
-- The function checks each stage in order:
-- 1. PrimaryDance: if conditions met via SwitchToDanceIf, exit.
-- 2. SecondaryDance: if provided and conditions met, exit.
-- 3. TertiaryDance: if provided and conditions met, exit.
-- 4. Emote if any timer equals the stanceTimer (unless GlobalVar.Silent is true).
-- 5. Otherwise, attempt to restart dancing using RestartDance.
--------------------------------------------------------------------------------
local function runDanceTemplate(pattern)
  local stanceTimer = 1  -- default threshold; can be overridden in the config if needed

  if SwitchToDanceIf(pattern.PrimaryDance.NextDance,
                       pattern.PrimaryDance.BladetranceBinary,
                       pattern.PrimaryDance.DanceList,
                       pattern.PrimaryDance.StanceTimer) then
    return
  elseif pattern.SecondaryDance and SwitchToDanceIf(pattern.SecondaryDance.NextDance,
                                                     pattern.SecondaryDance.BladetranceBinary,
                                                     pattern.SecondaryDance.DanceList,
                                                     pattern.SecondaryDance.StanceTimer) then
    return
  elseif pattern.TertiaryDance and SwitchToDanceIf(pattern.TertiaryDance.NextDance,
                                                    pattern.TertiaryDance.BladetranceBinary,
                                                    pattern.TertiaryDance.DanceList,
                                                    pattern.TertiaryDance.StanceTimer) then
    return
  elseif not GlobalVar.Silent and checkTimersForEmote(stanceTimer, {"Inspire", "Bladedance", "Dervish", "Veil", "Unend"}) then
    return
  elseif not BldDancing() then
    StartDancingAgain(pattern.RestartDance)
  end
end



---------------------------------------
-- Main Game Loop Logic for Bladedancer
---------------------------------------
function GameLoopBLD()
  if not autoStancePrerequisites() then return end
  
  -- if we've manually set the next stance, handle it here
  if GlobalVar.NextStance then
    handleNextStance()
    return
  end  
  
  -- For level 125, do specific preliminary actions.
  if StatTable.Level == 125 then
    -- Optionally, check for grouping:
    -- if not Grouped() then return end

    if breakTranceIfNeeded() then return end
    
  end
  
  
      -- Determine which dance pattern configuration to use.
  local chosenPatternName
  if StatTable.Level == 125 then
    chosenPatternName = GlobalVar.DancePattern or "default"
  elseif StatTable.Level == 51 and StatTable.SubLevel &gt; 101 then
    chosenPatternName = GlobalVar.DancePattern or "hero"
  end
  
  local chosenPattern = dancePatterns[chosenPatternName] or
                         ((StatTable.Level == 125) and dancePatterns.default or dancePatterns.hero)
  
  -- Now, run the chosen dance pattern.
  runDanceTemplate(chosenPattern)

end
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Vagonuth GUI Package</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--          Folder for GUI scripts          --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="no" isFolder="no">
					<name>Avatar Layout Vago</name>
					<packageName></packageName>
					<script>-------------------------------------------------
-- Main AVATAR GUI Layout File    
-- Creates all the consoles / gauges / labels                      
-------------------------------------------------

Layout = Layout or {}
Layout.Labels = Layout.Labels or {}
Layout.DefaultFontSize = GlobalVar.FontSize or 8

styleSheetOff = {
  borderColor = 'yellow',
  backgroundColor = 'rgba(255, 0, 0, 0.5)',
  borderRadius = 3,
}

styleSheetOn = {
  borderColor = 'yellow',
  backgroundColor = 'green',
  borderRadius = 3,
}

headerStyleSheet = {
  borderColor = 'yellow',
  backgroundColor = 'black',
  borderRadius = 3
}

-- Function to generate style sheet
local function generateStyleSheet(params)
  if (not params) then traceback_detail() end
  return string.format([[
  border-width: 1px;
  border-style: solid;
  border-color: %s;
  background-color: %s;
  border-radius: %spx;
  ]], params.borderColor, params.backgroundColor, params.borderRadius)
end

-- Function to create labels
local function createLabel(name, x, y, width, height, fgColor, message, container, fontSizeAdj, styleSheetParams)
  fontSize = Layout.DefaultFontSize + tonumber(fontSizeAdj or 0)
  local parent = container or Geyser
  local label = Geyser.Label:new({
      name = name,
      x = x, y = y,
      width = width, height = height,
      fgColor = fgColor,
      message = message
  }, parent)
  if styleSheetParams then label:setStyleSheet(generateStyleSheet(styleSheetParams)) end
  label:setFontSize(fontSize)
  return label
end


function ReportRun()
  if (StatTable.Level &lt; 125) then DamageCounter.Report() end
  RunStats.Report()
  DamageCounter.ReportEcho()
end

function ResetRun()
  RunStats.Reset()
  RunStats.EchoSession()
  DamageCounter.ReportEcho()
  DamageCounter.Reset()
end

function AutoKillFunc(name)
  echo("Trigger killstyle - " .. name .. "\n")
  closeAllLevels(AutoKillLabel)

  if (name == "OFF") then
    GlobalVar.KillStyle = "kill"
    GlobalVar.AutoKill = false
  else
    GlobalVar.KillStyle = name
    GlobalVar.AutoKill = true
  end
  AutoKillSetGUI()
end

function AutoSkillToggle()
  if GlobalVar.SkillStyle == "" then
    print("AutoSkill: please set a skill style first - useage: skillstyle &lt;skill&gt;")
    return
  end

  GlobalVar.AutoSkill = not GlobalVar.AutoSkill
  AutoSkillSetGUI()
end

function AutoBashToggle()
  GlobalVar.AutoBash = not GlobalVar.AutoBash
  AutoBashSetGUI()
end

function AutoCastToggle()
  if GlobalVar.AutoCast then
    AutoCastOFF()
  else
    AutoCastON()
  end
end

function AutoKillSetGUI()
  if not GlobalVar.GUI then return end
  if not GlobalVar.KillStyle then GlobalVar.KillStyle = "kill" end
  
  local statusMessage = GlobalVar.AutoKill and GlobalVar.KillStyle or "OFF"
  local styleSheet = GlobalVar.AutoKill and styleSheetOn or styleSheetOff
  
  AutoKillLabel:echo("&lt;center&gt;AutoKill - " .. statusMessage .. "&lt;/center&gt;")
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoSkillSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoSkill and GlobalVar.SkillStyle or "OFF"
  local styleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  
  AutoSkillLabel:echo("&lt;center&gt;AutoSkill - " .. statusMessage .. "&lt;/center&gt;")
  AutoSkillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoBashSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoBash and "ON" or "OFF"
  local styleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff

  AutoBashLabel:echo("&lt;center&gt;AutoBash " .. statusMessage .. "&lt;/center&gt;")
  AutoBashLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function AutoCastSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoCast and "AutoCast - ".. GlobalVar.AutoCaster or "AutoCast OFF"
  local styleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff

  AutoCastLabel:echo("&lt;center&gt;" .. statusMessage .. "&lt;/center&gt;")
  AutoCastLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function LoadLayout()
  local mainWidth, mainHeight = getMainWindowSize()--setup. Lets get the screen space we have available and chop it up
  local LeftPanelPercent = 20 -- left side panel should be what % of available space
  local LeftPanelWidth = tonumber(mainWidth)*(LeftPanelPercent/100)  
  local RightPanelPercent = 25 -- right panel should be 25% of the available space
  local RightPanelWidth = tonumber(mainWidth)*(RightPanelPercent/100)  
  local CentrePanelWidth = mainWidth - (RightPanelWidth + LeftPanelWidth)-- the middle area left after we have 2 side panels
  local CentrePanelSize = CentrePanelWidth/20 --break the space in middle up into 20 spaces for loading stuff in 
  
  Layout.DefaultFontSize = GlobalVar.FontSize or 8
  
  -- left hand panel - full height
  setBorderLeft(LeftPanelWidth)
  
  left_container = Geyser.Container:new({
    name = "left_container",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="100%",      -- filling it up until the end
  })
  
  GroupContainer = Geyser.Container:new({
    name = "GroupContainer",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="55%",      -- filling it up until the end
  },left_container)
  
  GroupPanel_background = createLabel("GroupPanel_background", "1%", "0", "95%", "100%", "black", nil, GroupContainer, nil, headerStyleSheet)
  lowerWindow("GroupPanel_background")

  GroupPanelHeader = createLabel("GroupPanelHeader", "1%", "0", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Group&lt;&lt;/b&gt;&lt;/center&gt;]], GroupContainer, nil, headerStyleSheet)

  GroupContainerInner = Geyser.VBox:new({
    name = "GroupContainerInner",
    x="2%", y="25",                     
    width = "96%", height="99%", 
  }, GroupContainer)    
  
  
  GroupieTable = {}
  --group is set to max StaticVars.MaxGroupLabels (default 32)
  for i=1, StaticVars.MaxGroupLabels do
  
    GroupieTable[i] = Geyser.Container:new({name="groupy"..tostring(i),height="10",width="90%"},GroupContainerInner)
    GroupieTable[i].NameLabel = createLabel("NameLabel"..tostring(i), "0", "0", "22%", "90%", "yellow", "&lt;left&gt; Name &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].InfoLabel = createLabel("InfoLabel"..tostring(i), "22%", "0", "13%", "90%", "yellow", "&lt;left&gt; Info &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].PositionLabel = createLabel("PositionLabel"..tostring(i), "36%", "0", "12%", "90%", "white", "&lt;left&gt; Pos &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].NameLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].InfoLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].PositionLabel:setStyleSheet([[ background-color: black; ]])
    
    GroupieTable[i].HPBar = Geyser.Gauge:new({
      name="HPBar"..tostring(i),
      x="45%", y="3%",
      width="25%", height="80%",
    },GroupieTable[i])
          
    GroupieTable[i].HPBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].HPBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
         
    GroupieTable[i].HPMaskLabel = createLabel("HPMaskLabel"..tostring(i), "45%", "3%", "25%", "90%", "yellow", "", GroupieTable[i], 0, nil)
    GroupieTable[i].HPMaskLabel:setColor(0,0,0,0)
    GroupieTable[i].HPMaskLabel:setToolTip("Click the HP Bar to provide a divinity / comfort to target", 10)
    
    GroupieTable[i].ManaBar = Geyser.Gauge:new({
    name="ManaBar"..tostring(i),
    x="72%", y="3%",
    width="25%", height="80%",
    },GroupieTable[i])
              
    GroupieTable[i].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].ManaBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
      
      GroupieTable[i]:hide()

  end
  
  --LEFT MIDDLE START container on left for info
  left_container_middle = Geyser.Container:new({
    name = "left_container_middle",
    x=0, y="55%",                 
    width = "100%", height="15%", 
  }, left_container)
  
  left_container_middle_background = createLabel("left_container_middle_background", "1%", "1%", "95%", "98%", "black", nil, left_container_middle, nil, headerStyleSheet)
  lowerWindow("left_container_middle_background")
  leftmiddlePanelHeader = createLabel("leftmiddlePanelHeader", "1%", "1%", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Room Info&lt;/b&gt;&lt;/center&gt;]], left_container_middle, nil, headerStyleSheet)

  local styleSheetHidden = {
    borderColor = 'black',
    backgroundColor = 'black',
    borderRadius = 1,
  }

  RoomLabel = createLabel("RoomLabel", "3%", "22", "90%", "18", "white", [[&lt;center&gt;Room&lt;/center&gt;]], left_container_middle, nil, styleSheetHidden)
  ExitListLabel = createLabel("ExitListLabel", "3%", "40", "90%", "18", "yellow", [[&lt;left&gt;&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim1Label = createLabel("Victim1Label", "3%", "60", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim2Label = createLabel("Victim2Label", "3%", "80", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim3Label = createLabel("Victim3Label", "3%", "100", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  
  Victim1Label:hide()
  Victim2Label:hide()
  Victim3Label:hide()
  
  --bottom container on left for spell effects
  left_container_bottom = Geyser.Container:new({
    name = "left_container_bottom",
    x=0, y="70%",                 
    width = "100%", height="30%", 
  }, left_container)
  
  left_container_background = createLabel("left_container_background", "1%", "0", "95%", "100%", "black", nil, left_container_bottom, nil, headerStyleSheet)
  lowerWindow("left_container_background")
  leftlowerPanelHeader = createLabel("leftlowerPanelHeader", "1%", "0", "95%", "18", "orange", [[&lt;center&gt;&lt;b&gt;Affects&lt;/b&gt;&lt;/center&gt;]], left_container_bottom, nil, headerStyleSheet)

  local affectLabelHeight = 15
  local rowSpacing = affectLabelHeight + 3
  local rowStartY = 26

  -- affect labels
  MoveHiddenLabel = createLabel("MoveHiddenLabel", "3%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Move Hidden&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SneakLabel = createLabel("SneakLabel", "34%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sneak&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvisLabel = createLabel("InvisLabel", "65%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invis&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SancLabel = createLabel("SancLabel", "3%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sanctuary&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FrenzyLabel = createLabel("FrenzyLabel", "34%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Frenzy&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WaterLabel = createLabel("WaterLabel", "65%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;WaterBreath&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FortLabel = createLabel("FortLabel", "3%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Fortitudes&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FociLabel = createLabel("FociLabel", "34%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Foci&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  AwenLabel = createLabel("AwenLabel", "65%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Awen&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvincLabel = createLabel("InvincLabel", "3%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invinc&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  BarkLabel = createLabel("BarkLabel", "34%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Barkskin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SteelLabel = createLabel("SteelLabel", "65%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Steel Skel&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  IronLabel = createLabel("IronLabel", "3%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Iron Skin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  ConcentrateLabel = createLabel("ConcentrateLabel", "34%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Concentrate&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WerreLabel = createLabel("WerreLabel", "65%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Werrebocler&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)

  --START SPECIFICS
    -- Create an empty table to store the Layout.Labels
  local labelIndex = 1  -- Counter for label names
  rowStartY = rowStartY + 5 * rowSpacing
  
  for row = 1, 4 do
    for column = 1, 3 do
      local x, y
      if column == 1 then
        x = "3%"
      elseif column == 2 then
        x = "34%"
      else
        x = "65%"
      end
      
      
      local y = tostring(rowStartY + (row - 1) * rowSpacing)
  
      Layout.Labels[labelIndex] = createLabel("Skill" .. labelIndex .. "Label", x, y, "28%", affectLabelHeight, "white", "Extra Label", left_container_bottom, nil, styleSheetOn)
      Layout.Labels[labelIndex]:hide()
  
      labelIndex = labelIndex + 1
    end
  end

  -- RIGHT CONTAINER 
  setBorderRight(RightPanelWidth)
  
  -- Top border
  right_container = Geyser.Container:new({
    name = "right_container",
    x = mainWidth - RightPanelWidth, y = 0,
    width = RightPanelWidth, height = "100%",
  })
  
  -- RightOutline
  RightOutline = createLabel("LeftBorder", "0", "0", "100%", "100%", "black", [[&lt;center&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  lowerWindow("RightOutline")


  -- Channel Consoles
  local function createChatWindow(name, x, y, width, height, parent)
    return Geyser.MiniConsole:new({
      name = name,
      x = x, y = y,
      autoWrap = true,
      color = "black",
      scrollBar = true,
      fontSize = Layout.DefaultFontSize,
      width = width, height = height,
    }, parent)
  end
  
  PublicChannels = createChatWindow("Channels", "1%", "2%", "99%", "23%", right_container)
  GroupChat = createChatWindow("GroupChat", "1%", "27%", "99%", "23%", right_container)
  BuddyChat = createChatWindow("BuddyChat", "1%", "52%", "99%", "23%", right_container)
  GameChat = createChatWindow("GameChat", "1%", "77%", "99%", "23%", right_container)

  ChannelLabel = createLabel("ChannelLabel", "0", "0", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Public Channels&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GroupLabel = createLabel("GroupLabel", "0", "25%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Group Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  BuddyLabel = createLabel("BuddyLabel", "0", "50%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Buddy Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GameLabel = createLabel("GameLabel", "0", "75%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Game Messages&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
    
  --BOTTOM STAT PANEL
  setBorderBottom(129)
  
  Bottom_container = Geyser.Container:new({
    name = "Bottom_container",
    x = LeftPanelWidth -10, y= mainHeight-129,                    -- makes the container start where left panel ends
    width = CentrePanelWidth, height="135",      -- filling it up until the end
  })
  
  FillLabel = createLabel("FillLabel", "0", "0", "100%", "95%", "black", "&lt;center&gt;&lt;/center&gt;", Bottom_container, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})
  
  CharPanel = Geyser.Container:new({
    name="CharPanel",
    x="0", y="0",
    width="100%", height="50",
  }, Bottom_container)
  
  CharBackGround = createLabel("CharBackGround", "0", "0", "100%", "100%", "black", "&lt;center&gt;&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})

  -- Lower windows after creation
  lowerWindow("CharBackGround")
  lowerWindow("FillLabel")

  CharNameLabel = createLabel("CharNameLabel", "0", "0", CentrePanelSize*3, "50", "black", "&lt;center&gt;char name&lt;/center&gt;", CharPanel, 6, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharInfoLabel = createLabel("CharInfoLabel", CentrePanelSize*3, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char info&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharLevelLabel = createLabel("CharLevelLabel", CentrePanelSize*3, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharHitDamLabel = createLabel("CharHitDamLabel", CentrePanelSize*6, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Hit/Dam&lt;/center&gt;", CharPanel, 1, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharACLabel = createLabel("CharACLabel", CentrePanelSize*6, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Armor Class&lt;/center&gt;", CharPanel, 3, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  RunXPLabel = createLabel("RunXPLabel", CentrePanelSize*9, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run XP&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunKillsLabel = createLabel("RunKillsLabel", CentrePanelSize*9, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Kills&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunLevelsLabel = createLabel("RunLevelsLabel", CentrePanelSize*11, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunStatsLabel = createLabel("RunStatsLabel", CentrePanelSize*11, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Stat&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})

  -- Clickable Labels
  RunReportLabel = createLabel("RunReportLabel", CentrePanelSize*13, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Report&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunReportLabel:setClickCallback("ReportRun")

  RunResetLabel = createLabel("RunResetLabel", CentrePanelSize*14, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Reset&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunResetLabel:setClickCallback("ResetRun")

  
  --SECTION FOR HANDLING AUTOKILL OPTIONS

  -- AutoKillLabel creation

  local function createKillLabel(name, message, callbackArg)
    local killLabel = AutoKillLabel:addChild({name=name, height=30, width=CentrePanelSize*2, layoutDir="TV", flyOut=true, message=message})
    killLabel:setClickCallback("AutoKillFunc", callbackArg)
    killLabel:setStyleSheet([[
        border-width: 1px;
        border-style: solid;
        border-color: yellow;
        background-color: green;
        border-radius: 3px;
    ]])
    killLabel:setFontSize(Layout.DefaultFontSize)
    return killLabel
  end

  AutoKillLabel = Geyser.Label:new({
      name = "AutoKillLabel",
      x = CentrePanelSize*15, y = "0",
      width = CentrePanelSize*2, height = "25",
      fgColor = "white",
      message = [[&lt;center&gt;AutoKill OFF&lt;/center&gt;]],
      nestable = true
  }, CharPanel)
  
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheetOn))
  -- Add other AutoKillLabel configurations here...
  
  KillLabel1 = createKillLabel("KillLabel1", "Kill", "Kill")
  KillLabel2 = createKillLabel("KillLabel2", "Surp", "Surp")
  KillLabel3 = createKillLabel("KillLabel3", "Backstab", "BS")
  KillLabel4 = createKillLabel("KillLabel4", "Bash", "Bash")
  KillLabel5 = createKillLabel("KillLabel5", " ", "OFF")
  KillLabel6 = createKillLabel("KillLabel6", "AUTO OFF", "OFF")
  
  -- AutoSkillLabel creation
  local autoSkillStyleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  local autoSkillMessage = GlobalVar.AutoSkill and "&lt;center&gt;AutoSkill " .. GlobalVar.SkillStyle .. "&lt;/center&gt;" or "&lt;center&gt;AutoSkill OFF&lt;/center&gt;"

  AutoSkillLabel = createLabel("AutoSkillLabel", CentrePanelSize*17, 0, CentrePanelSize*3, 25, "white", autoSkillMessage, CharPanel, nil, autoSkillStyleSheet)
  AutoSkillLabel:setClickCallback("AutoSkillToggle")
  

  -- AutoBashLabel creation
  local autoBashStyleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff
  local autoBashMessage = GlobalVar.AutoBash and "&lt;center&gt;AutoBash ON&lt;/center&gt;" or "&lt;center&gt;AutoBash OFF&lt;/center&gt;"

  AutoBashLabel = createLabel("AutoBashLabel", CentrePanelSize*15, 25, CentrePanelSize*2, 25, "white", autoBashMessage, CharPanel, nil, autoBashStyleSheet)
  AutoBashLabel:setClickCallback("AutoBashToggle")

  -- AutoCastLabel creation
  local autoCastStyleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff
  local autoCastMessage = GlobalVar.AutoCast and "&lt;center&gt;AutoCast - ".. GlobalVar.AutoCaster .. "&lt;/center&gt;" or "&lt;center&gt;AutoCast OFF&lt;/center&gt;"

  AutoCastLabel = createLabel("AutoCastLabel", CentrePanelSize*17, 25, CentrePanelSize*3, 25, "white", autoCastMessage, CharPanel, nil, autoCastStyleSheet)
  AutoCastLabel:setClickCallback("AutoCastToggle")
  
  LagLabel = createLabel("LagLabel", 10, 55, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Comm Lag&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  QiLabel = createLabel("QiLabel", 10, 80, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Qi&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  SavespellLabel = createLabel("SavespellLabel", 10, 105, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Savespell&lt;/center&gt;", Bottom_container, nil, styleSheetOff)

  
  -- Gauges
  local commonFrontStyle = [[
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
  ]]
  local commonBackStyle = [[
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
  ]]
   
  local barTable = {
    MainHPBar = {
      x = 2, y = "55", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    MainMPBar = {
      x = 2, y = "80", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    MoveBar = {
      x = 8, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #78bd33, stop: 0.1 #6ebd20, stop: 0.49 #4c9900, stop: 0.5 #387000, stop: 1 #4c9900)",
    },
    TNLBar = {
      x = 8, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff9900, stop: 1 #990000)",
    },
    MonitorBar = {
      x = 14, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff00ff, stop: 0.3 #ff33cc, stop: 1 #cc0066)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffffff, stop: 1 #ffccff)",
    },
    EnemyBar = {
      x = 14, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    WeightBar = {
      x = 2, y = "105", width = 5.5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #467387, stop:.04 #69b7db, stop:.09 #9feae5, stop:.28 #2addd1, stop:.46 #31f9f9, stop:.67 #29bbce, stop:1 #045f89)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    ItemsBar = {
      x = 8, y = "105", width = 5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #8a2f2f,stop: .22 #581111,stop: .48 #641414,stop: .68 #7e1919,stop: 1 #b17575)",
    },
    AlignmentBar = {
      x = 14, y = "105", width = 5, height = "20",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",

    },
  }
  
  -- Bar styles
  local barStyles = {}
  for barName, barVars in pairs(barTable) do
    barStyles[barName] = {
      x = CentrePanelSize * barVars.x,
      y = barVars.y,
      width = CentrePanelSize * barVars.width,
      height = barVars.height,
      front = "background-color: "..barVars.front..";"..commonFrontStyle,
      back = "background-color: "..barVars.back..";"..commonBackStyle,
    }
  end
  
  -- Bar creation function
  function createBar(name, styles, parent)
    local bar = Geyser.Gauge:new({
      name=name,
      x=styles.x, y=styles.y,
      width=styles.width, height=styles.height,
    }, parent)
    
    bar.front:setStyleSheet(styles.front)
    bar.back:setStyleSheet(styles.back)
    return bar
  end
  
  MainHPBar = createBar("MainHPBar", barStyles["MainHPBar"], Bottom_container)
  MainMPBar = createBar("MainMPBar", barStyles["MainMPBar"], Bottom_container)
  MoveBar = createBar("MoveBar", barStyles["MoveBar"], Bottom_container)
  TNLBar = createBar("TNLBar", barStyles["TNLBar"], Bottom_container)
  MonitorBar = createBar("MonitorBar", barStyles["MonitorBar"], Bottom_container)
  EnemyBar = createBar("EnemyBar", barStyles["EnemyBar"], Bottom_container)
  WeightBar = createBar("WeightBar", barStyles["WeightBar"], Bottom_container)
  ItemsBar = createBar("ItemsBar", barStyles["ItemsBar"], Bottom_container)
  AlignmentBar = createBar("AlignmentBar", barStyles["AlignmentBar"], Bottom_container)

end

Layout.FirstLoad = Layout.FirstLoad or false
if GlobalVar.GUI and not Layout.FirstLoad then LoadLayout(); Layout.FirstLoad = true end

--registerAnonymousEventHandler("sysWindowResizeEvent", LoadLayout)</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Layout Update</name>
					<packageName></packageName>
					<script>-------------------------------------------------
-- Character Panel /Affects Update Script   
-- Updates all the gauges / labels in the bottom panel as well as the affects panel
-------------------------------------------------

function applyLabelStyle(label, borderColor, bgColor)
    label:setStyleSheet([[
        border-width: 1px;
        border-style: solid;
        border-color: ]] .. borderColor .. [[;
        background-color: ]] .. bgColor .. [[;
        border-radius: 3px;
    ]])
end

function setLabelProperties(label, affect, activeText, missingText, skillCommand)
    if not affect then
        label:echo("&lt;center&gt;" .. missingText .. "&lt;/center&gt;")
        applyLabelStyle(label, "yellow", "rgba(255, 0, 0, 0.5)")
        label:setClickCallback(function() send(skillCommand) end)
    else
        label:echo("&lt;center&gt;" .. activeText .. " - " .. affect .. "&lt;/center&gt;")
        applyLabelStyle(label, "green", "green")
        label:setClickCallback("")
    end
end

function setLabelPropertiesExhaust(label, affect, affectExhaust, activeText, missingText, skillCommand)
    if not affect and not affectExhaust then
        label:echo("&lt;center&gt;" .. missingText .. "&lt;/center&gt;")
        applyLabelStyle(label, "yellow", "rgba(255, 0, 0, 0.5)")
        label:setClickCallback(function() send(skillCommand) end)
    elseif not affect and affectExhaust then
        label:echo("&lt;center&gt;" .. activeText .. " - " .. affectExhaust .. "&lt;/center&gt;")
        applyLabelStyle(label, "yellow", "rgba(255, 255, 0, 0.5)")
        label:setClickCallback(function() send(skillCommand) end)
    else
        label:echo("&lt;center&gt;" .. activeText .. " - " .. affect .. "&lt;/center&gt;")
        applyLabelStyle(label, "green", "green")
        label:setClickCallback("")
    end
end

function setLabelPropertiesDebuff(label, affect, activeText)
    if affect then
        label:echo("&lt;center&gt;" .. activeText .. " - " .. affect .. "&lt;/center&gt;")
        applyLabelStyle(label, "gray", "gray")
        label:setClickCallback("")
    end
end

function setNextAvailableLabel(...)
  for _, label in ipairs(Layout.Labels) do
    if label.hidden then
      setLabelProperties(label, ...)
      label:show()
      break
    end
  end
end

function setNextAvailableLabelIfActive(Stat, labelShort, labelLong, command)
    if Stat then
        setNextAvailableLabel(Stat, labelShort, labelLong, command)
    end
end

function setNextAvailableLabelExhaust(...)
  for _, label in ipairs(Layout.Labels) do
    if label.hidden then
      setLabelPropertiesExhaust(label, ...)
      label:show()
      break
    end
  end
end

function setNextAvailableLabelDebuff(...)
  for _, label in ipairs(Layout.Labels) do
    if label.hidden then
      setLabelPropertiesDebuff(label, ...)
      label:show()
      break
    end
  end
end


 -- called on update to GMCP_Vitals()
function UpdateGUI()
    local MyClass = StatTable.Class -- local variables are inherently faster in Lua, as they exist in the virtual machine registers
    local MyRace = StatTable.Race
    local MyLevel = StatTable.Level
    local MySubLevel = StatTable.SubLevel
       
      -- character data / gauges
      CharNameLabel:echo("&lt;center&gt;" .. string.upper(StatTable.CharName) .. "&lt;/center&gt;")
      CharInfoLabel:echo("&lt;center&gt;" .. string.upper(MyRace) .." " .. string.upper(MyClass) .. "&lt;/center&gt;")
      if (MyLevel &lt; 51) then
        CharLevelLabel:echo("&lt;center&gt;Level: " .. MyLevel .. "&lt;/center&gt;")
      elseif (MyLevel == 51) then
        CharLevelLabel:echo("&lt;center&gt;Hero: " .. MySubLevel .. "&lt;/center&gt;")
      elseif (MyLevel == 125) then
        CharLevelLabel:echo("&lt;center&gt;Lord: " .. MySubLevel .. "&lt;/center&gt;")
      else
        CharLevelLabel:echo("&lt;center&gt;Level:(" .. MyLevel ..") " .. MySubLevel .. "&lt;/center&gt;")
      end
      CharHitDamLabel:echo("&lt;center&gt;HR: " .. StatTable.HitRoll .."      DR: " .. StatTable.DamRoll .. "&lt;/center&gt;")
      CharACLabel:echo("&lt;center&gt;AC: " .. StatTable.ArmorClass .."&lt;/center&gt;")
      
      RunXPLabel:echo("&lt;center&gt;" .. RunStats.RunXp .. " XP&lt;/center&gt;")
      RunKillsLabel:echo("&lt;center&gt;" .. RunStats.RunKills .. " Kills&lt;/center&gt;")
      RunLevelsLabel:echo("&lt;center&gt;" .. RunStats.RunLevels .. " Levels&lt;/center&gt;")
      RunStatsLabel:echo("&lt;center&gt;" .. RunStats.RunHP .. "HP / " .. RunStats.RunMP .. "MA&lt;/center&gt;" )
      
      MainHPBar:setValue(StatTable.current_health,StatTable.max_health,"&lt;h3&gt;&lt;b&gt;&lt;center&gt;".. StatTable.current_health .. "/" .. StatTable.max_health .. "  HP&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      MainMPBar:setValue(StatTable.current_mana,StatTable.max_mana,"&lt;h3&gt;&lt;b&gt;&lt;center&gt;".. StatTable.current_mana .. "/" .. StatTable.max_mana .. "  Mana&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      MoveBar:setValue(StatTable.current_moves,StatTable.max_moves,"&lt;h3&gt;&lt;b&gt;&lt;center&gt;".. StatTable.current_moves .. "/" .. StatTable.max_moves .. "  Moves&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      TNLBar:setValue(math.min(StatTable.current_tnl, StatTable.max_tnl), StatTable.max_tnl, "&lt;h3&gt;&lt;b&gt;&lt;span style='color: black'&gt;&lt;center&gt;" .. StatTable.current_tnl .. "/" .. StatTable.max_tnl .. "  TNL&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      
      
      
      if (StatTable.current_mon == nil or StatTable.current_mon == "" or StatTable.current_mon == null or StatTable.Monitor == nil) then
          MonitorBar:setValue(1,1,"&lt;h3&gt;&lt;b&gt;&lt;center&gt; NO MONITOR&lt;/b&gt;&lt;/center&gt;&lt;/h2&gt;") 
      else
          MonitorBar:setValue(StatTable.current_mon,StatTable.max_mon,"&lt;h3&gt;&lt;b&gt;&lt;center&gt;".. RemoveColourCodes(StatTable.Monitor) .. ":" .. StatTable.current_mon .. "/" .. StatTable.max_mon .. "  HP&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      end
      
      if not(StatTable.Enemy == nil or StatTable.Enemy == "") then 
          EnemyBar:setValue(StatTable.EnemyHP,StatTable.EnemyMaxHP,"&lt;b&gt;&lt;center&gt;Fighting: " .. RemoveColourCodes(StatTable.Enemy) ..  " LV:" .. gmcp.Char.Status.opponent_level .. "&lt;/b&gt;&lt;/center&gt;")
      else
          EnemyBar:setValue(0,100,"&lt;h3&gt;&lt;b&gt;&lt;center&gt; NO TARGET&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;") 
      end
      
      -- Item and Weight and Aligment
      WeightBar:setValue(math.min(StatTable.Weight, StatTable.MaxWeight), StatTable.MaxWeight, "&lt;h3&gt;&lt;b&gt;&lt;center&gt;" .. StatTable.Weight .. "/" .. StatTable.MaxWeight .. "  lbs&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      ItemsBar:setValue(StatTable.Items,StatTable.MaxItems,"&lt;h3&gt;&lt;b&gt;&lt;center&gt;".. StatTable.Items .. "/" .. StatTable.MaxItems .. "  items&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      AlignmentBar:setValue((StatTable.Alignment + 1000),2000,"&lt;h3&gt;&lt;b&gt;&lt;center&gt; Align: " .. StatTable.Alignment .. "&lt;/b&gt;&lt;/center&gt;&lt;/h3&gt;")
      
      -- Lag / Qi / Savespell
      LagLabel:echo("&lt;center&gt;lag: " .. tonumber(gmcp.Char.Vitals.lag) .. "&lt;/center&gt;")
      
      if IsClass({"Monk", "Shadowfist"}) then
        QiLabel:show()
        applyLabelStyle(QiLabel, "green", "green")
        QiLabel:echo("&lt;center&gt;" .. StatTable.InnerQi .. " / " .. StatTable.OuterQi .. "&lt;/center&gt;")     
      elseif StatTable.Class == "Bladedancer" then
        QiLabel:show()
        if StatTable.BladetranceLevel &gt; 0 then
          applyLabelStyle(QiLabel, "green", "green")
          QiLabel:echo("&lt;center&gt;BT " .. StatTable.BladetranceLevel .. "&lt;/center&gt;")   
        else
          applyLabelStyle(QiLabel, "yellow", "rgba(255, 0, 0, 0.5)")   
          QiLabel:echo("&lt;center&gt;BT off&lt;/center&gt;")
        end
      elseif IsClass({"Priest", "Cleric", "Druid", "Paladin"}) then
        QiLabel:show()
        if GlobalVar.AutoHeal then
          applyLabelStyle(QiLabel, "green", "green")
          QiLabel:echo("&lt;center&gt;AH ON&lt;/center&gt;")   
        else
          applyLabelStyle(QiLabel, "yellow", "rgba(255, 0, 0, 0.5)")   
          QiLabel:echo("&lt;center&gt;AH off&lt;/center&gt;")
        end
      else
        QiLabel:hide()
      end


      if StatTable.Savespell then
        if StatTable.current_health == StatTable.max_health
        and StatTable.max_mana == StatTable.current_mana
        and StatTable.current_moves &gt;= StatTable.max_moves * 0.8
        and StatTable.current_moves &lt;= StatTable.max_moves then
          SavespellLabel:echo("&lt;center&gt;S/S Active&lt;/center&gt;")
          applyLabelStyle(SavespellLabel, "green", "green")
        else
          SavespellLabel:echo("&lt;center&gt;S/S ON&lt;/center&gt;")
          applyLabelStyle(SavespellLabel, "yellow", "rgba(255, 0, 0, 0.5)")
        end
        SavespellLabel:setClickCallback([[UseSkill("config -savespell")]])
      else
          SavespellLabel:echo("&lt;center&gt;S/S OFF&lt;/center&gt;")
          applyLabelStyle(SavespellLabel, "yellow", "rgba(255, 0, 0, 0.5)")
          SavespellLabel:setClickCallback([[UseSkill("config +savespell")]])
      end
      
      -- Skills/spells that apply to all (Rows 1 - 5)
      setLabelProperties(MoveHiddenLabel, StatTable.MoveHidden, "Move Hidden", "Not Hidden", "move hidden")
      setLabelProperties(SneakLabel, StatTable.Sneak, "Sneak", "Not Sneaky", "sneak")
      setLabelProperties(InvisLabel, StatTable.Invis, "Invis", "Visible", "cast invis")
      setLabelProperties(SancLabel, StatTable.Sanctuary, "Sanc", "Sanctuary", "cast sanctuary")
      setLabelProperties(WaterLabel, StatTable.WaterBreathing, "Water", "Water", "cast 'water breathing'")
      if StatTable.Frenzy == nil and StatTable.Fervor == nil then
        setLabelProperties(FrenzyLabel, nil, "Frenzy", "Frenzy", MyClass == "Paladin" and "cast fervor" or "cast frenzy")
      elseif MyClass == "Paladin" and StatTable.Fervor then
        setLabelProperties(FrenzyLabel, StatTable.Fervor, "Fervor", "Fervor", "cast fervor")
      else
        setLabelProperties(FrenzyLabel, StatTable.Frenzy, "Frenzy", "Frenzy", "cast frenzy")
      end

      setLabelProperties(FortLabel, StatTable.Fortitude, "Fort", "Fortitude", "cast fort")
      setLabelProperties(FociLabel, StatTable.Foci, "Foci", "Foci", "cast foci")
      setLabelProperties(AwenLabel, StatTable.Awen, "Awen", "Awen", "cast awen")
      setLabelProperties(InvincLabel, StatTable.Invincibility, "Invinc", "Invinc", "cast invinc")
      setLabelProperties(BarkLabel, StatTable.Barkskin, "Bark", "Barkskin", "cast barkskin")
      setLabelProperties(SteelLabel, StatTable.SteelSkeleton, "Steel", "Steel Skel.", "cast 'steel skeleton'")
      setLabelProperties(IronLabel, StatTable.IronSkin, "Iron", "Iron Skin", "cast 'iron skin'")
      setLabelProperties(ConcentrateLabel, StatTable.Concentrate, "Concen", "Concentrate", "cast concentrate")
      setLabelProperties(WerreLabel, StatTable.Werrebocler, "Bocler", "Werrebocler", "cast werrebocler")
      
      -- Custom labels for classes / races (rows 6+)
      
      for _, label in ipairs(Layout.Labels) do
        label:hide()
      end
      
      if MyClass == "Mage" then
        setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
        setNextAvailableLabel(StatTable.Mystical, "Mystical", "Mystical", "cast mystical")
      elseif MyClass == "Wizard" then
        if MyLevel &gt; 51 or MySubLevel &gt; 101 then  
          setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
          setNextAvailableLabel(StatTable.Mystical, "Mystical", "Mystical", "cast mystical")
          setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        end
        if MyLevel == 125 then 
          setNextAvailableLabelExhaust(StatTable.EtherLink, StatTable.EtherLinkExhaust, "Ether Link", "Ether Link", "cast 'ether link'")
          setNextAvailableLabelExhaust(StatTable.EtherWarp, StatTable.EtherWarpExhaust, "Ether Warp", "Ether Warp", "cast 'ether warp'")
          setNextAvailableLabelExhaust(StatTable.EtherCrashDuration, StatTable.EtherCrashExhaust, "Ether Crash", "Ether Crash", "cast 'ether crash'")
        end
      elseif MyClass == "Stormlord" then  
        setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
        setNextAvailableLabel(StatTable.SpringRain, "Spring Rain", "Spring Rain", "cast 'spring rain'")
        setNextAvailableLabel(StatTable.GaleStratum, "Gale", "Gale Stratum", "cast stratum gale")
      elseif MyClass =="Sorcerer" then
        setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
        setNextAvailableLabel(StatTable.Mystical, "Mystical", "Mystical", "cast mystical")
        setNextAvailableLabel(StatTable.DeathShroud, "Death Shd", "Death Shd", "cast 'death shroud'")
        setNextAvailableLabelExhaust(StatTable.Tainted, StatTable.TaintedExhaust, "Tainted", "Tainted", "cast tainted") 
        setNextAvailableLabel(StatTable.DefiledFlesh, "Defiled", "Defiled", "cast defiled")
        if (MyLevel == 125) then setNextAvailableLabelExhaust(nil, StatTable.UnholyBargainExhaust, "Unholy Barg", "Unholy Barg", "cast 'unholy bargain'") end
        if MyLevel == 125 and MySubLevel &gt;= 200 then setNextAvailableLabel(StatTable.VilePhilosophy, "Vile Phil.", "Vile Phil.", "cast 'vile philosophy") end       
        setNextAvailableLabel(StatTable.SummonNecrit, "Necrit", "Necrit", "cast 'summon necrit'")
        if StatTable.Immolation then setNextAvailableLabel(StatTable.Immolation, "Immo", "Immo", "") end
        if StatTable.AstralPrison then setNextAvailableLabel(StatTable.AstralPrison, "Astral", "Astral", "") end
        
        if StatTable.EmotiveDrainExhaust then setNextAvailableLabelExhaust(StatTable.EmotiveDrain, StatTable.EmotiveDrainExhaust, "Emotive", "Emotive", "cast 'emotive drain'") end
        if StatTable.BrimstoneExhaust then setNextAvailableLabelExhaust(nil, StatTable.BrimstoneExhaust, "Brimstone", "Brimstone", "") end
      elseif MyClass == "Rogue" then
        setNextAvailableLabel(StatTable.Alertness, "Alert", "Alertness", "alertness")
      elseif MyClass == "Assassin" then
        setNextAvailableLabel(StatTable.Alertness, "Alert", "Alertness", "alertness")
      elseif MyClass == "Soldier" then
        if (MyLevel == 125 or MySubLevel &gt; 100) then
          setNextAvailableLabelExhaust(StatTable.StanceEchelon, StatTable.EchelonExhaust, "Echelon", "Echelon", "stance echelon")
          setNextAvailableLabelExhaust(StatTable.StanceSquare, StatTable.SquareExhaust, "Square", "Square", "stance square") 
          setNextAvailableLabelExhaust(StatTable.StancePhalanx, StatTable.PhalanxExhaust, "Phalanx", "Phalanx", "stance phalanx") 
          setNextAvailableLabelExhaust(StatTable.StanceColumn, StatTable.ColumnExhaust, "Column", "Column", "stance column") 
        end
      
      elseif MyClass == "Bladedancer" then
        setNextAvailableLabel(StatTable.Alertness, "Alert", "Alertness", "alertness")
        if (MyLevel == 125 or MySubLevel &gt; 100) then
          setNextAvailableLabelExhaust(StatTable.BladedanceTimer, StatTable.BladedanceExhaust, "Blade", "Bladedance", "stance bladedance")
          setNextAvailableLabelExhaust(StatTable.DervishTimer, StatTable.DervishExhaust, "Dervish", "Dervish Dance", "stance dervish dance")
          setNextAvailableLabelExhaust(StatTable.InspireTimer, StatTable.InspireExhaust, "Inspire", "Inspiring Dance", "stance inspiring dance")
        
        end
        if (MyLevel == 125) then  
          setNextAvailableLabelExhaust(StatTable.VeilTimer, StatTable.VeilExhaust, "Veil", "Veil of Blades", "stance veil of blades") 
          setNextAvailableLabelExhaust(StatTable.UnendTimer, StatTable.UnendExhaust, "Unending", "Unending Dance", "stance unending dance") 
        end
        if StatTable.IronVeil then setNextAvailableLabel(StatTable.IronVeil, "Iron Veil", "Iron Veil", "") end
        
      elseif(MyClass == "Cleric") then
        setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        setNextAvailableLabel(StatTable.SavingGrace, "Saving", "Saving Grace", "cast 'saving grace'")
       
       
        setNextAvailableLabel(StatTable.ArtificerBlessing, "Art Bless", "Art Bless", "cast 'artificer blessing'")
        setNextAvailableLabel(StatTable.Discordia, "Discordia", "Discordia", "cast 'discordia'")
        setNextAvailableLabel(StatTable.DivineAdjutant, "Divine Adj.", "Divine Adj.", "cast 'divine adjutant'")
        setNextAvailableLabel(StatTable.DivineGrace, "Divine Grace", "Divine Grace", "cast 'divine grace'")
        setNextAvailableLabel(StatTable.GloriousConquest, "Glorious", "Glorious Conquest", "cast 'glorious conquest'")
        setNextAvailableLabel(StatTable.GrimHarvest, "Grim Harvest", "Grim Harvest", "cast 'grim harvest'")
        setNextAvailableLabel(StatTable.HallowedNimbus, "Hall. Nimbus", "Hall. Nimbus", "cast 'hallowed nimbus'")
        setNextAvailableLabel(StatTable.ProtectiveVigil, "Prot Vigil", "Prot. Vigil", "cast 'protective vigil'")
        setNextAvailableLabel(StatTable.SylvanBenediction, "Sylvan Benedict.", "Sylvan Benedict.", "cast 'sylvan benediction'")
        setNextAvailableLabel(StatTable.UnholyRampage, "Unholy Rampage", "Unholy Rampage", "cast 'unholy rampage'")
     
        
      elseif MyClass == "Druid" then
        setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        setNextAvailableLabel(StatTable.SavingGrace, "Saving", "Saving Grace", "cast 'saving grace'")
        
      elseif MyClass == "Vizier" then
        setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        setNextAvailableLabel(StatTable.SavingGrace, "Saving", "Saving Grace", "cast 'saving grace'")
        
        
        setNextAvailableLabel(GlobalVar.VizFinalRites and "On" or nil, "Final Rites", "Final Rites", "cast 'final rites'")
        if MyLevel == 125 and MySubLevel &gt;= 100 then
          setNextAvailableLabel(GlobalVar.VizSoulShackle and "On" or nil, "Soul Shackle", "Soul Shackle", "stance soul'" .. getCommandSeparator() .. "cast 'soul shackle'") 
        end
        
      elseif(MyClass == "Priest") then
        setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        setNextAvailableLabel(StatTable.SavingGrace, "Saving", "Saving Grace", "cast 'saving grace'")
        setNextAvailableLabelExhaust(StatTable.Intervention, StatTable.InterventionExhaust, "Interv.", "Intervention", "cast intervention") 
        setNextAvailableLabelExhaust(StatTable.Solitude, StatTable.SolitudeTimer, "Solitude", "Solitude", "cast solitude")  
        
      elseif(MyClass == "Monk") then
        setNextAvailableLabelExhaust(StatTable.BearStance, StatTable.BearStanceExhaust, "Bear Stance", "Bear", "stance bear")
        setNextAvailableLabelExhaust(StatTable.EmuStance, StatTable.EmuStanceExhaust, "Emu Stance", "Emu", "stance emu")
        setNextAvailableLabelExhaust(StatTable.TigerStance, StatTable.TigerStanceExhaust, "Tiger Stance", "Tiger", "stance tiger")
        setNextAvailableLabel(StatTable.DaggerHand, "Dagger", "Dagger Hand", "cast 'dagger hand'")
        setNextAvailableLabel(StatTable.StoneFist, "Stone Fist", "Stone Fist", "cast 'stone fist'")
        if MyLevel == 125 then
          setNextAvailableLabel(StatTable.BlindDevotion, "Blind Dev.", "Blind Devotation", "cast 'blind devotion'")
          setNextAvailableLabel(StatTable.Consummation, "Consummation", "Consummation", "cast consummation")
          setNextAvailableLabelExhaust(StatTable.FlowLikeWater, StatTable.FlowLikeWaterExhaust, "Flow", "Flow", "cast 'flow like water'")
        end
        
      elseif(MyClass == "Shadowfist") then        
        setNextAvailableLabelExhaust(StatTable.EmuStance, StatTable.EmuStanceExhaust, "Emu", "Emu Stance", "stance emu")
        setNextAvailableLabelExhaust(StatTable.TigerStance, StatTable.TigerStanceExhaust, "Tiger", "Tiger Stance", "stance tiger")
        setNextAvailableLabelExhaust(StatTable.VampireFang, StatTable.VampireFangExhaust, "Vampire", "Vampire Fang", "stance vampire")
        setNextAvailableLabelExhaust(StatTable.SpectralFang, StatTable.SpectralFangExhaust, "Spectral", "Spectral Fang", "stance spectral")
        setNextAvailableLabel(StatTable.DaggerHand, "Dagger", "Dagger Hand", "cast 'dagger hand'")
        setNextAvailableLabel(StatTable.StoneFist, "Stone Fist", "Stone Fist", "cast 'stone fist'")
        if MyLevel == 125 then setNextAvailableLabel(StatTable.Consummation, "Consummation", "Consummation", "cast consummation") end
      
      
      elseif(MyClass == "Warrior") then
        setNextAvailableLabelExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "Protective", "Protective", "stance protective")
        setNextAvailableLabelExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "Surefoot", "Surefoot", "stance surefoot")
        setNextAvailableLabelExhaust(StatTable.StanceRelentless, StatTable.StanceRelentlessExhaust, "Relentless", "Relentless", "stance relentless")
      
      elseif(MyClass == "Ripper") then
        KillLabel5:echo("&lt;left&gt;Pounce&lt;/left&gt;")
        KillLabel5:setClickCallback("AutoKillFunc", "pounce")
        setNextAvailableLabelExhaust(StatTable.Tear, StatTable.TearExhaust, "Tear", "Tear", "tear corpse") 
        setNextAvailableLabelExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "Protective", "Protective", "stance protective")
        setNextAvailableLabelExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "Surefoot", "Surefoot", "stance surefoot")
        setNextAvailableLabelExhaust(StatTable.StanceRelentless, StatTable.StanceRelentlessExhaust, "Relentless", "Relentless", "stance relentless")
        
      elseif(MyClass == "Bodyguard") then
        setNextAvailableLabelExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "Protective", "Protective", "stance protective")
        setNextAvailableLabelExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "Surefoot", "Surefoot", "stance surefoot")
        setNextAvailableLabelExhaust(StatTable.StanceRelentless, StatTable.StanceRelentlessExhaust, "Relentless", "Relentless", "stance relentless")
        setNextAvailableLabel(StatTable.Alertness, "Alert", "Alertness", "alertness")
      
      
      elseif(MyClass == "Paladin") then
        setNextAvailableLabelExhaust(StatTable.StanceProtective, StatTable.StanceProtectiveExhaust, "Protective", "Protective", "stance protective")
        setNextAvailableLabelExhaust(StatTable.StanceSurefoot, StatTable.StanceSurefootExhaust, "Surefoot", "Surefoot", "stance surefoot")
        setNextAvailableLabelExhaust(StatTable.StanceRelentless, StatTable.StanceRelentlessExhaust, "Relentless", "Relentless", "stance relentless")
        setNextAvailableLabel(StatTable.Acumen, "Acumen", "Acumen", "cast acumen")
        setNextAvailableLabel(StatTable.SavingGrace, "Saving", "Saving Grace", "cast 'saving grace'")
        setNextAvailableLabel(StatTable.Oath, "Oath", "No Oath", "")
        setNextAvailableLabel(StatTable.Prayer, "Prayer", "No Prayer", GlobalVar.PrayerName and "cast prayer" .. GlobalVar.PrayerName or "")
        -- TODO BOON CODE
        if StatTable.JoinedBoon then
          setNextAvailableLabel(StatTable.JoinedBoon, "Joined", "Joined", "")
        elseif StatTable.SharedBoon then
          setNextAvailableLabel(StatTable.SharedBoon, "Shared", "Shared", "")
        elseif StatTable.HeroicBoon then
          setNextAvailableLabel(StatTable.HeroicBoon, "Heroic", "Heroic", "")
        elseif StatTable.ValorousBoon then
          setNextAvailableLabel(StatTable.ValorousBoon, "Valorous", "Valorous", "")
        elseif StatTable.FinalBoon then
          setNextAvailableLabel(StatTable.JoinedBoon, "Final", "Final", "")
        else
          setNextAvailableLabel(nil, "", "No Boon", "")
        end
        setNextAvailableLabel(StatTable.HolyZeal, "Holy Zeal", "Holy Zeal", "cast 'holy zeal'")
      
      
      elseif(MyClass == "Berserker") then
        setNextAvailableLabel(StatTable.Rally, "Rally", "Rally", "rally")
        
        
      elseif (StatTable.Class == "Psionicist") then
        setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
        setNextAvailableLabelExhaust(StatTable.KineticChain, StatTable.KineticChainExhaust, "Kin Chain", "Kinetic Chain", "cast 'kinetic chain'") 
        setNextAvailableLabel(StatTable.FuryOfTheMind, "Fury", "Fury Of The Mind", "cast 'fury of the mind'")
        setNextAvailableLabel(StatTable.MindsEye, "Minds Eye", "Minds Eye", "cast 'minds eye'")
        setNextAvailableLabel(StatTable.Orbit, "Orbit", "Orbit", "")
        
        if MyLevel == 125 and MySubLevel &gt;= 200 then
          setNextAvailableLabel(StatTable.Gravitas, "Gravitas", "Gravitas", "cast 'gravitas'")
        end
        setNextAvailableLabelIfActive(StatTable.StunningWeapon, "Stun Wpn", "Stun Wpn", "cast 'stunning weapon'")
        setNextAvailableLabelIfActive(StatTable.DistractingWeapon, "Distract Wpn", "Distract Wpn", "cast 'distracting weapon'")
        setNextAvailableLabelIfActive(StatTable.DisablingWeapon, "Disable Wpn", "Disable Wpn", "cast 'disabling weapon'")
        setNextAvailableLabelIfActive(StatTable.RestrictingWeapon, "Rest Wpn", "Restrict Wpn", "cast 'restricting weapon'")
        setNextAvailableLabelIfActive(StatTable.FellingWeapon, "Fell Wpn", "Fell Wpn", "cast 'felling weapon'")
        setNextAvailableLabelIfActive(StatTable.ConsciousWeapon, "Consc Wpn", "Conscious Wpn", "cast 'conscious weapon'")
        setNextAvailableLabelIfActive(StatTable.IntelligentWeapon, "Intell Wpn", "Intell Wpn", "cast 'intelligent weapon'")
        setNextAvailableLabelIfActive(StatTable.EmpathicResonance, "Emp. Res.", "Emp. Res.", "")
      elseif (StatTable.Class == "Mindbender") then
        setNextAvailableLabel(StatTable.Savvy, "Savvy", "Savvy", "cast savvy")
        setNextAvailableLabel(StatTable.MindsEye, "Minds Eye", "Minds Eye", "cast 'minds eye'")
        setNextAvailableLabel(StatTable.HiveMind, "Hive Mind", "Hive Mind", "cast 'hive mind'")
        setNextAvailableLabel(StatTable.EmpathicResonance, "Emp. Res.", "Emp. Res.", "cast 'empathic resonance'")
        if StatTable.PsyphonExhaust then setNextAvailableLabelDebuff(StatTable.PsyphonExhaust, "Psyphon") end

      end -- end of MyClass
      
      -- Start of MyRace code
      
      if ArrayHasValue(StaticVars.DarkRaces, MyRace) then
        setNextAvailableLabel(StatTable.DarkEmbrace, "Dark Embrace", "Dark Embrace", "cast 'dark embrace'")
      end
      
      
      if MyRace == "Troll" then
        setNextAvailableLabelExhaust(StatTable.RacialRevival, StatTable.RacialRevivalFatigue, "Revival", "Revival", "racial revival")
      elseif (MyRace == "Ignatur") then
        setNextAvailableLabelExhaust(StatTable.RacialFireaura, StatTable.RacialFireauraFatigue, "Fire Aura", "Fire Aura", "racial fireaura")
        setNextAvailableLabelExhaust(StatTable.RacialInnervate, StatTable.RacialInnervateFatigue, "Innervate (" .. (StatTable.RacialInnervateRegen or 0) .. "%)", "Innervate", "racial innervate")
        
        
      elseif (MyRace == "Golem") then
        setNextAvailableLabelExhaust(StatTable.RacialGalvanize, StatTable.RacialGalvanizeFatigue, "Galvanize", "Galvanize", "racial galvanize")
      elseif (MyRace == "Dragon") then
        setNextAvailableLabelExhaust(nil, StatTable.RacialRoarFatigue, "Roar", "Roar", "racial roar")
        setNextAvailableLabelExhaust(StatTable.RacialDevour, StatTable.RacialDevourFatigue, "Devour", "Devour", "racial devour")
      end -- end of MyRace
      
      -- Labels to only show when they affect you
      
      if StatTable.Intervention and MyClass ~= "Priest" then
        setNextAvailableLabel(StatTable.Intervention, "Interv.", "Intervention", "")
      end
      
      if StatTable.Solitude  and MyClass ~= "Priest" then
        setNextAvailableLabel(StatTable.Solitude, "Solitude", "Solituden", "")
      end  
      
      if StatTable.Regeneration then
        setNextAvailableLabel(StatTable.Regeneration, "Regen", "Regen", "cast regeneration")
      end
      
      
      if MyClass ~= "Cleric" and StatTable.ArtificerBlessingAura then setNextAvailableLabel(StatTable.ArtificerBlessingAura, "Art Bless Aura", "Art Bless Aura", "") end
      

      -- Misc buffs
      if StatTable.HandOfGod then setNextAvailableLabel(StatTable.HandOfGod, "HOG!!!", "HOG!!!", "") end
      if StatTable.Endurance then setNextAvailableLabel(StatTable.Endurance, "Endur.", "Endurance", "cast endurance") end
      
      -- Racial fatigues

      if StatTable.RacialBreathFatigue then setNextAvailableLabelDebuff(StatTable.RacialBreathFatigue, "Breath") end

      -- Debuffs
      local function debuff_label(debuff)
        if StatTable[debuff] then setNextAvailableLabelDebuff(StatTable[debuff], debuff) end
      end
      
      local Debuffs = {"Calm", "Shun", "Blindness", "Heartbane", "Fear", "Poison", "Curse", "Demonfire", "Virus", 
      "Biotoxin", "Venom", "Toxin", "DoomToxin", "Flash", "Weaken", "Overconfidence", "Scramble", "Panic", "FaerieFire", "Plague",
      "Unrest", "WaterBreathingExhaust", "GiantStrengthExhaust", "FlyExhaust", "CureLightExhaust"}
      
      for _, debuff in ipairs(Debuffs) do
        debuff_label(debuff)
      end
      
      if StatTable.DoomToxin then
        if IsMDAY() then TryAction("gtell |BR|doom toxin!|N|", 60); TryAction("gtell panacea", 60)
        else TryAction("emote is afflicted with |BR|DOOM TOXIN|N|!", 60) end
      end      
      

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="no" isFolder="no">
					<name>Group Update Vago</name>
					<packageName></packageName>
					<script>-------------------------------------------------
-- Group GUI Update Script   
-- Updates all the groupmate info in the group container
-------------------------------------------------

local SmallScreen = true

-- called on update to GMCP_Group()
function UpdateGroupGUI(GroupieTableIndex, Player)
  local player_name = Player.name
  
  if StatTable.CharName == Player.name then
    player_name = "&lt;left&gt;&lt;span style='color: rgb(255,255,255)'&gt;" .. Player.name .. "&lt;/span&gt;"
    if Player.leader then player_name = "&lt;b&gt;" .. player_name .. "&lt;/b&gt;" end
  elseif Player.leader then
    player_name = "&lt;b&gt;&lt;left&gt;&lt;span style='color: rgb(255,0,0)'&gt;" .. Player.name .. "&lt;/span&gt;&lt;/b&gt;"
  
  end
  
  if AR.Status then
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(10,126,242)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name .. "&lt;/left&gt;")
  else
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(125,125,125)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name  .. "&lt;/left&gt;")
  end
  
  GroupieTable[GroupieTableIndex].NameLabel:setClickCallback(function() send("r " .. Player.name) end)
  GroupieTable[GroupieTableIndex].InfoLabel:echo(SmallScreen and "&lt;center&gt;" .. Player.class .. "&lt;/center&gt;" or "&lt;left&gt;" .. Player.race .. "-" .. Player.class .. "&lt;/left&gt;")
  GroupieTable[GroupieTableIndex].InfoLabel:setClickCallback(function() OnMobDeathQueue("monitor " .. Player.name) end)

  local PosistionLabelEcho = ""
  if Player.position == "Busy" or Player.position == "STUN" then
      PosistionLabelEcho = "&lt;span style='color: rgb(128,0,128)'&gt;"
  elseif Player.position == "Rest" then
      PosistionLabelEcho = "&lt;span style='color: rgb(0,255,0)'&gt;"
  elseif Player.position == "Fight" then
      PosistionLabelEcho = "&lt;span style='color: rgb(255,0,0)'&gt;"
  elseif Player.position == "Stand" then
      PosistionLabelEcho = "&lt;span style='color: rgb(0,255,0)'&gt;"
  end
  
  PosistionLabelEcho = PosistionLabelEcho .. (SmallScreen and string.sub(Player.position, 1, 3) or Player.position)
  GroupieTable[GroupieTableIndex].PositionLabel:echo("&lt;right&gt;" .. PosistionLabelEcho .. "&lt;/right&gt;")
 
  local PlayerMaxHP = tonumber(Player.maxhp)
  local PlayerHP = math.min(tonumber(Player.hp), PlayerMaxHP)

  GroupieTable[GroupieTableIndex].HPBar:setValue(PlayerHP, PlayerMaxHP,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(0,0,0)'&gt;".. Player.hp .. (SmallScreen and "" or "/" .. PlayerMaxHP) .. "&lt;/center&gt;")
  local HPBar_HealSpell = StatTable.Level == 125 and "cast comfort " .. Player.name or "cast divinity ".. Player.name
  GroupieTable[GroupieTableIndex].HPMaskLabel:setClickCallback(function() send(HPBar_HealSpell) end)
  
  local PlayerMaxMana = tonumber(Player.maxmp)
  local PlayerMana = math.min(tonumber(Player.mp), PlayerMaxMana)    
      
  if(PlayerMaxMana == nil or PlayerMaxMana == 0) then
    GroupieTable[GroupieTableIndex].ManaBar:setValue(1,1,"&lt;center&gt;&lt;font-size ='5px'&gt;No MP&lt;/center&gt;")
  else
    GroupieTable[GroupieTableIndex].ManaBar:setValue(PlayerMana,PlayerMaxMana,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(0,0,0)'&gt;".. Player.mp .. (SmallScreen and "" or "/" .. PlayerMaxMana) .. "&lt;/center&gt;")
  end

  if (Player.class == "Sor" or Player.class == "Mag" or Player.class == "Wzd" or Player.class == "Psi" or Player.class == "Mnd" or Player.class == "Stm") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);]])
  elseif (Player.class == "Prs" or Player.class == "Cle" or Player.class == "Dru" or Player.class == "Pal" or Player.class == "Viz") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900);]])           
  else
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3399ff, stop: 0.1 #3399ff, stop: 0.49 #92c7fc, stop: 0.5 #178bff, stop: 1 #17aaff);]])
  end

  GroupieTable[GroupieTableIndex]:show()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Avatar Layout</name>
					<packageName></packageName>
					<script>-------------------------------------------------
-- Main AVATAR GUI Layout File    
-- Creates all the consoles / gauges / labels                      
-------------------------------------------------

Layout = Layout or {}
Layout.Labels = Layout.Labels or {}
Layout.DefaultFontSize = GlobalVar.FontSize or 8

styleSheetOff = {
  borderColor = 'yellow',
  backgroundColor = 'rgba(255, 0, 0, 0.5)',
  borderRadius = 3,
}

styleSheetOn = {
  borderColor = 'yellow',
  backgroundColor = 'green',
  borderRadius = 3,
}

headerStyleSheet = {
  borderColor = 'yellow',
  backgroundColor = 'black',
  borderRadius = 3
}

-- Function to generate style sheet
local function generateStyleSheet(params)
  if (not params) then traceback_detail() end
  return string.format([[
  border-width: 1px;
  border-style: solid;
  border-color: %s;
  background-color: %s;
  border-radius: %spx;
  ]], params.borderColor, params.backgroundColor, params.borderRadius)
end

-- Function to create labels
local function createLabel(name, x, y, width, height, fgColor, message, container, fontSizeAdj, styleSheetParams)
  fontSize = Layout.DefaultFontSize + tonumber(fontSizeAdj or 0)
  local parent = container or Geyser
  local label = Geyser.Label:new({
      name = name,
      x = x, y = y,
      width = width, height = height,
      fgColor = fgColor,
      message = message
  }, parent)
  if styleSheetParams then
  local extraStyle = "padding-bottom: 6px;"  -- adds extra space below each line
  label:setStyleSheet(generateStyleSheet(styleSheetParams) .. extraStyle)
end
  label:setFontSize(fontSize)
  return label
end


function ReportRun()
  if (StatTable.Level &lt; 125) then DamageCounter.Report() end
  RunStats.Report()
  DamageCounter.ReportEcho()
end

function ResetRun()
  RunStats.Reset()
  RunStats.EchoSession()
  DamageCounter.ReportEcho()
  DamageCounter.Reset()
end

function AutoKillFunc(name)
  echo("Trigger killstyle - " .. name .. "\n")
  closeAllLevels(AutoKillLabel)

  if (name == "OFF") then
    GlobalVar.KillStyle = "kill"
    GlobalVar.AutoKill = false
  else
    GlobalVar.KillStyle = name
    GlobalVar.AutoKill = true
  end
  AutoKillSetGUI()
end

function AutoSkillToggle()
  if GlobalVar.SkillStyle == "" then
    print("AutoSkill: please set a skill style first - useage: skillstyle &lt;skill&gt;")
    return
  end

  GlobalVar.AutoSkill = not GlobalVar.AutoSkill
  AutoSkillSetGUI()
end

function AutoBashToggle()
  GlobalVar.AutoBash = not GlobalVar.AutoBash
  AutoBashSetGUI()
end

function AutoCastToggle()
  if GlobalVar.AutoCast then
    AutoCastOFF()
  else
    AutoCastON()
  end
end

function AutoKillSetGUI()
  if not GlobalVar.GUI then return end
  if not GlobalVar.KillStyle then GlobalVar.KillStyle = "kill" end
  
  local statusMessage = GlobalVar.AutoKill and GlobalVar.KillStyle or "OFF"
  local styleSheet = GlobalVar.AutoKill and styleSheetOn or styleSheetOff
  
  AutoKillLabel:echo("&lt;center&gt;AutoKill - " .. statusMessage .. "&lt;/center&gt;")
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoSkillSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoSkill and GlobalVar.SkillStyle or "OFF"
  local styleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  
  AutoSkillLabel:echo("&lt;center&gt;AutoSkill - " .. statusMessage .. "&lt;/center&gt;")
  AutoSkillLabel:setStyleSheet(generateStyleSheet(styleSheet))
end

function AutoBashSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoBash and "ON" or "OFF"
  local styleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff

  AutoBashLabel:echo("&lt;center&gt;AutoBash " .. statusMessage .. "&lt;/center&gt;")
  AutoBashLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function AutoCastSetGUI()
  if not GlobalVar.GUI then return end
  
  local statusMessage = GlobalVar.AutoCast and "AutoCast - ".. GlobalVar.AutoCaster or "AutoCast OFF"
  local styleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff

  AutoCastLabel:echo("&lt;center&gt;" .. statusMessage .. "&lt;/center&gt;")
  AutoCastLabel:setStyleSheet(generateStyleSheet(styleSheet))

end

function LoadLayout()
  local mainWidth, mainHeight = getMainWindowSize()--setup. Lets get the screen space we have available and chop it up
  local LeftPanelPercent = 20 -- left side panel should be what % of available space
  local LeftPanelWidth = tonumber(mainWidth)*(LeftPanelPercent/100)  
  local RightPanelPercent = 25 -- right panel should be 25% of the available space
  local RightPanelWidth = tonumber(mainWidth)*(RightPanelPercent/100)  
  local CentrePanelWidth = mainWidth - (RightPanelWidth + LeftPanelWidth)-- the middle area left after we have 2 side panels
  local CentrePanelSize = CentrePanelWidth/20 --break the space in middle up into 20 spaces for loading stuff in 
  
  Layout.DefaultFontSize = GlobalVar.FontSize or 8
  
  -- left hand panel - full height
  setBorderLeft(LeftPanelWidth)
  
  left_container = Geyser.Container:new({
    name = "left_container",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="100%",      -- filling it up until the end
  })
  
  GroupContainer = Geyser.Container:new({
    name = "GroupContainer",
    x="0", y=0,                    -- makes the container start 20% of the screen away from the right side
    width = LeftPanelWidth, height="55%",      -- filling it up until the end
  },left_container)
  
  GroupPanel_background = createLabel("GroupPanel_background", "1%", "0", "95%", "100%", "black", nil, GroupContainer, nil, headerStyleSheet)
  lowerWindow("GroupPanel_background")

  GroupPanelHeader = createLabel("GroupPanelHeader", "1%", "0", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Group&lt;&lt;/b&gt;&lt;/center&gt;]], GroupContainer, nil, headerStyleSheet)

  GroupContainerInner = Geyser.VBox:new({
    name = "GroupContainerInner",
    x="2%", y="25",                     
    width = "96%", height="99%", 
  }, GroupContainer)    
  
  
  GroupieTable = {}
  --group is set to max StaticVars.MaxGroupLabels (default 32)
  for i=1, StaticVars.MaxGroupLabels do
  


    GroupieTable[i] = Geyser.Container:new({name="groupy"..tostring(i),height="10",width="90%"},GroupContainerInner)
    GroupieTable[i].PositionLabel = Geyser.Label:new({name = "PositionLabel."..tostring(i), x = "1%", y = "4%", width = "4%", height = "80%", fgColor = "white"}, GroupieTable[i], 0, nil)
    GroupieTable[i].NameLabel = createLabel("NameLabel"..tostring(i), "5%", "0", "22%", "90%", "yellow", "&lt;left&gt; Name &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].TNLBar = createLabel("TNLBar"..tostring(i), "62%", "0", "16%", "90%", "yellow", "&lt;left&gt; TNL &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].InfoLabel = createLabel("InfoLabel"..tostring(i), "80%", "0", "16%", "90%", "yellow", "&lt;left&gt; Info &lt;/left&gt;", GroupieTable[i], 0, nil)
    GroupieTable[i].NameLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].InfoLabel:setStyleSheet([[ background-color: black; ]])
    GroupieTable[i].TNLBar:setStyleSheet([[ background-color: black; ]])
    
    GroupieTable[i].HPBar = Geyser.Gauge:new({
      name="HPBar"..tostring(i),
      x="28%", y="3%",
      width="16%", height="80%",
    },GroupieTable[i])
          
    GroupieTable[i].HPBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].HPBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
         
    GroupieTable[i].HPMaskLabel = createLabel("HPMaskLabel"..tostring(i), "45%", "3%", "25%", "90%", "yellow", "", GroupieTable[i], 0, nil)
    GroupieTable[i].HPMaskLabel:setColor(0,0,0,0)
    GroupieTable[i].HPMaskLabel:setToolTip("Click the HP Bar to provide a divinity / comfort to target", 10)
    
    GroupieTable[i].ManaBar = Geyser.Gauge:new({
    name="ManaBar"..tostring(i),
    x="45%", y="3%",
    width="16%", height="80%",
    },GroupieTable[i])
              
    GroupieTable[i].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);
      border-top: 1px black solid;
      border-left: 1px black solid;
      border-bottom: 1px black solid;
      border-radius: 2;
      padding: 3px;]])
    GroupieTable[i].ManaBar.back:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FFFFFF, stop: 1 #FFFFFF);
      border-width: 1px;
      border-color: black;
      border-style: solid;
      border-radius: 2;
      padding: 3px;]])
      
      GroupieTable[i].TNLBar = Geyser.Gauge:new({
      name = "TNLBar"..tostring(i),
      x = "62%", y = "3%",
      width = "16%", height = "80%",
      }, GroupieTable[i]) -- this is where we tell it what container to go into
      
      GroupieTable[i].TNLBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #af33ff, stop: 0.1 #591685, stop: 0.49 #2e0e43, stop: 0.5 #591685, stop: 1 #af33ff);
        border-top: 1px black solid;
        border-left: 1px black solid;
        border-bottom: 1px black solid;
        border-radius: 2;
        padding: 3px;]])
      GroupieTable[i].TNLBar.back:setStyleSheet([[[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #363532, stop: 0.3 #ffffff, stop: 1 #363532);
        border-width: 1px;
        border-color: black;
        border-style: solid;
        border-radius: 2;
        padding: 3px;]])
      
      GroupieTable[i]:hide()

  end
  
  --LEFT MIDDLE START container on left for info
  left_container_middle = Geyser.Container:new({
    name = "left_container_middle",
    x=0, y="55%",                 
    width = "100%", height="15%", 
  }, left_container)
  
  left_container_middle_background = createLabel("left_container_middle_background", "1%", "1%", "95%", "98%", "black", nil, left_container_middle, nil, headerStyleSheet)
  lowerWindow("left_container_middle_background")
  leftmiddlePanelHeader = createLabel("leftmiddlePanelHeader", "1%", "1%", "95%", "20", "orange", [[&lt;center&gt;&lt;b&gt;Room Info&lt;/b&gt;&lt;/center&gt;]], left_container_middle, nil, headerStyleSheet)

  local styleSheetHidden = {
    borderColor = 'black',
    backgroundColor = 'black',
    borderRadius = 1,
  }

  RoomLabel = createLabel("RoomLabel", "3%", "22", "90%", "18", "white", [[&lt;center&gt;Room&lt;/center&gt;]], left_container_middle, nil, styleSheetHidden)
  ExitListLabel = createLabel("ExitListLabel", "3%", "40", "90%", "18", "yellow", [[&lt;left&gt;&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim1Label = createLabel("Victim1Label", "3%", "60", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim2Label = createLabel("Victim2Label", "3%", "80", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  Victim3Label = createLabel("Victim3Label", "3%", "100", "90%", "18", "white", [[&lt;left&gt;...&lt;/left&gt;]], left_container_middle, nil, styleSheetHidden)
  
  Victim1Label:hide()
  Victim2Label:hide()
  Victim3Label:hide()
  
  --bottom container on left for spell effects
  left_container_bottom = Geyser.Container:new({
    name = "left_container_bottom",
    x=0, y="70%",                 
    width = "100%", height="30%", 
  }, left_container)
  
  left_container_background = createLabel("left_container_background", "1%", "0", "95%", "100%", "black", nil, left_container_bottom, nil, headerStyleSheet)
  lowerWindow("left_container_background")
  leftlowerPanelHeader = createLabel("leftlowerPanelHeader", "1%", "0", "95%", "18", "orange", [[&lt;center&gt;&lt;b&gt;Affects&lt;/b&gt;&lt;/center&gt;]], left_container_bottom, nil, headerStyleSheet)

  local affectLabelHeight = 15
  local rowSpacing = affectLabelHeight + 3
  local rowStartY = 26

  -- affect labels
  MoveHiddenLabel = createLabel("MoveHiddenLabel", "3%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Move Hidden&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SneakLabel = createLabel("SneakLabel", "34%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sneak&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvisLabel = createLabel("InvisLabel", "65%", rowStartY, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invis&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SancLabel = createLabel("SancLabel", "3%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Sanctuary&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FrenzyLabel = createLabel("FrenzyLabel", "34%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Frenzy&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WaterLabel = createLabel("WaterLabel", "65%", rowStartY + rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;WaterBreath&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FortLabel = createLabel("FortLabel", "3%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Fortitudes&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  FociLabel = createLabel("FociLabel", "34%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Foci&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  AwenLabel = createLabel("AwenLabel", "65%", rowStartY + 2 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Awen&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  InvincLabel = createLabel("InvincLabel", "3%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Invinc&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  BarkLabel = createLabel("BarkLabel", "34%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Barkskin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  SteelLabel = createLabel("SteelLabel", "65%", rowStartY + 3 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Steel Skel&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  IronLabel = createLabel("IronLabel", "3%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Iron Skin&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  ConcentrateLabel = createLabel("ConcentrateLabel", "34%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Concentrate&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)
  WerreLabel = createLabel("WerreLabel", "65%", rowStartY + 4 * rowSpacing, "28%", affectLabelHeight, "white", [[&lt;left&gt;Werrebocler&lt;/left&gt;]], left_container_bottom, nil, styleSheetOn)

  --START SPECIFICS
    -- Create an empty table to store the Layout.Labels
  local labelIndex = 1  -- Counter for label names
  rowStartY = rowStartY + 5 * rowSpacing
  
  for row = 1, 4 do
    for column = 1, 3 do
      local x, y
      if column == 1 then
        x = "3%"
      elseif column == 2 then
        x = "34%"
      else
        x = "65%"
      end
      
      
      local y = tostring(rowStartY + (row - 1) * rowSpacing)
  
      Layout.Labels[labelIndex] = createLabel("Skill" .. labelIndex .. "Label", x, y, "28%", affectLabelHeight, "white", "Extra Label", left_container_bottom, nil, styleSheetOn)
      Layout.Labels[labelIndex]:hide()
  
      labelIndex = labelIndex + 1
    end
  end

  -- RIGHT CONTAINER 
  setBorderRight(RightPanelWidth)
  
  -- Top border
  right_container = Geyser.Container:new({
    name = "right_container",
    x = mainWidth - RightPanelWidth, y = 0,
    width = RightPanelWidth, height = "100%",
  })
  
  -- RightOutline
  RightOutline = createLabel("LeftBorder", "0", "0", "100%", "100%", "black", [[&lt;center&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  lowerWindow("RightOutline")


  -- Channel Consoles
  local function createChatWindow(name, x, y, width, height, parent)
    return Geyser.MiniConsole:new({
      name = name,
      x = x, y = y,
      autoWrap = true,
      color = "black",
      scrollBar = true,
      fontSize = Layout.DefaultFontSize,
      width = width, height = height,
    }, parent)
  end
  
  PublicChannels = createChatWindow("Channels", "1%", "2%", "99%", "23%", right_container)
  GroupChat = createChatWindow("GroupChat", "1%", "27%", "99%", "23%", right_container)
  BuddyChat = createChatWindow("BuddyChat", "1%", "52%", "99%", "23%", right_container)
  GameChat = createChatWindow("GameChat", "1%", "77%", "99%", "23%", right_container)

  ChannelLabel = createLabel("ChannelLabel", "0", "0", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Public Channels&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GroupLabel = createLabel("GroupLabel", "0", "25%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Group Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  BuddyLabel = createLabel("BuddyLabel", "0", "50%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Buddy Chat&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
  GameLabel = createLabel("GameLabel", "0", "75%", "100%", "2%", "orange", [[&lt;center&gt;&lt;b&gt;Game Messages&lt;/b&gt;&lt;/center&gt;]], right_container, nil, headerStyleSheet)
    
  --BOTTOM STAT PANEL
  setBorderBottom(129)
  
  Bottom_container = Geyser.Container:new({
    name = "Bottom_container",
    x = LeftPanelWidth -10, y= mainHeight-129,                    -- makes the container start where left panel ends
    width = CentrePanelWidth, height="135",      -- filling it up until the end
  })
  
  FillLabel = createLabel("FillLabel", "0", "0", "100%", "95%", "black", "&lt;center&gt;&lt;/center&gt;", Bottom_container, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})
  
  CharPanel = Geyser.Container:new({
    name="CharPanel",
    x="0", y="0",
    width="100%", height="50",
  }, Bottom_container)
  
  CharBackGround = createLabel("CharBackGround", "0", "0", "100%", "100%", "black", "&lt;center&gt;&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "black", borderRadius = 3})

  -- Lower windows after creation
  lowerWindow("CharBackGround")
  lowerWindow("FillLabel")

  CharNameLabel = createLabel("CharNameLabel", "0", "0", CentrePanelSize*3, "50", "black", "&lt;center&gt;char name&lt;/center&gt;", CharPanel, 6, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharInfoLabel = createLabel("CharInfoLabel", CentrePanelSize*3, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char info&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharLevelLabel = createLabel("CharLevelLabel", CentrePanelSize*3, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Char levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharHitDamLabel = createLabel("CharHitDamLabel", CentrePanelSize*6, "0", CentrePanelSize*3, "25", "black", "&lt;center&gt;Hit/Dam&lt;/center&gt;", CharPanel, 1, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  CharACLabel = createLabel("CharACLabel", CentrePanelSize*6, "25", CentrePanelSize*3, "25", "black", "&lt;center&gt;Armor Class&lt;/center&gt;", CharPanel, 3, {borderColor = "yellow", backgroundColor = "DarkGoldenrod", borderRadius = 3})
  RunXPLabel = createLabel("RunXPLabel", CentrePanelSize*9, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run XP&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunKillsLabel = createLabel("RunKillsLabel", CentrePanelSize*9, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Kills&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunLevelsLabel = createLabel("RunLevelsLabel", CentrePanelSize*11, "0", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run levels&lt;/center&gt;", CharPanel, 2, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunStatsLabel = createLabel("RunStatsLabel", CentrePanelSize*11, "25", CentrePanelSize*2, "25", "white", "&lt;center&gt;Run Stat&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})

  -- Clickable Labels
  RunReportLabel = createLabel("RunReportLabel", CentrePanelSize*13, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Report&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunReportLabel:setClickCallback("ReportRun")

  RunResetLabel = createLabel("RunResetLabel", CentrePanelSize*14, "0", CentrePanelSize*1, "50", "white", "&lt;center&gt;Reset&lt;/center&gt;", CharPanel, nil, {borderColor = "yellow", backgroundColor = "MidnightBlue", borderRadius = 3})
  RunResetLabel:setClickCallback("ResetRun")

  
  --SECTION FOR HANDLING AUTOKILL OPTIONS

  -- AutoKillLabel creation

  local function createKillLabel(name, message, callbackArg)
    local killLabel = AutoKillLabel:addChild({name=name, height=30, width=CentrePanelSize*2, layoutDir="TV", flyOut=true, message=message})
    killLabel:setClickCallback("AutoKillFunc", callbackArg)
    killLabel:setStyleSheet([[
        border-width: 1px;
        border-style: solid;
        border-color: yellow;
        background-color: green;
        border-radius: 3px;
    ]])
    killLabel:setFontSize(Layout.DefaultFontSize)
    return killLabel
  end

  AutoKillLabel = Geyser.Label:new({
      name = "AutoKillLabel",
      x = CentrePanelSize*15, y = "0",
      width = CentrePanelSize*2, height = "25",
      fgColor = "white",
      message = [[&lt;center&gt;AutoKill OFF&lt;/center&gt;]],
      nestable = true
  }, CharPanel)
  
  AutoKillLabel:setStyleSheet(generateStyleSheet(styleSheetOn))
  -- Add other AutoKillLabel configurations here...
  
  KillLabel1 = createKillLabel("KillLabel1", "Kill", "Kill")
  KillLabel2 = createKillLabel("KillLabel2", "Surp", "Surp")
  KillLabel3 = createKillLabel("KillLabel3", "Backstab", "BS")
  KillLabel4 = createKillLabel("KillLabel4", "Bash", "Bash")
  KillLabel5 = createKillLabel("KillLabel5", " ", "OFF")
  KillLabel6 = createKillLabel("KillLabel6", "AUTO OFF", "OFF")
  
  -- AutoSkillLabel creation
  local autoSkillStyleSheet = GlobalVar.AutoSkill and styleSheetOn or styleSheetOff
  local autoSkillMessage = GlobalVar.AutoSkill and "&lt;center&gt;AutoSkill " .. GlobalVar.SkillStyle .. "&lt;/center&gt;" or "&lt;center&gt;AutoSkill OFF&lt;/center&gt;"

  AutoSkillLabel = createLabel("AutoSkillLabel", CentrePanelSize*17, 0, CentrePanelSize*3, 25, "white", autoSkillMessage, CharPanel, nil, autoSkillStyleSheet)
  AutoSkillLabel:setClickCallback("AutoSkillToggle")
  

  -- AutoBashLabel creation
  local autoBashStyleSheet = GlobalVar.AutoBash and styleSheetOn or styleSheetOff
  local autoBashMessage = GlobalVar.AutoBash and "&lt;center&gt;AutoBash ON&lt;/center&gt;" or "&lt;center&gt;AutoBash OFF&lt;/center&gt;"

  AutoBashLabel = createLabel("AutoBashLabel", CentrePanelSize*15, 25, CentrePanelSize*2, 25, "white", autoBashMessage, CharPanel, nil, autoBashStyleSheet)
  AutoBashLabel:setClickCallback("AutoBashToggle")

  -- AutoCastLabel creation
  local autoCastStyleSheet = GlobalVar.AutoCast and styleSheetOn or styleSheetOff
  local autoCastMessage = GlobalVar.AutoCast and "&lt;center&gt;AutoCast - ".. GlobalVar.AutoCaster .. "&lt;/center&gt;" or "&lt;center&gt;AutoCast OFF&lt;/center&gt;"

  AutoCastLabel = createLabel("AutoCastLabel", CentrePanelSize*17, 25, CentrePanelSize*3, 25, "white", autoCastMessage, CharPanel, nil, autoCastStyleSheet)
  AutoCastLabel:setClickCallback("AutoCastToggle")
  
  LagLabel = createLabel("LagLabel", 10, 55, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Comm Lag&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  QiLabel = createLabel("QiLabel", 10, 80, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Qi&lt;/center&gt;", Bottom_container, nil, styleSheetOff)
  SavespellLabel = createLabel("SavespellLabel", 10, 105, CentrePanelSize*1.5, 20, "white", "&lt;center&gt;Savespell&lt;/center&gt;", Bottom_container, nil, styleSheetOff)

  
  -- Gauges
  local commonFrontStyle = [[
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
  ]]
  local commonBackStyle = [[
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
  ]]
   
  local barTable = {
    MainHPBar = {
      x = 2, y = "55", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    MainMPBar = {
      x = 2, y = "80", width = 5.5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    MoveBar = {
      x = 8, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #78bd33, stop: 0.1 #6ebd20, stop: 0.49 #4c9900, stop: 0.5 #387000, stop: 1 #4c9900)",
    },
    TNLBar = {
      x = 8, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff9900, stop: 1 #990000)",
    },
    MonitorBar = {
      x = 14, y = "55", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ff00ff, stop: 0.3 #ff33cc, stop: 1 #cc0066)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffffff, stop: 1 #ffccff)",
    },
    EnemyBar = {
      x = 14, y = "80", width = 5, height = "20",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #bd3333, stop: 0.1 #bd2020, stop: 0.49 #990000, stop: 0.5 #700000, stop: 1 #990000)",
    },
    WeightBar = {
      x = 2, y = "105", width = 5.5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #467387, stop:.04 #69b7db, stop:.09 #9feae5, stop:.28 #2addd1, stop:.46 #31f9f9, stop:.67 #29bbce, stop:1 #045f89)",
      back = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0099cc, stop: 1 #0099ff)",
    },
    ItemsBar = {
      x = 8, y = "105", width = 5, height = "20",
      front = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #8a2f2f,stop: .22 #581111,stop: .48 #641414,stop: .68 #7e1919,stop: 1 #b17575)",
    },
    AlignmentBar = {
      x = 14, y = "105", width = 5, height = "20",
      back = "QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3d787f, stop: .09 #054c54, stop: .16 #004147, stop: .23 #032e33, stop: .44 #00233a, stop:  .71 #1f004c, stop:  1 #57006d)",
      front = "QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc)",

    },
  }
  
  -- Bar styles
  local barStyles = {}
  for barName, barVars in pairs(barTable) do
    barStyles[barName] = {
      x = CentrePanelSize * barVars.x,
      y = barVars.y,
      width = CentrePanelSize * barVars.width,
      height = barVars.height,
      front = "background-color: "..barVars.front..";"..commonFrontStyle,
      back = "background-color: "..barVars.back..";"..commonBackStyle,
    }
  end
  
  -- Bar creation function
  function createBar(name, styles, parent)
    local bar = Geyser.Gauge:new({
      name=name,
      x=styles.x, y=styles.y,
      width=styles.width, height=styles.height,
    }, parent)
    
    bar.front:setStyleSheet(styles.front)
    bar.back:setStyleSheet(styles.back)
    return bar
  end
  
  MainHPBar = createBar("MainHPBar", barStyles["MainHPBar"], Bottom_container)
  MainMPBar = createBar("MainMPBar", barStyles["MainMPBar"], Bottom_container)
  MoveBar = createBar("MoveBar", barStyles["MoveBar"], Bottom_container)
  TNLBar = createBar("TNLBar", barStyles["TNLBar"], Bottom_container)
  MonitorBar = createBar("MonitorBar", barStyles["MonitorBar"], Bottom_container)
  EnemyBar = createBar("EnemyBar", barStyles["EnemyBar"], Bottom_container)
  WeightBar = createBar("WeightBar", barStyles["WeightBar"], Bottom_container)
  ItemsBar = createBar("ItemsBar", barStyles["ItemsBar"], Bottom_container)
  AlignmentBar = createBar("AlignmentBar", barStyles["AlignmentBar"], Bottom_container)

end

Layout.FirstLoad = Layout.FirstLoad or false
if GlobalVar.GUI and not Layout.FirstLoad then LoadLayout(); Layout.FirstLoad = true end

--registerAnonymousEventHandler("sysWindowResizeEvent", LoadLayout)</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Group Update</name>
					<packageName></packageName>
					<script>-------------------------------------------------
-- Group GUI Update Script   
-- Updates all the groupmate info in the group container
-------------------------------------------------

local SmallScreen = true

-- called on update to GMCP_Group()
function UpdateGroupGUI(GroupieTableIndex, Player)
  local player_name = Player.name
  local player_level = tonumber(string.sub(Player.level,1,3))
  local player_tier = (string.sub(Player.level,5))
  if StatTable.CharName == Player.name then
    player_name = "&lt;left&gt;&lt;span style='color: rgb(255,255,255)'&gt;" .. Player.name .. "&lt;/span&gt;"
    if Player.leader then player_name = "&lt;b&gt;" .. player_name .. "&lt;/b&gt;" end
  elseif Player.leader then
    player_name = "&lt;b&gt;&lt;left&gt;&lt;span style='color: rgb(255,0,0)'&gt;" .. Player.name .. "&lt;/span&gt;&lt;/b&gt;"
  
  end
  
  if AR.Status then
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(10,126,242)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name .. "&lt;/left&gt;")
  else
      GroupieTable[GroupieTableIndex].NameLabel:echo("&lt;left&gt;" .. (AR.RescueList[string.lower(Player.name)] and "&lt;b&gt;&lt;span style='color: rgb(125,125,125)'&gt;*&lt;/span&gt;&lt;/b&gt;" or "&lt;span style='color: rgb(0,0,0)'&gt;*&lt;/span&gt;") .. player_name  .. "&lt;/left&gt;")
  end
  
  GroupieTable[GroupieTableIndex].NameLabel:setClickCallback(function() send("r " .. Player.name) end)
--  GroupieTable[GroupieTableIndex].InfoLabel:echo("&lt;left&gt;" ..player_level .. ":".. Player.race .. "-" .. Player.class .. "&lt;/left&gt;")
  if player_tier == "Hero" and player_level &lt;= 101 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;red&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Hero" and player_level &gt;= 950 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;green&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Lord" and player_level &gt;= 999 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;red&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  elseif player_tier == "Lord" and player_level &lt; 999 then
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;purple&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  else
    GroupieTable[GroupieTableIndex].InfoLabel:cecho("&lt;center&gt;&lt;white&gt;" .. player_level .. "&lt;white&gt;:&lt;yellow&gt;" .. Player.race .. "&lt;white&gt;-&lt;yellow&gt;" .. Player.class .. "&lt;/center&gt;")
  end
  GroupieTable[GroupieTableIndex].InfoLabel:setClickCallback(function() OnMobDeathQueue("monitor " .. Player.name) end)

  RaceTNL = Player.race
    if RaceTNL ~= "Fdk" then
      MaxTnl = tnlByRace[RaceTNL]
    else
      if player_tier ~= "Hero" and player_tier ~= "Lord" and player_level &lt;= 25 then
        MaxTnl = 8333
      elseif player_tier ~= "Hero" and player_tier ~= "Lord" and player_level &lt;= 50 then
        MaxTnl = 6250
      elseif player_tier == "Hero" and player_level &lt;= 250 then
        MaxTnl = 5000
      elseif player_tier == "Hero" and player_level &lt;= 500 then
        MaxTnl = 4166
      elseif player_tier == "Hero" and player_level &lt;= 750 then
        MaxTnl = 3703
      elseif player_tier == "Hero" and player_level &lt;= 999 then
        MaxTnl = 3448
      elseif player_tier == "Lord" and player_level &lt;= 250 then
        MaxTnl = 3225
      elseif player_tier == "Lord" and player_level &lt;= 500 then
        MaxTnl = 3030
      elseif player_tier == "Lord" and player_level &gt; 500 then
        MaxTnl = 2857
      end
    end
 
  local PlayerMaxHP = tonumber(Player.maxhp)
  local PlayerHP = math.min(tonumber(Player.hp), PlayerMaxHP)
  local Playertnl = tonumber(Player.tnl)
  local MaxTNL = tonumber(MaxTnl)
  
  temptnlmax = MaxTNL
    if(tonumber(Player.tnl)&gt;tonumber(MaxTnl)) then
      temptnlmax = Player.tnl
    end
  

  GroupieTable[GroupieTableIndex].TNLBar:setValue(Playertnl, tonumber(temptnlmax),"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(250,250,250)'&gt;".. Player.tnl .. " TNL &lt;/center&gt;")
  --GroupieTable[GroupieTableIndex].TNLLabel:cecho("&lt;center&gt;&lt;white&gt;" .. Player.tnl .. "/" .. MaxTnl .. "&lt;/center&gt;")
  GroupieTable[GroupieTableIndex].HPBar:setValue(PlayerHP, PlayerMaxHP,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(250,250,250)'&gt;".. Player.hp .. "/" .. Player.maxhp .. (SmallScreen and "" or "/" .. PlayerMaxHP) .. "&lt;/center&gt;")
  local HPBar_HealSpell = StatTable.Level == 125 and "cast comfort " .. Player.name or "cast divinity ".. Player.name
  GroupieTable[GroupieTableIndex].HPMaskLabel:setClickCallback(function() send(HPBar_HealSpell) end)
  
  local PlayerMaxMana = tonumber(Player.maxmp)
  local PlayerMana = math.min(tonumber(Player.mp), PlayerMaxMana)    
      
  if(PlayerMaxMana == nil or PlayerMaxMana == 0) then
    GroupieTable[GroupieTableIndex].ManaBar:setValue(1,1,"&lt;center&gt;&lt;font-size ='5px'&gt;No MP&lt;/center&gt;")
  else
    GroupieTable[GroupieTableIndex].ManaBar:setValue(PlayerMana,PlayerMaxMana,"&lt;center&gt;&lt;font-size ='4px'&gt;&lt;span style='color: rgb(0,0,0)'&gt;".. Player.mp .. "/" .. Player.maxmp .. (SmallScreen and "" or "/" .. PlayerMaxMana) .. "&lt;/center&gt;")
  end

  if (Player.class == "Sor" or Player.class == "Mag" or Player.class == "Wzd" or Player.class == "Psi" or Player.class == "Mnd" or Player.class == "Stm") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #000099, stop: 0.1 #000099, stop: 0.49 #3399ff, stop: 0.5 #0000ff, stop: 1 #0033cc);]])
  elseif (Player.class == "Prs" or Player.class == "Cle" or Player.class == "Dru" or Player.class == "Pal" or Player.class == "Viz") then
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #ffff66, stop: 0.3 #ffff00, stop: 1 #ff9900);]])           
  else
      GroupieTable[GroupieTableIndex].ManaBar.front:setStyleSheet([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3399ff, stop: 0.1 #3399ff, stop: 0.49 #92c7fc, stop: 0.5 #178bff, stop: 1 #17aaff);]])
  end

local path = getMudletHomeDir() .. "/images"
if(Player.position == "STUN") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/stun.png")]]
elseif(Player.position == "Busy") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/busy.png")]]
elseif(Player.position == "Rest") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/resting.png")]]
elseif(Player.position == "Fight") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/fighting.png")]]
elseif(Player.position == "Stand") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/standing.png")]]
elseif(Player.position == "Sleep") then
  GroupieTable[GroupieTableIndex].PositionLabel:setStyleSheet[[border-image: url("C:/Users/ldavi/.config/mudlet/images/sleeping.png")]]
end

  GroupieTable[GroupieTableIndex]:show()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>tnlByRace</name>
					<packageName></packageName>
					<script>tnlByRace = {
  Cen = 2857,
  Dgn = 1111,
  Drc = 1515,
  Drw = 1176,
  Due = 1111,
  Dwf = 1111,
  Elf = 1250,
  Ent = 20000,
  Gar = 2857,
  Gia = 1428,
  Gno = 1111,
  Gob = 800,
  Har = 1515,
  Hel = 1052,
  Hlf = 1111,
  Hor = 1111,
  Hum = 1000,
  Kob = 666,
  Kzn = 1538,
  Liz = 1052,
  LsI = 5000,
  Mir = 2857,
  Ogr = 1333,
  Orc = 1176,
  Trg = 1052,
  Dem = 1515,
  Drg = 10000,
  Dsd = 1515,
  Fae = 3125,
  Gol = 2000,
  Grf = 4000,
  Gth = 1666,
  HiE = 2000,
  Hob = 1000,
  Ign = 2857,
  Min = 1428,
  Spr = 1052,
  Trl = 1333,
  Tua = 1538,
  MnI = 4000,
  DtI = 3333,
  WvI = 2857,
  VpI = 2857,
  Dri = 2857,
  PyI = 2500,
  LsE = 2500,
  PaE = 2040,
  FrG = 1428,
  FiG = 1428,
  ClG = 1428,
  StG = 1428,
  BkD = 10000,
  BuD = 10000,
  GrD = 10000,
  WhD = 10000,
  Ill = 3225,
}</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Additional Packages</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>AutoEnchant</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>AutoEnchant</name>
						<packageName></packageName>
						<script>
AutoEnchantTable = AutoEnchantTable or {}

-- Customizable Variables
AutoEnchantTable.BrillTarget = AutoEnchantTable.BrillTarget or 2

-- Global Variables for Enchanting Module
AutoEnchantTable.Status = AutoEnchantTable.Status or false
AutoEnchantTable.Item = AutoEnchantTable.Item or ""
AutoEnchantTable.ItemType = AutoEnchantTable.ItemType or ""
AutoEnchantTable.ID = AutoEnchantTable.ID or 0
AutoEnchantTable.Container = AutoEnchantTable.Container or "icesphere"
AutoEnchantTable.Brills = AutoEnchantTable.Brills or 0
AutoEnchantTable.debug = AutoEnchantTable.debug or true
AutoEnchantTable.BaseLevel = 125 --51 for hero, 125 for lord


-- For DB
AutoEnchantTable.ItemName = AutoEnchantTable.ItemName or ""
AutoEnchantTable.ItemIDType = AutoEnchantTable.ItemType or ""
AutoEnchantTable.ItemFlags = AutoEnchantTable.ItemFlags or ""
AutoEnchantTable.ItemBaseLevel = AutoEnchantTable.ItemBaseLevel or 0
AutoEnchantTable.ItemLevel = AutoEnchantTable.ItemLevel or 0
AutoEnchantTable.ItemMinDmg = AutoEnchantTable.ItemMinDmg or 0
AutoEnchantTable.ItemMaxDmg = AutoEnchantTable.ItemMaxDmg or 0
AutoEnchantTable.ItemAC = AutoEnchantTable.ItemAC or 0
AutoEnchantTable.Day = AutoEnchantTable.Day or ""
AutoEnchantTable.Month = AutoEnchantTable.Month or ""
AutoEnchantTable.Tingle = AutoEnchantTable.Tingle or 0
AutoEnchantTable.Artificer = AutoEnchantTable.Artificer or 0

-- Unused atm
AutoEnchantTable.ItemBrills = AutoEnchantTable.ItemBrills or 0




function AutoEnchantInit(item, type)
  AutoEnchantTable.Status = true
  AutoEnchantTable.Item = item
  AutoEnchantTable.ItemType = type

  AutoEnchantReset()
end

function AutoEnchantReset()
  AutoEnchantTable.ID = 0
  AutoEnchantTable.ItemName = ""
  AutoEnchantTable.ItemIDType = ""
  AutoEnchantTable.ItemFlags = ""
  AutoEnchantTable.ItemBaseLevel = 0
  AutoEnchantTable.ItemLevel = 0
  AutoEnchantTable.ItemMinDmg = 0
  AutoEnchantTable.ItemMaxDmg = 0
  AutoEnchantTable.ItemAC = 0
  AutoEnchantTable.Day = ""
  AutoEnchantTable.Month = ""
  AutoEnchantTable.Tingle = 0
  AutoEnchantTable.Artificer = 0
  AutoEnchantTable.Brills = 0
    
  AutoEnchantTry()
end

function AutoEnchantTry()
  local AutoEnchantWeaponMaxLevel = 4
  local AutoEnchantArmorMaxLevel = 2

  if (AutoEnchantTable.ID == 0) then
    send("look " .. AutoEnchantTable.Item)
    send("time")
    send("slearn enchant " .. AutoEnchantTable.ItemType)
    send("affects")
    send("cast identify " .. AutoEnchantTable.Item)
    -- AutoEnchantTable.ID = 1 --moved to trigger
  else
    if ((AutoEnchantTable.ItemType == "bow" or AutoEnchantTable.ItemType == "weapon") and AutoEnchantTable.ItemLevel &gt; (AutoEnchantTable.BaseLevel + AutoEnchantWeaponMaxLevel)) then
      AutoEnchantPrint(AutoEnchantTable.ItemType .. " is level " .. AutoEnchantTable.ItemLevel .. ", putting in bag")
      send("put " .. AutoEnchantTable.Item .. " " .. AutoEnchantTable.Container)
      AutoEnchantReset()
    elseif (AutoEnchantTable.ItemType == "armor" and AutoEnchantTable.ItemLevel &gt; (AutoEnchantTable.BaseLevel + AutoEnchantArmorMaxLevel)) then
      send("put " .. AutoEnchantTable.Item .. " " .. AutoEnchantTable.Container)
      AutoEnchantReset()
    else
      send("cast 'enchant " .. AutoEnchantTable.ItemType .. "' " .. AutoEnchantTable.Item)
    end
      
  end

end


function AutoEnchantBrill()
  AutoEnchantTable.Brills = AutoEnchantTable.Brills + 1
  print("")
  print("AutoEnchantTable.Brills " .. AutoEnchantTable.Brills .. " &gt;= " .. AutoEnchantTable.BrillTarget .. " AutoEnchantTable.BrillTarget")
  if (AutoEnchantTable.Brills &gt;= AutoEnchantTable.BrillTarget) then
    -- todo: make a better solution
    AutoEnchantPrint("Success! Moving to bag")
    send("put " .. AutoEnchantTable.Item .. " " .. AutoEnchantTable.Container)
    AutoEnchantReset()
  else
   AutoEnchantTry()
  end
end

function AutoEnchantAddLevel()
  local WeaponMaxLevel = 4 -- should usually be 4 but switch to 2 when autoweapon being used on special armor (eg gith hands)
  local ArmorMaxLevel = 2

  AutoEnchantTable.ItemLevel = AutoEnchantTable.ItemLevel + 1
  
  if ((AutoEnchantTable.ItemType == "bow" or AutoEnchantTable.ItemType == "weapon") and AutoEnchantTable.ItemLevel &gt; (AutoEnchantTable.BaseLevel + WeaponMaxLevel)) then
      printGameMessage("AutoEnchant", "Max Level, moving to bag")
      send("put " .. AutoEnchantTable.Item .. " " .. AutoEnchantTable.Container)
      AutoEnchantReset()
      return false
  elseif (AutoEnchantTable.ItemType == "armor" and AutoEnchantTable.ItemLevel &gt; (AutoEnchantTable.BaseLevel + ArmorMaxLevel)) then
      printGameMessage("AutoEnchant", "Max Level, moving to bag")
      send("put " .. AutoEnchantTable.Item .. " " .. AutoEnchantTable.Container)
      AutoEnchantReset()
      return false
  else
    return true
  end
end

function AutoEnchantDebug(debug_message)
 if (AutoEnchantTable.debug) then
    print("")
    print(debug_message)
 end
end

function AutoEnchantPrint(print_message)
  if GlobalVar.GUI then
    printGameMessage("AutoEnchant", print_message)
  else
    print(print_message)
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>AutoEnchantDB</name>
						<packageName></packageName>
						<script>local AutoEnchantDB = db:create("AutoEnchant Database",
  {
    Enchants = {
              EnchantTime = db:Timestamp("CURRENT_TIMESTAMP"),
              CharName = "",
              CharRace = "",
              CharClass = "",
              CharLevel = 0,
              CharSubLevel = 0,
              CharStr = "",
              CharInt = "",
              CharWis = "",
              CharDex = "",
              CharCon = "",
              CharWorship = "",
              Day = "",
              Month = "",
              Tingle = 0,
              Artificer = 0,
              EnchantItem = "",
              EnchantItemType = "",
              EnchantItemFlags = "",
              EnchantItemBaseLevel = 0,
              EnchantItemLevel = 0,
              EnchantItemMinDmg = 0,
              EnchantItemMaxDmg = 0,
              EnchantItemAC = 0,
              EnchantOutcome = ""
     
              }
  })
  
function AutoEnchantDBAdd(outcome)

  db:add(AutoEnchantDB.Enchants, {
    CharName = gmcp.Char.Status.character_name,
    CharRace = gmcp.Char.Status.race,
    CharClass = gmcp.Char.Status.class,
    CharLevel = tonumber(gmcp.Char.Status.level),
    CharSubLevel = tonumber(gmcp.Char.Status.sublevel),
    CharStr = tonumber(gmcp.Char.Status.str),
    CharInt = tonumber(gmcp.Char.Status.int),
    CharWis = tonumber(gmcp.Char.Status.wis),
    CharDex = tonumber(gmcp.Char.Status.dex),
    CharCon = tonumber(gmcp.Char.Status.con),
    CharWorship = AltList.Chars[StatTable.CharName].Worship or "",
    Day = AutoEnchantTable.Day,
    Month = AutoEnchantTable.Month,
    Tingle = AutoEnchantTable.Tingle,
    Artificer = AutoEnchantTable.Artificer,
    EnchantItem = AutoEnchantTable.ItemName,
    EnchantItemType = AutoEnchantTable.ItemIDType,
    EnchantItemFlags = AutoEnchantTable.ItemFlags,
    EnchantItemBaseLevel = AutoEnchantTable.ItemBaseLevel,
    EnchantItemLevel = AutoEnchantTable.ItemLevel,
    EnchantItemMinDmg = AutoEnchantTable.ItemMinDmg,
    EnchantItemMaxDmg = AutoEnchantTable.ItemMaxDmg,
    EnchantItemAC = AutoEnchantTable.ItemAC;
    EnchantOutcome = outcome,
    })
  
end

function AutoEnchantDBQuery()
  temp = db:fetch(AutoEnchantDB.Enchants)
  for k,v in pairs(temp) do
    display(v)
    break
    --print(temp[k].EnchantOutcome)
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>AutoCast Scripts</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>AutoCast</name>
						<packageName></packageName>
						<script>function AutoCastON()
  GlobalVar.AutoCast = true
  AutoCastStatus()
  AutoCastSetGUI()
end

function AutoCastOFF()
  GlobalVar.AutoCast = false
  AutoCastStatus()
  AutoCastSetGUI()
end

function AutoCastSetSpell(spell)
  GlobalVar.AutoCaster = spell
  AutoCastStatus()
  AutoCastSetGUI()
end

function AutoCastStatus()
  --traceback()
  echo("\n")

  printMessage("AutoCast", "Currently " .. (GlobalVar.AutoCast and "&lt;green&gt;ON" or "&lt;red&gt;OFF"))
  if GlobalVar.AutoCaster and GlobalVar.AutoCaster ~= "" then printMessage("AutoCast", "Spell set to &lt;yellow&gt;" .. GlobalVar.AutoCaster) end
  printMessage("AutoCast", "Surge level set to " .. (GlobalVar.SurgeLevel == 1 and "&lt;red&gt;OFF" or "&lt;yellow&gt;" .. GlobalVar.SurgeLevel))
end



</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>AutoCastSpellSwap</name>
						<packageName></packageName>
						<script>GlobalVar = GlobalVar or {}
GlobalVar.MobCount = GlobalVar.MobCount or 0

local DoNotArea_RoomList = {
  "Spire of Knowledge", 
  "Another room name", 
  "Yet another room name",
  "Ponderous Flowers",
  "A menagerie",
  "A tiny cell",
}

local DoNotArea_MobList = {
  "A long, dark figure cracks his knuckles.", -- Bailey
  "A disinterested halfling glares at you.", -- Rickitt
  "An elven woman is here, in plain clothes.", --Mayraema
  "A naiad is here, staring fearfully at you." -- Kiahla
}

local AutoCastOnMobDeathEventHandler = AutoCastOnMobDeathEventHandler or nil

-- Called the first time a Wizard/Mage receives a gmcp.Room.Players update
function AutoCastInit()
  if AutoCastOnMobDeathEventHandler then
    killAnonymousEventHandler(AutoCastOnMobDeathEventHandler)
  end
  AutoCastOnMobDeathEventHandler = registerAnonymousEventHandler("OnMobDeath","AutoCastOnMobDeath",false)
end

-- Called on Reconnect
function AutoCastCleanUp()
  if AutoCastOnMobDeathEventHandler then
    killAnonymousEventHandler(AutoCastOnMobDeathEventHandler)
    AutoCastOnMobDeathEventHandler = nil
  end
end

-- AutoCastSpellSwap()
-- Called whenever gmcp.Room.Players is updated (eg, on look, on move to new room)
function AutoCastSpellSwap()
  if (StatTable.Class ~= "Wizard" and StatTable.Class ~= "Mage" and StatTable.Level ~= 250) then 
    return 
  end
  
  if StatTable.Level &lt; 125 then
    if not (gmcp.Room.Info.zone == "{*HERO*} Ctibor  Sem Vida" or gmcp.Room.Info.zone == "{*HERO*} Ibn     Aculeata Jatha-La") or StatTable.SubLevel &lt; 101 then
      return
    end
  end
  
  if not AutoCastOnMobDeathEventHandler then AutoCastInit() end
  
  local Players = gmcp.Room.Players
  local MobCount = 0

  -- Sort all Players into enemies and friendlies
  for PlayerName,_ in pairs(Players) do
    -- Mobs have numbered "names" vs PCs who have real names, can eliminate PCs by removing non-numbered names
    if tonumber(Players[PlayerName].name) then
      MobCount = MobCount + 1
    end
  end
  
  GlobalVar.MobCount = MobCount
  UpdateAutoCastSpell()
end

-- The function called to swap spells
function UpdateAutoCastSpell()

  -- Wizard's with ether crash exhausted can't AoE, set to single target
  if StatTable.Class == "Wizard" and StatTable.EtherCrash and StatTable.EtherCrash == 2 then
    if GlobalVar.AutoCaster == GlobalVar.AutoCasterAOE then
      AutoCastSetSpell(GlobalVar.AutoCasterSingle)
    end
    return
  end

  -- First check if we are in a room that we do not AOE in. If we are, swap to single target spell.
  for _, DoNotArea_RoomName in ipairs(DoNotArea_RoomList) do
    if gmcp.Room.Info.name == DoNotArea_RoomName then
      if GlobalVar.AutoCaster == GlobalVar.AutoCasterAOE then
        AutoCastSetSpell(GlobalVar.AutoCasterSingle)
      end
      return
    end
  end
  
  -- Second check if there are any mobs that we do not AOE. If so, swap to single target
  for _,mob in pairs(gmcp.Room.Players) do
    if(tonumber(mob.name) ~= nil and ArrayHasSubstring(DoNotArea_MobList, mob.fullname)) then
        AutoCastSetSpell(GlobalVar.AutoCasterSingle)
      return
    end
  end
  
  -- Check if the MobCount is 3 or more. If so, AOE
  if GlobalVar.MobCount &gt;= 3 then   
    AutoCastSetSpell(GlobalVar.AutoCasterAOE)
  else
   if GlobalVar.AutoCaster == GlobalVar.AutoCasterAOE and GlobalVar.MobCount &gt; 0 then
      AutoCastSetSpell(GlobalVar.AutoCasterSingle)
    end
  end
  
end

-- Called whenever a mob is killed
function AutoCastOnMobDeath()
  if (GlobalVar.AutoCaster == GlobalVar.AutoCasterAOE and (StatTable.Class == "Mage" or StatTable.Class == "Wizard" or StatTable.Level == 250)) then
    GlobalVar.MobCount = GlobalVar.MobCount - 1
    UpdateAutoCastSpell()
  end
end

</script>
						<eventHandlerList>
							<string>gmcp.Room.Players</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Wizard Sig Spell Script</name>
						<packageName></packageName>
						<script>-- Example of insigs
--    Signature Spell
--     Signature spell target: area. Damage type: cold.
--    Signature Spell
--     Signature spell target: single. Damage type: arcane.

function LookUpSignatureSpell()
  if not StatTable.CharName or StatTable.Class ~= "Wizard" or StatTable.Level &lt; 125 or StatTable.SubLevel &lt; 300 then return nil end
  
  for k,v in ipairs(AltList.Chars[StatTable.CharName].Insigs) do
    if v == "Signature Spell" then
      local target, damageType = AltList.Chars[StatTable.CharName].Insigs[k+1]:match("Signature spell target: (%a+). Damage type: (%a+).")
      return target, damageType
    end
  end

  send("insig", false)
  return nil
end

function WizardSigSpellInit()
  local target, damageType = LookUpSignatureSpell()
  
  if not target then return; end
  
  if target == "single" then
    GlobalVar.AutoCasterSingle = "signature spell"
    AutoCastSetSpell(GlobalVar.AutoCasterSingle)
  elseif target == "area" then
    GlobalVar.AutoCasterAOE = "signature spell"
  end
end



safeEventHandler("WizardSigSpellInit", "CustomProfileInit", "WizardSigSpellInit", false)


-- misc wizard (wzd) notes

-- ether link down
-- You no are no longer linked to others through the Ether.
-- ether warp down
-- You no longer warp the Ether around you.</script>
						<eventHandlerList />
					</Script>
					<Script isActive="no" isFolder="no">
						<name>Immo Script</name>
						<packageName></packageName>
						<script>function ImmoMob(mobname)
  if not StatTable.Immolation then
    TryCast("cast immolation " .. mobname, 5)
  elseif not StatTable.AstralPrison then
    TryCast("cast 'astral prison' " .. mobname, 5)
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Battle Script</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Battle.Init</name>
						<packageName></packageName>
						<script>Battle = Battle or {}
Battle.Combat = Battle.Combat or false
--Battle.Queue = Battle.Queue or {}
Battle.NextAction = Battle.NextAction or nil
Battle.NextActionTime = Battle.NextActionTime or 0
Battle.NextActionWait = Battle.NextActionWait or nil
Battle.NextActionTimerID = Battle.NextActionTimerID or nil

Battle.Recent = Battle.Recent or false

Battle.Stomper = Battle.Stomper or false

Battle.OnCombatEventHandler = Battle.OnCombatEventHandler or nil
Battle.EndCombatEventHandler = Battle.EndCombatEventHandler or nil
Battle.ActEventHandler = Battle.ActEventHandler or nil

local ACT_WAIT_TIME_SECONDS = 0.5 -- constant, amount of time to wait before calling another loop of Battle.Act

-- Adds compatability for people not running the inventory package
function Battle.GetSpellLagMod()
  if type(_G["GetSpellLagMod"]) == "function" then return GetSpellLagMod() else return 1 end
end

function Battle.GetSpellCostMod(spell_type)
  if type(_G["GetSpellCostMod"]) == "function" then return GetSpellCostMod(spell_type) else return 1 end
end

function Battle.GetSkillLagMod()
  if type(_G["GetSkillLagMod"]) == "function" then return GetSkillLagMod() else return 1 end
end

-- Note would cause a bug if Battle.NextAct was called while Battle.NextAction was already set, could build a queue system
-- Should be fixed with the 'if Battle.NextAction' condition below, not an optimal solution though as doesn't consider lag
function Battle.NextAct(NextAction, NextActionTime)
  if not NextAction or not NextActionTime then
    printMessage("Battle.NextAct() error", "need to supply two arguments to function")
    return false
  end
  
  -- If we are not in combat, send the command now
  if not Battle.Combat then 
    send(NextAction)
    return true
  end
  
  -- There was already a Battle.NextAction queued up. Send it out now so that we don't lose it.
  if Battle.NextAction then
    TryAction(Battle.NextAction, NextActionTime)
  end
  
  -- This is reached when we are in combat
  -- Set up Battle.NextAction so that its called by Battle.Act on its next loop

  Battle.NextAction = NextAction
  Battle.NextActionTime = NextActionTime
  return true
end

-- Main loop, called repeatedly during combat
function Battle.Act() 
  --printMessage("Battle.Act()","called")
  
  -- If we're not in combat, end the loop
  if not Battle.Combat then return end
  
  -- If we are in more than 1 second of lag, likely an external event. Wait for lag to be over before trying Battle.Act()
  local lag = tonumber(gmcp.Char.Vitals.lag)
  --local lag = 0 -- server prompt bug
  if lag &gt; 1 then
    --printMessage("Battle.Act()", "In lag, waiting " .. lag .. " seconds before calling again")
    --Battle.NextActionTimerID = tempTimer(lag, function() Battle.Act() end)
    Battle.NextActionTimerID = tempTimer(0.1, function() Battle.Act() end)
    return
  end
  
  -- If we do not have a NextAction set then check if we have AutoCast / AutoHeal / AutoSkill
  if not (Battle.NextAction or Battle.NextActionTime) then
    if GlobalVar.AutoCast and GlobalVar.AutoCaster ~= "" then
       Battle.NextAction, Battle.NextActionTime = Battle.AutoCast()
    elseif GlobalVar.AutoHeal then
       Battle.NextAction, Battle.NextActionTime = Battle.AutoHeal()
    elseif GlobalVar.AutoSkill and GlobalVar.SkillStyle ~= "" then
       Battle.NextAction, Battle.NextActionTime = Battle.AutoSkill()
    end
  end
         
  -- if Battle.NextAction exists and we're in combat, send action and call Battle.Act again once out of lag
  if Battle.NextAction and Battle.NextActionTime and Battle.Combat then
    send(Battle.NextAction)
    Battle.NextActionTimerID = tempTimer(Battle.NextActionTime, function() Battle.Act() end)
    
  -- If Battle.NextAction doesn't exist but NextActionTime does, then just call Battle.Act in NextActionTime
  elseif Battle.NextAction == nil and Battle.NextActionTime and Battle.Combat then
    Battle.NextActionTimerID = tempTimer(Battle.NextActionTime, function() Battle.Act() end)
  
  -- Neither Action nor Time exists, call again in ACT_WAIT_TIME_SECONDS seconds until combat is over
  elseif Battle.Combat then
    Battle.NextActionTimerID = tempTimer(ACT_WAIT_TIME_SECONDS, function() Battle.Act() end)
  end
  
  Battle.NextAction = nil
  Battle.NextActionTime = nil
end

function Battle.KillAct()
  if (Battle.NextActionTimerID) then killTimer(Battle.NextActionTimerID); Battle.NextActionTimerID = nil end
  if Battle.NextAction then send(Battle.NextAction) end
  
  Battle.NextAction = nil
  Battle.NextActionTime = nil

end


function Battle.OnCombat()
  --pdebug("Called Battle.OnCombat()")
  if Battle.Combat then return end
  Battle.Combat = true
  Battle.Recent = true
  GameLoop()
  
  if StatTable.Class == "Stormlord" and StatTable.Level == 125 then Battle.StormlordCombat() end
  
  
  local current_lag = tonumber(gmcp.Char.Vitals.lag)
  if (current_lag &gt; 0) then
    Battle.NextActionTimerID = tempTimer(current_lag, function() Battle.Act() end)
  else
    Battle.Act()
  end
  
  TryLook()
  
end

function Battle.EndCombat()
  --pdebug("Called Battle.EndCombat()")
  Battle.Combat = false
  safeTempTimer("Battle.Recent.EndofCombat", 30, function() Battle.Recent = false; end)
  safeEventHandler("Battle.Recent.SetFalseOnMyDeath", "OnMyDeath", function() Battle.Recent = false; end, false)
  safeEventHandler("Battle.Recent.SetFalseOnPlane", "OnPlane", function() Battle.Recent = false; end, false)
  Battle.KillAct()
end

function Battle.KillEventHandlers()
  if Battle.OnCombatEventHandler then killAnonymousEventHandler(Battle.OnCombatEventHandler) end
  if Battle.OnCombatEventHandler then killAnonymousEventHandler(Battle.OnCombatEventHandler) end
  if Battle.OnCombatEventHandler then killAnonymousEventHandler(Battle.OnCombatEventHandler) end
end

function Battle.AutoCast()
  local autocast_minmana = 0
  local autocast_stopsurge = 3500
  local autocast_spell = GlobalVar.AutoCaster
  local nextaction = ""
  local surge_level = GlobalVar.SurgeLevel or 1
  local spelllag = (5 * Battle.GetSpellLagMod()) -- assumes in class, ie 5 second, casting
  
  if GlobalVar.AutoCaster == "acid rain" or GlobalVar.AutoCaster == "meteor swarm" or GlobalVar.AutoCaster == "banshee wail" or GlobalVar.AutoCaster == "storm of vengeance" then
    spelllag = (6 * Battle.GetSpellLagMod())  
  end
  
  -- If Quicken on, reduce spelllag
  -- Note: inexact science, still working to figure out how much quicken affects spell casting speed
  -- At Quicken 9, Fdk Psi Shz has 2 lag, normally should be 4 seconds (5 seconds * 20% shz reduction)
  -- Assuming Quicken 9 cuts spell time in half, then using pro-rated scale for remainder
  if GlobalVar.QuickenStatus then spelllag = spelllag * (1 - (StatTable.Quicken / 18)) end
  
  if (StatTable.Level == 125) then
    autocast_minmana = 500
    if (StatTable.Class == "Mage" or StatTable.Class == "Stormlord") then
      autocast_stopsurge = (9000 * Battle.GetSpellCostMod("arcane")) or 7000
    elseif (StatTable.Class == "Wizard") then
      autocast_stopsurge = (10000 * Battle.GetSpellCostMod("arcane")) or 8000
    elseif (StatTable.Class == "Sorcerer") then
      autocast_stopsurge = (10000 * Battle.GetSpellCostMod("arcane")) or 8000
    elseif IsClass({"Mindbender", "Psionicist"}) then
      autocast_stopsurge = (9000 * Battle.GetSpellCostMod("psionic")) or 7000
    end
  elseif (StatTable.Level == 51) then
    autocast_minmana = 100
  elseif (StatTable.Level &lt; 51) then
    autocast_minmana = 50
  end
  
  -- Psi stomp protector
  if StatTable.Class == "Psionicist" then
    if not StatTable.KineticChain and Battle.Stomper then
      if StatTable.Level == 51 and StatTable.SubLevel &gt;= 101 then
        return "cast rupture", spelllag
      elseif StatTable.Level == 125 then
        return "cast mindwipe", spelllag
      end
    end  
  end
  
  if tonumber(gmcp.Char.Status.mana) &gt; autocast_minmana then
    -- Surge if above autocast_stopsurge mana
    if (tonumber(gmcp.Char.Status.mana) &gt;= autocast_stopsurge and surge_level &gt; 1) then
    
      -- up the surge level when EtherLink / EtherCrash up    
      if StatTable.Class == "Wizard" and (StatTable.EtherLink or StatTable.EtherCrash == 1) and GlobalVar.AutoCaster == GlobalVar.AutoCasterAOE then
        if StatTable.EtherCrash == 1 then 
          surge_level = 5
          AutoCastSetSpell(GlobalVar.AutoCasterSingle)
        end
      end        
      

      -- Add a surge level if current mana exceeds 4x the stop surge mana (eg 8000 mana * 4 = 32000 mana)
      if surge_level == 2 and tonumber(gmcp.Char.Status.mana) &gt; (autocast_stopsurge * 4) then
        surge_level = surge_level + 1
      end
      
      nextaction = "surge " .. surge_level .. getCommandSeparator() .. "cast '" .. autocast_spell .. "'" .. getCommandSeparator() .. "surge off"
      
    else
      nextaction = "cast '" .. autocast_spell .. "'"
    end 
    return nextaction, spelllag
  else
    return nil, ACT_WAIT_TIME_SECONDS
  end
end

function Battle.AutoHeal()
  local shadowed = (gmcp.Room.Info.zone == "{ LORD } Ctibor  Netherworld" and true or false)

  --pdebug("Called Battle.AutoHeal()")
  local spelllag = (5 * Battle.GetSpellLagMod()) -- assumes in class, ie 5 second lag (div and comf are always in class)
  
  -- Could make these variable settings in the future
  local MonitorHPPct = (StatTable.Level == 125) and 0.875 or 0.725 -- at what % (expressed in decimal) should we auto heal at
  MonitorHPPct = math.floor((MonitorHPPct + (math.random() * 0.05)) * 1000 + 0.5) / 1000 -- adds a random number between 0 and 5% so that when multiple people use the package, they don't all start healing at the exact same amonut
  
  local MinManaPct = (StatTable.Level == 125) and 0.1 or 0.25 -- at what mana level should we stop auto healing at
  local MinMana = (MinManaPct * StatTable.max_mana) or 0
  -- At Lord, save enough mana for create shrine + planeshift
  local MinMana = (StatTable.Level == 125) and (2500 * Battle.GetSpellCostMod("divine") + 500 * Battle.GetSpellCostMod("arcane")) or 300
  
  --lua print(((2500 * GetSpellCostModRacial(StatTable.Race, "divine") + 500 * GetSpellCostModRacial(StatTable.Race, "arcane"))))
  
  
  local HealTarget = GlobalVar.AutoHealTarget
  local PreachAtHero = true
  
  -- If we're a Priest, check to see if we should be preaching
  if StatTable.Class == "Priest" and StatTable.current_mana &gt; MinMana then
    if (StatTable.Level == 125 and not shadowed) and StatTable.InjuredCount &gt; 2  then
      if StatTable.CriticalInjured &gt; 2 then
        return "augment 2" .. getCommandSeparator() .. "preach comfort" .. getCommandSeparator() .. "augment off", spelllag
      else
        return "preach comfort", 7 * Battle.GetSpellLagMod()
      end
    elseif (StatTable.Level == 51 or shadowed) and PreachAtHero and StatTable.CriticalInjured &gt; 2 then
      return "preach divinity", 7 * Battle.GetSpellLagMod()
    end
  end
  
  -- Auto Heal Lowest HP % - set our heal target to the lowest HP groupie if lowest hp % mode activated
  if GlobalVar.AutoHealLowest and GlobalVar.VizMonitor ~= "" then 
    HealTarget = GlobalVar.VizMonitor -- GlobalVizMonitor holds the name of the lowest hp groupmate (excluding us!), check below to see if our hp is lower
    if (StatTable.current_health / StatTable.max_health) &lt; (GlobalVar.GroupMates[HealTarget].hp / GlobalVar.GroupMates[HealTarget].maxhp) then HealTarget = StatTable.CharName
    elseif (StatTable.current_health / StatTable.max_health) &lt; 0.1 then HealTarget = StatTable.CharName end   
  end
  
  -- If heal target doesn't exist or isn't a group mate, return
  if not HealTarget or not GlobalVar.GroupMates[HealTarget] or not GlobalVar.GroupMates[HealTarget].hp or not GlobalVar.GroupMates[HealTarget].maxhp then
    return nil, ACT_WAIT_TIME_SECONDS
  end
  
  if GlobalVar.AutoHealExclusionList[HealTarget] then return nil, ACT_WAIT_TIME_SECONDS end
  
  local HealTargetHPPct = GlobalVar.GroupMates[HealTarget].hp / GlobalVar.GroupMates[HealTarget].maxhp

  if HealTargetHPPct &lt; MonitorHPPct and StatTable.current_mana &gt; MinMana then
    if StatTable.Level == 125 and not shadowed then
      if HealTargetHPPct &lt; (MonitorHPPct * 0.5) and StatTable.current_mana &gt; (MinMana * 2) then
        return "augment 3" .. getCommandSeparator() .. "cast comfort " .. HealTarget .. getCommandSeparator() .. "augment off", spelllag
      elseif HealTargetHPPct &lt; (MonitorHPPct * 0.75) and StatTable.current_mana &gt; (MinMana * 2) then
        return "augment 2" .. getCommandSeparator() .. "cast comfort " .. HealTarget .. getCommandSeparator() .. "augment off", spelllag
      else
        return "cast comfort " .. HealTarget, spelllag
      end
    elseif StatTable.Level == 51 or shadowed then
      return "cast divinity " .. HealTarget, spelllag
    else
      return "cast 'cure light' " .. HealTarget, spelllag
    end
  end
  
  if StatTable.current_mana &lt; MinMana then
    TryFunction("LowManaHealBeepMsg", printGameMessage, {"Alert!", "Low mana, not autohealing", "red", "white"}, 300)
    TryFunction("LowManaHealBeep", QuickBeep, nil, 300)
  end
    
  return nil, ACT_WAIT_TIME_SECONDS
end

function Battle.AutoSkill()
  local nextaction = ""
  local skilllag = (5 * Battle.GetSkillLagMod()) -- assumes in class, ie 5 second, casting- TODO: adjust base time, i.e. 5, for class/skill
  
  nextaction = GlobalVar.SkillStyle

  return nextaction, skilllag
end

Battle.DoAfterCombatTable = Battle.DoAfterCombatTable or {}

function Battle.DoAfterCombat(action, retryCount)
  retryCount = retryCount or 0  
  
  if retryCount == 0 then 
    if Battle.DoAfterCombatTable[action] then return end
    Battle.DoAfterCombatTable[action] = true 
  end
  
  if Battle.Combat or StatTable.Position == "Sleep" or StatTable.Position == "Rest" then
    OnMobDeathQueue(action)
    safeEventHandler("BattleDoAfterCombatQueueID", "OnMobDeath", function() Battle.DoAfterCombatTable[action] = nil end, true)
    return
  end

  local lag = tonumber(gmcp.Char.Vitals.lag)
  if lag &gt; 0 then
    if retryCount &lt; 5 then -- Limit retries to 5 times
      tempTimer(lag, function() Battle.DoAfterCombat(action, retryCount + 1) end)
    else
      printGameMessage("Battle", "Unable to perform action after combat: " .. action)
      Battle.DoAfterCombatTable[action] = nil
    end
    return
  end

  send(action)
  Battle.DoAfterCombatTable[action] = nil
end

function Battle.StormlordCombat()
    
  local Players = gmcp.Room.Players
  local MobCount = 0

  -- Sort all Players into enemies and friendlies
  for PlayerName,_ in pairs(Players) do
    -- Mobs have numbered "names" vs PCs who have real names, can eliminate PCs by removing non-numbered names
    if tonumber(Players[PlayerName].name) then
      MobCount = MobCount + 1
    end
  end
  
  if MobCount &gt; 2 then
    if StatTable.Blizzard then return end
    send("cast blizzard")
  else
    send("cast thunderhead")
  end
end



Battle.KillEventHandlers()
Battle.OnCombatEventHandler = registerAnonymousEventHandler("OnCombat", "Battle.OnCombat", false)
Battle.EndCombatEventHandler = registerAnonymousEventHandler("EndCombat", "Battle.EndCombat", false)
--Battle.ActEventHandler = registerAnonymousEventHandler("ActCombat", "Battle.Act", false)


-- bug found:
-- was trying to aug 2 comf a group mate in a big gear room
-- 3 mobs died in quick sucession,
-- aug 2; cast comf fired off 3 times in a row (once after each death)

--augment 2;cast comfort Jampton;augment off

--Donquixote utters the words, 'brimstone'.
--Donquixote's brimstone strikes Kinetisch with terminal brutality!
--Kinetisch is DEAD!!

--Alwyn utters the words, 'meteor swarm'.
--A torrent of meteors streams from Alwyn's hands at his foes!
--Alwyn's Meteor Swarm strikes Leger with terminal brutality!
--augment 2;cast comfort Jampton;augment off
--Leger is DEAD!!

--Alwyn's Meteor Swarm strikes Leger with &gt;***ERADICATING***&lt; brutality!
--augment 2;cast comfort Jampton;augment off
--Leger is DEAD!!

--Pohi's air Banshee Wail strikes Leger with *ERADICATING* force!
--augment 2;cast comfort Jampton;augment off</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Battle.Spec</name>
						<packageName></packageName>
						<script>Battle = Battle or {}

-- Called by Battle.OnLook when a known spec is called
function Battle.Spec(spec)
  assert(spec,"Battle.Spec() error: spec not provided")
  Battle.Stomper = false
  
  if spec == "spec_breath_fire" then
    if StatTable.Race == "Ignatur" then
      if not StatTable.RacialInnervate and not StatTable.RacialInnervateFatigue then
        TryAction("racial innervate", 30)
      end
    end
  elseif spec == "spec_breath_lightning" then
    if StatTable.Race == "Golem" then
      if not StatTable.RacialGalvanize and not StatTable.RacialGalvanizeFatigue then
        TryAction("racial galvanize", 30)
      end
    end
    
  elseif spec == "spec_stomp_em" then
    if Grouped() and not GlobalVar.Silent then TryAction("emote warns the party about |BR|STOMPERS|N| in the room!", 30) end
    if StatTable.Class == "Psionicist" then
      Battle.Stomper = true
    end    
  end -- end spec ifs
end


-- Interesting Specs
-- spec_stomp_em (stomper)
-- spec_breath_fire (ign proc)
-- spec_breath_gas (wind aoe from gale boss in arcanists)
-- spec_breath_frost - arcanists ice boss
-- spec_breath_lightning
-- spec_cast_stormlord (shatterspell the mob)
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Battle.OnLook</name>
						<packageName></packageName>
						<script>Battle = Battle or {}
Battle.GroupiesUnderAttack = Battle.GroupiesUnderAttack or {}
Battle.EnemiesAttacking = Battle.EnemiesAttacking or {}
Battle.EnemiesChakra = Battle.EnemiesChakra or {}
Battle.MobCount = Battle.MobCount or 0

function Battle.OnLook()
  local Players = gmcp.Room.Players
  local mobcount = 0
  
  Battle.GroupiesUnderAttack = {}
  Battle.EnemiesAttacking = {}
  Battle.EnemiesChakra = {}
  
  -- Sort all Players into Battle.EnemiesAttacking and Battle.GroupiesUnderAttack
  for k,v in pairs(Players) do
  
    -- Mobs have numbered "names" vs PCs who have real names, can eliminate PCs by removing non-numbered names
    if (tonumber(Players[k].name) ~= nil) then 
        local i, j = 0, 0
        s = Players[k].fullname
        
        if (Players[k].spec ~= "unknown spec") then Battle.Spec(Players[k].spec) end
        

        -- Strip brackets, first for single words, second for double words (eg White Aura), likely a better way to do this
        s = string.gsub(s,"%((%a+)%)","")
        s = string.gsub(s,"%((%a+ %a+)%)","")
        -- Strip leading and trailing white space
        s = string.gsub(s, '^%s*(.-)%s*$', '%1')
        -- Find the start/end of the pattern: "is here, fighting"
        i, j = string.find(s,"is here, fighting")
        
        if IsClass({"Psionicist", "Mindbender"}) then Battle.DeceptCheck(s, Players[k].name) end
        if IsClass({"Mindbender"}) then Battle.PsyphonCheck(Players[k]) end
        if IsClass({"Sorcerer"}) then Battle.ImmoCheck(s, Players[k].name) end
        if StatTable.Race == "Dragon" then Battle.DevourCheck(s, Players[k].name) end
        if IsClass({"Monk", "Shadowfist"}) and StatTable.Level == 125 and not SafeArea() then TryAction("look " .. Players[k].name  .. " chakra", 60) end
      
        -- If Mob isn't fighting (ie didn't match the pattern above) then find would've set i to nil
        if (i ~= nil) then -- only adds mobs we're fighting  
        
          --print(string.gsub(s,"is here, fighting [^.]+%.?","")) -- stripes is here fighting
          
          
          -- Seperate into mob name and player names
          mob = string.lower(string.sub(s,1,(i-2)))
          player = GMCP_name(string.sub(s,(j+2),string.len(s)-1))
          if player == "You" then player = StatTable.CharName end

          if IsGroupMate(player) then
            if Battle.GroupiesUnderAttack[player] == nil then
              Battle.GroupiesUnderAttack[player] = 1
            else
              Battle.GroupiesUnderAttack[player] = Battle.GroupiesUnderAttack[player] + 1
            end
            Battle.EnemiesAttacking[Players[k].name] = {mob, player}
            mobcount = mobcount + 1
          end
        end
    end
  end
  Battle.MobCount = mobcount
  --if (mobcount&gt;0) then
  --  TableShow(Battle.GroupiesUnderAttack)
 --   TableShow(Battle.EnemiesAttacking)
 --   print("Battle.MobCount = " .. Battle.MobCount)
 -- end
  
end

-- Weak Mobs used for Immo, also Devour
ImmoMobList = {
  "This Githyanki coughs, blood bubbling up through his open mouth.",
  "A dying Githzerai crawls, dragging his useless legs behind him.",
  "Unsure on his feet, this young Githzerai tries to stay out of the way.",
  "A small fiend crawls through the blood.",
  "A former Lord of Midgaardia serves the Fae.",
  "Red particles swirl together in a fierce cluster.",
  "A dark cloud of diminishing hate struggles to keep itself together.",
  "This demon is emaciated with elongated limbs.",
  "A mound of topaz starts to move listlessly.",
  "Back from the dead, this Githzerai stumbles to his feet.",
  "The shadows reveal a Githyanki hidden behind the outhouse.",
  
  "This youth from this hamlet is terrified of you... but honor-bound to attack.",
  "This young female Trog is startled at your presence!",
  "This Troglodyte youth looks like he's off for the day, just enjoying himself.",
  "A Kuzzivo Youth looks like he wants to run away from you!",
  
  -- Conundrum
  "A united ent and giant army is fighting to preserve Midgaardia!",
  "Jacklyn leads refugees from Hospice refugee camp elsewhere.",
  
  
  
}


function Battle.ImmoCheck(mobname, mobnum)
  if StatTable.Level &lt; 125 and StatTable.SubLevel &lt; 101 then return end
  if not ArrayHasValue(ImmoMobList, mobname) then return end
  if StatTable.Calm and not Battle.Combat then return end

  -- quicken logic ok? add combat logic?
  --bug in quicken
  local quicken_level = 0

  if StatTable.current_mana &gt; (70000 * Battle.GetSpellCostMod("arcane")) then
    quicken_level = 9
  elseif StatTable.current_mana &gt; (50000 * Battle.GetSpellCostMod("arcane")) then
    quicken_level = 5
  end
  
  if quicken_level &gt; 0 then TryAction("quicken " .. quicken_level, 5) end
  
  if not StatTable.Immolation then
    TryCast("cast immolation " .. mobnum, 5)
  elseif not StatTable.AstralPrison and StatTable.Level == 125 then
    TryCast("cast 'astral prison' " .. mobnum, 5)
  else
    return
  end
  if quicken_level &gt; 0 then TryAction("quicken off",5) end

end

function Battle.DevourCheck(mobname, mobnum)
  if not ArrayHasValue(ImmoMobList, mobname) then return end
  if StatTable.RacialDevourFatigue then return end
    
  TryAction("racial devour " .. mobnum, 5)

end




local DeceptArea = {
  "{ LORD } Pliny Nothing",
  
}

local DeceptList = {
  ["{ LORD } Ducer   Fire Realm"] = {
    "Impossibly large flames burn with a deadly rage.",
    "An elemental of white hot flame strides through the forge.",
    "Burning violently a being of elemental fury moves towards you.",
    "Flames flow violently in an attempt to consume you.",
    "Jets of flame explode suddenly engulfing everything here.",
    "Winds of fire try to destroy the man and anything else entering here.",
    "Burning violently a being of elemental fury moves towards you.", -- can be large or huge
    "Impossibly large flames burn with a deadly rage.",
    "A burst of fire whirls around on burning wings.",
    "A knight does his best to defend himself as he staggers through the fire.",
    "A knight does her best to defend himself as he staggers through the fire.",
    "A knight quests for the secret of the purifying flame.",
  },
  
  ["{ LORD } Mimir   Cinderheim"] = {
    "A self-confident warrior scans for signs of danger.",
    "Soaring overhead, an imp scans for signs of life.",
  
  },
  
  ["{ LORD } CC-Ctib Savage Jungle"] = {
    "This kzinti is a deadly predator, and you'll never see him coming.",
    "Native to this plane, a strange breed of lizard man stalks about.",
  
  
  },
  
  ["{ LORD } CC-Ctib Kzinti Spire of War"] = {
  
  
  },


  --earth elemental descriptions: TODO determine which are telepaths, territorial and huge
  ["{ LORD } Crowe   World of Stone "] = {
    "This large Earth Elemental looks enraged.",
    "This earth elemental takes great joy in dispatching intruders.",
    "This Earth Elemental is so huge you can only surmise that it is royalty.",
    "The Lord of the Earth Elementals has had quite enough of you.",
    "Rare minerals have given this elemental the gift of telepathy.",
    "An elemental soldier saunters about, looking for trouble.",
    "A surging wave of stone crashes down upon you!",
    "A crystalline serpent slithers through the shifting Earth.",
    "A massive mound of earth tries to catch the lord's eye.",
    "A burly Earth Elemental scours the plane for impurities.",
  },

  ["{ LORD } Dev     Obsidian Arena; Floor"] = {
    "A Dark Fae soldier stalks the arena floor.", 
    "A dark Fae army archer stands here in a battle-ready stance.",
    "A dark fae armed with a longbow rides a massive mastador.",
    "A fae wizard in military uniform stands amid the soldiers.",
    "A fae wizard in military uniform stands behind the Duke.",
    "A guard leaps to attack you!",
    "A tall, powerfully built Fae bears a regal demeanor.",
    "A wiry Fae sits here, meditating. A blindfold is tied around his head.", 
    "An especially tall and proud Dark Fae Soldier stands before you.", 
    "Clad in robes bedecked with the icon of the moon, a She-Fae attends the Duke.",
    "It should come as no surprise that the Dark Fae army employs assassins.",
    "Lurking in the corner is a uniformed Fae with a crossbow.",
    "This soldier's uniform is bedecked with snake iconography.",
    "a Dark Fae archer is in the middle of a scattershot attempt.",
    "a Dark Fae beastmaster is in the middle of a held shot attempt.",
    "a Dark Fae beastmaster is in the middle of a scattershot attempt.",
    "a viper troop is out cold.",
    },

}

function Battle.DeceptCheck(mobname, mobnum)
  if Battle.Combat then return end -- return if already in combat
  local zone = gmcp.Room.Info.zone
  if ArrayHasValue(DeceptArea, zone) or (DeceptList[zone] and ArrayHasValue(DeceptList[zone], mobname)) then
    cs = getCommandSeparator()
    TryAction("quicken 9" .. cs .. "cast deception " .. mobnum .. cs .. "cast deception " .. mobnum .. cs .. "quicken off", 15)
  end
end

local PsyphonList = {
  "spec_battle_cleric",
  "spec_battle_mage",
  "spec_battle_sor",
  "spec_cast_adept",
  "spec_cast_cleric",
  "spec_cast_judge",
  "spec_cast_kinetic",
  "spec_cast_mage",
  "spec_cast_psion",
  "spec_cast_stormlord",
  "spec_cast_undead",
  "spec_cast_wizard",
  "spec_druid",
  "spec_mindbender",
  "spec_priest",
  "spec_sorceror",
}


function Battle.PsyphonCheck(mob)
  if StatTable.PsyphonExhaust or
     not Battle.Combat or
     StatTable.Level &lt; 50 or
     not ArrayHasValue(PsyphonList, mob.spec) then return end
  
  i, _ = string.find(s,"is here, fighting")
  if (i == nil) then return end -- we're not fighting this mob
  

  TryFunction("PsyphonCast", Battle.NextAct, {"quicken 9" .. cs .. "cast psyphon " .. mob.name .. cs .. "quicken off", 5}, 5)
  
end</script>
						<eventHandlerList>
							<string>gmcp.Room.Players</string>
							<string>gmcp.Room.AddPlayer</string>
							<string>gmcp.Room.RemovePlayer</string>
						</eventHandlerList>
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>AutoLotto</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>AutoLotto Script</name>
						<packageName></packageName>
						<script>-- Requires PInfo Script

AutoLotto = AutoLotto or {}
AutoLotto.Status = AutoLotto.Status or false
AutoLotto.LottoItems = AutoLotto.LottoItems or {}
AutoLotto.TotalItems = AutoLotto.TotalItems or 0
AutoLotto.LottoList = AutoLotto.LottoList or {}
AutoLotto.PlayerPick = AutoLotto.PlayerPick or 1
AutoLotto.Increment = AutoLotto.Increment or 1

AutoLotto.BagKeyword = AutoLotto.BagKeyword or nil
AutoLotto.BagID = AutoLotto.BagID or nil
AutoLotto.LastPlayer = AutoLotto.LastPlayer or ""
AutoLotto.Round = AutoLotto.Round or 1

safeEventHandler("AutoLottoResetBagIDonQuit", "OnQuit", function() AutoLotto.BagID = nil end)

function AutoLotto.SetBag(keyword, bag_name)
  AutoLotto.BagKeyword = keyword
  
  coroutine.wrap(function()
    local timeout = 1
    local MAX_TIMEOUT = 10 
    local request = "Char.Items.Inv"
    
    repeat
      sendGMCP(request)
      timeout = timeout + 1
      wait(1)
    until (gmcp.Char.Items.List.location == "inv" or timeout &gt;= MAX_TIMEOUT)
    
    
    if (timeout &gt;= MAX_TIMEOUT) then
      error("AutoLotto: couldn't find bag")
      return false
    end
    
    for _, item in ipairs(gmcp.Char.Items.List.items) do
      if item.type == "container" then
        item.name = string.lower(RemoveColourCodes(item.name))
        if string.find(item.name, string.lower(bag_name)) then 
          printMessage("AutoLotto", "Bag found: " .. item.name)
          AutoLotto.BagID = item.id
          return true
        end
      end
    end
  
  printMessage("AutoLotto", "Couldn't find a bag with that name ")
  return false
    
  end)()
end


function AutoLotto.CleanUp()
  send("gtell Lotto finished - thanks for playing!")

  AutoLotto.Status = false  
  OnPInfo.Clear()
  OnPInfo.Write()
  disableTrigger("On PInfo")
  
  AutoLotto.LastPlayer = ""
  AutoLotto.Round = 1
  AutoLotto.PlayerPick = nil
  safeKillTrigger("AutoLottoInvisNote")
  safeKillEventHandler("ProcessLotto")
  --safeKillTrigger("NextWinnerPick")

end

function AutoLotto.Init()
  if not OnPInfo.Lock then
    printMessage("AutoLotto", "Need to run \"autolotto pinfo\" first to save your pinfo")
    return false
  end
  
  if AutoLotto.Status then
    printMessage("AutoLotto", "Error, autolotto already running")
    return false
  end
  
  if not AutoLotto.BagKeyword or not AutoLotto.BagID then
    printMessage("AutoLotto", "Error, please run autolotto bag &lt;keyword&gt; &lt;bag name&gt; first")
    return false
  end
  
  AutoLotto.PopulateBag(AutoLotto.BagID)
  
  if GroupLeader() then
    printMessage("AutoLotto", "Review pinfo show and when ready type \"autolotto start\"")
  else
    send("tell " .. GlobalVar.GroupLeader .. " Autolotto updated, please approve pinfo " .. StatTable.CharName .. " and don't lotto until I gtell asking you to do so.")
  end
end

function AutoLotto.PopulateBag(bag_id)
  coroutine.wrap(function()
    local timeout = 1
    local MAX_TIMEOUT = 10 
    local request = "Char.Items.Contents " .. bag_id
    
    repeat
      sendGMCP(request)
      timeout = timeout + 1
      wait(1)
    until (gmcp.Char.Items.List.location == bag_id or timeout &gt;= MAX_TIMEOUT)
    
    
    if (timeout &gt;= MAX_TIMEOUT) then
      printMessage("AutoLotto", "Error - couldn't find bag. Try doing autolotto bag again")
      return false
    end
       
    AutoLotto.LottoItems = {}
    AutoLotto.TotalItems = 0
    
    local function ItemAlreadyInLottoItems(item_name)
      if #AutoLotto.LottoItems == 0 then return false; end
    
      for i, LottoItem in ipairs(AutoLotto.LottoItems) do
        if LottoItem.name == item_name then
          return i
        end
      end
      return false 
    end

    for _, item in pairs(gmcp.Char.Items.List.items) do
      local index = ItemAlreadyInLottoItems(item.name)
      
      AutoLotto.TotalItems = AutoLotto.TotalItems + 1
      
      if index then
        table.insert(AutoLotto.LottoItems[index].id, item.id)
        AutoLotto.LottoItems[index].quantity = AutoLotto.LottoItems[index].quantity + 1
      else
        table.insert(AutoLotto.LottoItems, {name = item.name, id = {item.id}, quantity = 1})
      end
      
    end
    
    -- don't show the displayitems message when adding items late to lotto bag
    if not AutoLotto.Status then AutoLotto.DisplayItems() end
    AutoLotto.WritePInfo()
    
  end)()
end

function AutoLotto.DisplayItems()
  printMessage("AutoLotto", "Please review the following list\n")
  
  for i = 1, #AutoLotto.LottoItems do
    if AutoLotto.LottoItems[i].quantity &gt; 0 then
      local str = string.format("%-2s.%3sx)  %s", ((i &lt; 10) and " " .. i or i), "(" .. AutoLotto.LottoItems[i].quantity, RemoveColourCodes(AutoLotto.LottoItems[i].name))
    end
  end
  
  printMessage("AutoLotto", "You can ask groupmates to review your pinfo")
  printMessage("AutoLotto", "Run the command \"autolotto start\" when you're ready")
end

function AutoLotto.WritePInfo()
  if not OnPInfo.Lock then
    printMessage("AutoLotto", "Need to run pinfo show first to save your pinfo")
    return false
  end
  
  safeTempTrigger("GagPInfo", "^(Playerinfo cleared|Playerinfo line added).$", function() deleteLine() end, "regex", (#AutoLotto.LottoItems + 3))
  
  OnPInfo.Clear()
  
  send("pinfo + The GLORIOUS LOOT (" .. AutoLotto.TotalItems .. ")", false)
  send("pinfo +", false)
  
  for i = 1, #AutoLotto.LottoItems do
    if AutoLotto.LottoItems[i].quantity &gt; 0 then
      local str = string.format("%-2s.%4s)  %s", ((i &lt; 10) and " " .. i or i), "(x" .. AutoLotto.LottoItems[i].quantity, AutoLotto.LottoItems[i].name)
      send("pinfo + " .. str, false)
    end
  end
end

function AutoLotto.Start() 
  if AutoLotto.Status then
    printMessage("AutoLotto", "Already running")
    return false
  end
  
  if GroupSize() &lt;= 1 then
    printMessage("AutoLotto", "Must have at least 2 in group to lotto")
    return false
  end
  
  if StatTable.Position == "Sleep" then send("rest") end
  
  AutoLotto.Status = true
  AutoLotto.LastPlayer = ""
  AutoLotto.Round = 1
  
  send("visible")
  send("sleep")

  safeEventHandler("ProcessLotto", "OnLotto", function() AutoLotto.ProcessLotto() end, true)
  
  safeTempTrigger("AutoLottoInvisNote", "^Someone tells the group '\\d+'$", function() send("gtell Please be visible.") end, "regex")
  
  if GroupLeader() then
    send("lotto " .. GroupSize(), false)
  else
    send("gtell AutoLotto ready - " .. GlobalVar.GroupLeader .. " please run \"lotto " .. GroupSize() .. "\"", false)
  end

end

function AutoLotto.ProcessLotto()
  AutoLotto.LottoList = deepcopy(LottoCapture)

  if not AutoLotto.LottoList then
    error("AutoLotto: LottoCapture is empty")
    return false
  end

  local msg = "Winners! "

  for i = 1, #AutoLotto.LottoList do
    msg = msg .. i .. ". " .. AutoLotto.LottoList[i] .. " "
  end

  send("gtell " .. msg)
  send("gtell |BW|\"pinfo " .. string.lower(StatTable.CharName) .. "\"|N| to see the loot! \"gtell #\" to pick or \"gtell pass\" to pass")
  send("gtell This is a Snake Lotto, the pick order is reversed each round")
  
  AutoLotto.PlayerPick = nil

  AutoLotto.NextWinner()

end

function AutoLotto.NextWinnerIncrement(playerpick, increment)
  if not playerpick then
    playerpick = 0
    increment = 1
  elseif playerpick == #AutoLotto.LottoList and increment == 1 then
    increment = 0
  elseif playerpick == #AutoLotto.LottoList and increment == 0 then
    increment = -1
  elseif playerpick == 1  and increment == -1 then
    increment = 0
  elseif playerpick == 1  and increment == 0 then
    increment = 1
  end

  return playerpick + increment, increment
end

function AutoLotto.NextWinner()

  AutoLotto.PlayerPick, AutoLotto.Increment = AutoLotto.NextWinnerIncrement(AutoLotto.PlayerPick, AutoLotto.Increment)

  if AutoLotto.PlayerPick &gt; #AutoLotto.LottoList then
    error("AutoLotto: PlayerPick out of range")
    return false
  end

  local player_name = AutoLotto.LottoList[AutoLotto.PlayerPick]
  
  if AutoLotto.LastPlayer == player_name then
    AutoLotto.Round = AutoLotto.Round + 1
    send("gtell |BW|ROUND #" .. AutoLotto.Round .. "|N| - picking in reverse order")
  else
    AutoLotto.LastPlayer = player_name
  end

  local msg = "|BY|" .. player_name .. "|N|'s pick! Check |BW|pinfo " .. string.lower(StatTable.CharName) .. "|N| and |BC|gtell &lt;#&gt;|N| or |BC|gtell pass|N|."

  local next_player = {}
  local next_inc = {}
  local N = math.min(5, AutoLotto.TotalItems)
  
  local colour_table = {"|G|", "|C|", "|B|", "|P|", "|Y|"}

  for i = 1, N do
    if i == 1 then
      next_player[1], next_inc[1] = AutoLotto.NextWinnerIncrement(AutoLotto.PlayerPick, AutoLotto.Increment)
      msg = msg .. " Next up: " .. colour_table[i] .. AutoLotto.LottoList[next_player[1]] .. "|N|"
    else
      next_player[i], next_inc[i] = AutoLotto.NextWinnerIncrement(next_player[i-1], next_inc[i-1])
      msg = msg .. ", " .. colour_table[i] .. AutoLotto.LottoList[next_player[i]] .. "|N|"
    end
  end

  send("gtell " .. msg)

end

function AutoLotto.ProcessWinner(args)
  args = string.lower(args)
  
  if args == "pass" then
    AutoLotto.NextWinner()
    return true
  elseif tonumber(args) ~= nil then
    local item_index = tonumber(args)
    local item = AutoLotto.LottoItems[item_index]
    
    if not item then
      send("gtell Item out of range. Please pick an item from \"pinfo " .. string.lower(StatTable.CharName) .. "\"")
      return false
    elseif item.quantity &lt;= 0 then
      send("gtell Out of item. Please pick an item from \"pinfo " .. string.lower(StatTable.CharName) .. "\"")
  
      return false
    end
    
    AutoLotto.GiveItemToPlayer(item_index, AutoLotto.LottoList[AutoLotto.PlayerPick])
    return true
    
  else
    send("gtell Invalid choice. Please choose a number from \"pinfo " .. string.lower(StatTable.CharName) .. "\" or pass with \"gtell pass\"")
    return false
  end
  

end

function AutoLotto.GiveItemToPlayer(item_index, player_name)
  local item = AutoLotto.LottoItems[item_index]

  if not item then
    error("AutoLotto: item_index out of range")
    return false
  end
  
  if item.quantity &lt;= 0 then
    error("AutoLotto: no item to give")
    return false
  end
  
  local was_asleep = (StatTable.Position == "Sleep" and true or false)
  if was_asleep then send("rest") end
  
  send("get " .. item.id[1] .. " " .. AutoLotto.BagID) -- used to be AutoLotto.BagKeyword
  send("give " .. item.id[1] .. " " .. player_name)
  send("gtell |BY|" .. player_name .. "|N| has picked #" .. item_index .. " (|BY|" .. item.name .. "|N|)")
  
  if was_asleep then send("sleep") end
  
  AutoLotto.LottoItems[item_index].quantity = AutoLotto.LottoItems[item_index].quantity - 1
  table.remove(AutoLotto.LottoItems[item_index].id, 1)  
  AutoLotto.TotalItems = AutoLotto.TotalItems - 1
  
  if AutoLotto.OneItemLeftCheck() then AutoLotto.CleanUp(); return end
  
  AutoLotto.WritePInfo()
  if AutoLotto.TotalItems &lt;= 0 then
    AutoLotto.CleanUp()
    return
  else
    AutoLotto.NextWinner()
  end
  
end

function AutoLotto.OneItemLeftCheck()
  local count = 0
  local index = 0
  
  for i = 1, #AutoLotto.LottoItems do
    if AutoLotto.LottoItems[i].quantity &gt; 0 then
      count = count + 1
      index = i
    end

    if count == 2 then
      return false
    end
  end

  if count == 0 then
    error("AutoLotto: shouldn't be reached")
    return false
  end
  
  local was_asleep = (StatTable.Position == "Sleep" and true or false)
  if was_asleep then send("rest") end

  send("gtell Only one item left! Handing out...")
  local wait_delay = 0
  for i = 1, AutoLotto.TotalItems do
    AutoLotto.PlayerPick, AutoLotto.Increment = AutoLotto.NextWinnerIncrement(AutoLotto.PlayerPick, AutoLotto.Increment)
    local next_send = ""
    
    next_send = "get " .. AutoLotto.LottoItems[index].id[1] .. " " .. AutoLotto.BagID -- used to be AutoLotto.BagKeyword
    next_send = next_send .. cs .. "give " .. AutoLotto.LottoItems[index].id[1] .. " " .. AutoLotto.LottoList[AutoLotto.PlayerPick]
    table.remove(AutoLotto.LottoItems[index].id, 1) 
    next_send = next_send .. cs .. "gtell |BY|" .. AutoLotto.LottoList[AutoLotto.PlayerPick].. "|N| received |BY|" .. AutoLotto.LottoItems[index].name .. "|N|!"

    tempTimer(wait_delay, function() send(next_send) end)
    wait_delay = wait_delay + 0.1
  end
  
  if was_asleep then tempTimer(wait_delay + 1, function() send("sleep"); end) end

  return true
end





-- Cmds:

-- autolotto init
-- autolotto start

-- Player runs pinfo show
-- Player runs autolotto init

-- Calls AutoLotto.Init()
-- Calls AutoLotto.PopulateBag(bag_id)
-- Calls AutoLotto.DisplayItems()
-- Calls AutoLotto.WritePInfo()

-- -- Player reviews, runs autolotto ready
-- Player can ask groupmates to confirm
-- autolotto start
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>OnPInfo Script</name>
						<packageName></packageName>
						<script>OnPInfo = OnPInfo or {}
OnPInfo.isOpen = OnPInfo.isOpen or false
OnPInfo.len = OnPInfo.len or 0
OnPInfo.PInfoArray = OnPInfo.PInfoArray or {}
OnPInfoBackup = OnPInfoBackup or {}
OnPInfo.Lock = OnPInfo.Lock or false

OnPInfo.PromptPattern = "^(.*)&lt;(%d+)/(%d+)hp (%d+)/(%d+)ma (%d+)v (%d+)&gt; (%d+)"


function OnPInfo.Save()
  local location = getMudletHomeDir() .. "/OnPInfoBackup.lua"
  table.save(location, OnPInfoBackup)
end

function OnPInfo.Load()
  local location = getMudletHomeDir() .. "/OnPInfoBackup.lua"
  if io.exists(location) then
    table.load(location, OnPInfoBackup)
  end
end

if TableSize(OnPInfoBackup) == 0 then OnPInfo.Load() end

-- Note: if you're using a prompt that is not the standard prompt from setup, you'll need to edit this line so that this regex matches your prompt (test at regex101.com)
function OnPInfo.IsPrompt(line)
    return string.match(line, OnPInfo.PromptPattern) ~= nil
end

function OnPInfo.ArrayAddLine(line)
  if OnPInfo.Lock then return end
  
  table.insert(OnPInfo.PInfoArray,line)
end

function OnPInfo.ArrayFinish()
  if OnPInfo.Lock then return end
  
  table.remove(OnPInfo.PInfoArray,1) -- remove's first line, i.e., Your playerinfo is:
  table.remove(OnPInfo.PInfoArray, #OnPInfo.PInfoArray) -- removes last line (empty line, before the prompt)
  
  OnPInfoBackup[StatTable.CharName] = deepcopy(OnPInfo.PInfoArray)
  OnPInfo.Save()
  
  OnPInfo.Lock = true
end

function OnPInfo.Clear()
  if not OnPInfo.Lock then
    pdebug("OnPInfo.Clear(): didn't clear, OnPInfo.Lock is false")
    return
  end
  send("pinfo clear", false)
end

function OnPInfo.Write()
  for index, pinfo_line in ipairs(OnPInfo.PInfoArray) do
    send("pinfo + " .. pinfo_line, false)
  end
  OnPInfo.Lock = false
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Combat Scripts</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>AutoRescue</name>
						<packageName></packageName>
						<script>AR = AR or {}
AR.RescueList = AR.RescueList or {}
AR.Status = AR.Status or false
AR.MinHP = AR.MinHP or 0.20
AR.Echo = AR.Echo or GlobalVar.Silent or false
AR.RescueStack = AR.RescueStack or {}
AR.RescueLock = AR.RescueLock or false
AR.ProcessRescueStackLock = AR.ProcessRescueStackLock or false
AR.RescueStackDelaySeconds = (math.floor((0.5 + math.random() * 0.5) * 100 + 0.5) / 100) or 1 -- previously used 1 and it worked well, trying a random number between 0.5 and 1
AR.MonitorRescue = AR.MonitorRescue or false
AR.MontorRescueHPpct = AR.MontorRescueHPpct or 0.25

AR.RescueBzk = AR.RescueBzk or {}

function AR.Debug(message)
  if GlobalVar.Debug then
    cecho(message)
  end 
end

function AR.Rescue(name)
  if not AR.Status then return false end -- AutoRescue off, return
  
  name = string.lower(name)
  if not AR.RescueList[name] then return false end -- name is not on rescue list, return
  if not GlobalVar.GroupMates[firstToUpper(name)] then AR.Debug(name .. " not a groupmate or you don't have detects up"); return end


  local currentHPpct = (StatTable.current_health / StatTable.max_health)
  if currentHPpct &lt; AR.MinHP then -- if hp too low, return
    cecho("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; Didn't rescue " .. name .. ". HP% less than " .. (AR.MinHP * 100) .. "%\n")
    return false
  end
  
  -- If rescue target is a Bzk
  if GlobalVar.GroupMates[firstToUpper(name)].class == "Bzk" then
  
    -- Add them to the array
    if not AR.RescueBzk[name] then
      AR.RescueBzk[name] = {}
      AR.RescueBzk[name].rounds = 0
      AR.RescueBzk[name].lock = false
    end
    
    -- We only want to add +1 to the rounds variable is the Bzk took damage in a different round
    -- Thus we will only add +1 every 2seconds at most (eg in the case where the Bzk is tanking 3 different mobs)
    if AR.RescueBzk[name].lock then
      return
    end
    
    AR.RescueBzk[name].rounds = AR.RescueBzk[name].rounds + 1
    AR.RescueBzk[name].lock = true
    tempTimer(2, function() if AR.RescueBzk[name] then AR.RescueBzk[name].lock = false end; end)
    
    
    if AR.RescueBzk[name].rounds &lt; 3 then return end  
  
  end
  

  -- ok ready to rescue, lets make a priority list

 -- check if name already on stack, if so update HP
  local AlreadyOnStack = false

  if #AR.RescueStack &gt; 0 then 
    for _, player in ipairs(AR.RescueStack) do
      if player.name == name then 
        player.hp = GlobalVar.GroupMates[GMCP_name(name)].hp or 0
        AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. name .. " already on stack, HP updated to: " .. GlobalVar.GroupMates[GMCP_name(name)].hp) 
        AlreadyOnStack = true
        break
      end
    end
  end

  if not AlreadyOnStack then
    AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. name .. " added to the rescue stack with HP: " .. GlobalVar.GroupMates[GMCP_name(name)].hp) 
    table.insert(AR.RescueStack, {name = name, hp = GlobalVar.GroupMates[GMCP_name(name)].hp or 0})
  end

  
  if not AR.RescueLock then
    AR.RescueLock = true
    tempTimer(AR.RescueStackDelaySeconds, function() AR.RescueLock = false; AR.ProcessRescueStack() end)
  end

end



function AR.ProcessRescueStack(InternalFunctionLock)
  if InternalFunctionLock == nil then InternalFunctionLock = AR.ProcessRescueStackLock end
  AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; AR.ProcessRescueStack() called")
  if #AR.RescueStack == 0 then
    AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; Rescue stack empty, ending recursive calls")
    AR.ProcessRescueStackLock = false; return 
  end --function recursively calls itself till stack is empty
  if InternalFunctionLock then AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; AR.ProcessRescueStack() failed lock") return end -- return if function is already in recursive loop
  
  AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; AR.ProcessRescueStack() through the locks")
  
  AR.ProcessRescueStackLock = true

  local lag = tonumber(gmcp.Char.Vitals.lag) or 0

  table.sort(AR.RescueStack, function (k1, k2) return k1.hp &lt; k2.hp end ) -- smallest HP groupmates to the top of the stack
  
  AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; Rescue stack called, groupies sorted by HP")
  
  
  if lag &gt; 0 then
    AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; We are in lag, will try processing the stack in " .. lag .. "  seconds")
    tempTimer(lag, function() AR.ProcessRescueStack(false) end)
    return
  end
  
  cecho("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; Rescueing " .. AR.RescueStack[1].name .. "! Will check stack again in "..AR.RescueStackDelaySeconds.." second(s)")
  send("rescue " .. AR.RescueStack[1].name)
  table.remove(AR.RescueStack, 1)
  tempTimer(AR.RescueStackDelaySeconds, function() if Battle.Combat then AR.ProcessRescueStack(false); else AR.RescueStack = {}; AR.ProcessRescueStackLock = false end; end) -- if we check for Battle.Combat, AR.RescueStack isn't cleared when fight ends early
  --tempTimer(AR.RescueStackDelaySeconds, function() AR.ProcessRescueStack(false); end)
end

function AR.RemovePlayerFromStack(name)
  name = string.lower(name)

  -- if that player was on the stack, remove them
  if #AR.RescueStack &gt; 0 then 
    for stack_index, player in ipairs(AR.RescueStack) do
      if player.name == name then 
        table.remove(AR.RescueStack, stack_index)
        AR.Debug("\n&lt;white&gt;AutoRescue:&lt;ansi_white&gt; Another tank rescued " .. name .. ", removed them from the rescue stack")
        break
      end
    end
  end
end

function AR.GroupieRescuesMe(name)
  if AR.Status == true then 
    if GlobalVar.GroupMates and GlobalVar.GroupMates[GMCP_name(name)] and  GlobalVar.GroupMates[GMCP_name(name)].class == "Bzk" then return end
    if AR.RescueList[string.lower(name)] == true then
      AR.Remove(name)
      if AR.Echo then
        cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; I was rescued by &lt;yellow&gt;" .. firstToUpper(name) .. "&lt;ansi_white&gt; - removed from AutoRescue\n")
      else
       -- send("gtell |BW|AutoRescue:|N| I was rescued by |BC|" .. firstToUpper(name) .. "|N| - removed from AutoRescue (add yourself again with |BW|gt add me|N|)")
      end
    end
  end
end


function AR.On()
  AR.Status = true
  print("AutoRescue enabled")
end

function AR.Off()
  AR.Status = false
  print("AutoRescue disabled")
end

function AR.Remove(name)
  if name == "Someone" then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; someone not removed, go vis first\n") else send("gtell |BW|AutoRescue:|N| Not removed, go vis first") end
    return false
  else
    if AR.RescueList[string.lower(name)] then
      AR.RescueList[string.lower(name)] = false
      if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. firstToUpper(name) .. " removed\n") else send("gtell |BW|AutoRescue:|N| " .. firstToUpper(name) .. " removed") end
      return true
    else
      if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. firstToUpper(name) .. " not on autorescue list\n") else  send("gtell |BW|AutoRescue:|N| " .. firstToUpper(name) .. " not on autorescue list") end
      return false
    end
  end
end

function AR.Add(name)
  --name = string.gsub(name,"|%w+|","") -- AR.add only called by trigger or alias (not GMCP), not needed
  if name == "Someone" then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; someone not added, go vis first\n") else send("gtell |BW|AutoRescue:|N| Not added, go vis first") end
  elseif AR.RescueList[string.lower(name)] == true then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. firstToUpper(name) .. " already on list\n") else send("gtell |BW|AutoRescue:|N| " .. firstToUpper(name) .. " already on list") end
  else
    AR.RescueList[string.lower(name)] = true
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; " .. firstToUpper(name) .. " added\n") else send("gtell |BW|AutoRescue:|N| " .. firstToUpper(name) .. " added") end
  end
end

function AR.All()
  AR.RescueList = {}
  local AR_paladins = ""
  for k,v in ipairs(gmcp.Char.Group.List) do
    v.name = RemoveColourCodes(v.name)
    if v.name == "Someone" then 
      print("")
      print("AutoRescue ERROR: invis groupie not added")   
    elseif v.name == StatTable.CharName then
      -- not adding ourself
    else
      if v.class == "Pal" then
        AR_paladins = AR_paladins .. v.name .. " |BW|||BY| "
      else
        AR.RescueList[string.lower(v.name)] = true
      end
    end   
  end
  if AR_paladins == "" then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies added\n") else send("gtell |BW|AutoRescue:|N| all groupies added") end
  else
    AR_paladins = AR_paladins:sub(1,-12)
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies excluding paladins (&lt;yellow&gt;" .. AR_paladins .."&lt;ansi_white&gt;)\n") else send("gtell |BW|AutoRescue:|N| added all groupies excluding paladins (|BY|" .. AR_paladins .."|N|)") end
  end
  if not AR.Echo then AR.Show() end
end

function AR.Auto()
  AR.RescueList = {}
  local AR_excluded = ""
  for k,v in ipairs(gmcp.Char.Group.List) do
    v.name = RemoveColourCodes(v.name)
    if v.name == "Someone" then 
      print("")
      print("AutoRescue ERROR: invis groupie not added")   
    elseif v.name == StatTable.CharName then
      -- not adding ourself
    else
      if StatTable.Level == 125 and (v.class == "Pal" or v.class == "Bld" or v.class == "War" or v.class == "Rip" or v.class == "Bod" or v.class == "Mon" or v.class == "Shf") then
        AR_excluded = AR_excluded .. v.name .. " |BW|||BY| "
      elseif StatTable.Level == 51 and (
              (v.class == "Pal" and tonumber(string.match(v.level, "%d+")) &gt;= 250) or 
              ((v.class == "War" or v.class == "Rip" or v.class == "Bod" or v.class == "Mon" or v.class == "Shf") and tonumber(v.hp) &gt; 2500)) then
        AR_excluded = AR_excluded .. v.name .. " |BW|||BY| "
      else
        -- exclude mutants as well
        if v.class ~= "Bzk" and tonumber(v.maxhp) &gt; 50000 then AR_excluded = AR_excluded .. v.name .. " |BW|||BY| " else
        AR.RescueList[string.lower(v.name)] = true; end
      end
    end   
  end
  if AR_excluded == "" then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies added\n") else send("gtell |BW|AutoRescue:|N| all groupies added") end
  else
    AR_excluded = AR_excluded:sub(1,-12)
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies excluding tanks/pals/mutants (&lt;yellow&gt;" .. AR_excluded .."&lt;ansi_white&gt;)\n") else send("gtell |BW|AutoRescue:|N| added all groupies excluding tanks/pals/blds/mutants (|BY|" .. AR_excluded .."|N|)") end
  end
  if not AR.Echo then AR.Show() end
end

function AR.Small(smallhp)
  AR.RescueList = {}
  local AR_paladins = ""
  for k,v in ipairs(gmcp.Char.Group.List) do
    v.name = (v.name)
    if v.name == "Someone" then 
      print("")
      print("AutoRescue ERROR: invis groupie not added")   
    elseif v.name == StatTable.CharName then
      -- not adding ourself
    else
      if (tonumber(v.maxhp) &lt; smallhp) then
        if v.class == "Pal" then
          AR_paladins = AR_paladins .. v.name .. " |BW|||BY| "
        else
          AR.RescueList[string.lower(v.name)] = true
        end
      end
    end 
  end
  if AR_paladins == "" then
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies with maxhp less than " .. format_int(smallhp) .. " added\n") else send("gtell |BW|AutoRescue:|N| all groupies with maxhp less than " .. format_int(smallhp) .. " added") end
  else
    AR_paladins = AR_paladins:sub(1,-12)
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; all groupies with maxhp less than " .. format_int(smallhp) .. " added excluding paladins (&lt;yellow&gt;" .. AR_paladins .."&lt;ansi_white&gt;)\n") else send("gtell |BW|AutoRescue:|N| all groupies with maxhp less than " .. format_int(smallhp) .. " added excluding paladins (|BY|" .. AR_paladins .."|N|)") end
  end
  if not AR.Echo then AR.Show() end
end

local MAX_NAMES = 10

function AR.Show()
  local list = "|BW|AutoRescue List: |BR|"
  local count = 0
  for name,listed in pairs(AR.RescueList) do
    if listed == true then
      list = list .. firstToUpper(name)
      count = count + 1
      if count % MAX_NAMES == 0 then -- gtell has a line maximum, after 10 names, start a new line
        list = list .. "|N|" .. getCommandSeparator() .. "gtell |BR|"
      else
        list = list .. " |BW|||BR| "
      end
    end
  end
  
  if count == 0 then
    printMessage("AutoRescue", "No one on AutoRescue list to show...")
    return
  end
  
  -- if we happened to have exactly 12 on AR, we would have created the extra gtell unecessarily, in this case remove it
  if count % MAX_NAMES == 0 then
    list = list:sub(1,-8) -- remove the gtell that wasn't needed
  else -- otherwise remove the last name seperator: |
    list = list:sub(1,-12) -- remove the last | from the list
  end
  
  list = list .. " |N|(|BW|gt add me|N| to be added)"
  send("gtell " ..  list)
end

function AR.print_status()
  cecho("&lt;white&gt;AutoRescue&lt;ansi_white&gt; is " .. (AR.Status and "ON" or "OFF") .. "\n")
end
    

function AR.Clear()
  AR.RescueList = {}
  if (AR.Status) then 
    if AR.Echo then cecho("&lt;white&gt;AutoRescue:&lt;ansi_white&gt; List cleared\n") else send("gtell |BW|AutoRescue:|N| List cleared") end
  end
end

function AR.OnMobDeath()
  AR.RescueBzk = {}
end

AR.EventMobDeath = AR.EventMobDeath or nil

if AR.EventMobDeath then
  killAnonymousEventHandler(AR.EventMobDeath)
end

AR.EventMobDeath = registerAnonymousEventHandler("OnMobDeath", AR.OnMobDeath)
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>AutoTarget</name>
						<packageName></packageName>
						<script>GlobalVar.AutoTarget = GlobalVar.AutoTarget or false
GlobalVar.AutoTargetEmote = GlobalVar.AutoTargetEmote or false

local TargetExclusions = {

--Arcanist Nascents
"This small pool of acid licks at the rock hungrily.",
"Flickering and leaping, these flames look around for more fuel.",
"This rock moves of its own will, hither and yon.",
"A tiny spark zaps from one crystal to the next, building its charge.",
"This breeze twirls about playfully.",
"This clump of snowflakes drifts silently about.",
"This rivulet of water trickles across the ground, gathering droplets.",

-- Companions
"Scanning the surrounding area for trouble, Besaur waits nearby.",
"Nalfar tests the weight of his weapon, shuffling it from hand to hand.",
"With a grim smile, Teli idly waits to jump into the fray.",

-- Immo Mobs
"This Githyanki coughs, blood bubbling up through his open mouth.",
"A dying Githzerai crawls, dragging his useless legs behind him.",
"Unsure on his feet, this young Githzerai tries to stay out of the way.",
"A small fiend crawls through the blood.",
"A former Lord of Midgaardia serves the Fae.",
"Red particles swirl together in a fierce cluster.",
"A dark cloud of diminishing hate struggles to keep itself together.",
"This demon is emaciated with elongated limbs.",
"A mound of topaz starts to move listlessly.",
"Back from the dead, this Githzerai stumbles to his feet.",

-- NPCS
"Resting on the throne, Bestellen contemplates a white cube in his hand.",
"This ent places a handful of gold coins on his weighing scale.",
"The shadowy fog has formed a maelstrom of darkness.", -- shadowlands, dje
"A tall sentry stands here blocking your entrance.", -- darker castle


-- Special
"Something interesting is here",

-- Chaos
"The Chaotic Abyss controls everything else.",

-- Garden
"The servant of the Six glares at you and deems you unpure!",

-- Vault
"A wraithlike devil looks quite bored.",

-- Astral
"A githzerai plots his escape plan.",
"Made of solid red light, a guardian golem glares at you.",
"Made of solid orange light, a guardian golem glares at you.",
"Made of solid yellow light, a guardian golem glares at you.",
"Made of solid green light, a guardian golem glares at you.",
"Made of solid blue light, a guardian golem glares at you.",
"Made of solid indigo light, a guardian golem glares at you.",
"Made of solid violet light, a guardian golem glares at you.",

"True good can never be caged.",


-- Astral Invasion
"A Fae Cleric rolls his eyes at you, and casts a protection spell on himself.",
"Flames dance playfully upon the back of some poor soul.",

-- Mobs on the way to wasps (maybe do this with area exception?)
"A Grue stands in the shadows, slavering all over himself.",
"A vampire squirrel looks up from the ground, catching your gaze.",
"A ghost hovers before you.",
"A jet black unicorn stands before you, looking angry.",
"A giant oak tree looms before you, seeming to almost grin.",


-- Kzinti
"A villager struggles through the waist-high snow.",
"For this villager, every day is a nightmare.",
"This villager dreams of forgotten warmth.",
"This villager stares straight ahead.",
"A small, scrawny boy looks up at you, and then goes back to rearranging stones.",
"A village child looks up at you, but does not move.",
"This haggler seems wrapped in the web of old age.",

-- Conundrum
"A large mob of angry Midgaardians are looking for the ones responsible!",
"Some sleeping heroes are procrastinating here, uninterested in the invasion.",






}

AutoTargetCastDelay = AutoTargetCastDelay or 1

function AutoTarget()
  if not GlobalVar.AutoTarget or Battle.Combat or SafeArea() then return end
  
  for _,mob in pairs(gmcp.Room.Players) do
    if(tonumber(mob.name) ~= nil and ArrayHasSubstring(TargetExclusions, mob.fullname) == false and ArrayHasSubstring(ImmoMobList, mob.fullname) == false) then
      
      --if GroupLeader() then send("emote is killing " .. mob.name) end
      
      -- We're now ready to autotarget the mob. This first bit is for casters.
      if (GlobalVar.AutoCast and (GlobalVar.KillStyle == "kill" or not GlobalVar.AutoKill)) then
        if tonumber(gmcp.Char.Vitals.lag) &gt; 0 then return end
        
        local cast_action = "cast '" .. GlobalVar.AutoCaster .. "' " .. mob.name
        
        if GlobalVar.SurgeLevel &gt; 1 and StatTable.current_mana &gt; 8000 then 
          cast_action = "surge " .. GlobalVar.SurgeLevel .. getCommandSeparator() .. cast_action .. getCommandSeparator() .. "surge off"
        end
        -- delay cast by AutoTargetCastDelay seconds to give tanks/stabbers a chance first
        tempTimer(AutoTargetCastDelay,function() if not Battle.Combat then TryCast(cast_action,5); end; end)
        break
      else
        send(GlobalVar.KillStyle .. " " .. mob.name)
        if GlobalVar.KillStyle == "ass" or GlobalVar.KillStyle == "bs" then
          tempTimer(0, function() send("surp " .. mob.name) end)
        end
        if GlobalVar.AutoTargetEmote then send("emote is killing " .. mob.name) end
        if GroupLeader() then break end
      end
      
    end
  end
end


function AutoSlip(dir, target)
  local weapon_keyword = "long bow deep shadow"
  
  -- Initial checks, make sure we are a stabber and we have alert/sneak up
  if IsNotClass({"Rogue", "Assassin"}) then
    printMessage("AutoSlip", "Error, only Rogues and Assassins can slip")
    return
  end

  if not StatTable.Alertness then
    printMessage("AutoSlip", "Alertness not up, attempting alertness now")
    send("alertness")
  end

  if not StatTable.Sneak then
    printMessage("AutoSlip", "Sneak not up, attempting sneak now")
    send("sneak")
  end

  -- if no direction is provided, we will move back in the last direction we came from
  if not dir then
    if #GlobalVar.LastDirs &gt;= 1 then
      dir = ReverseDir(GlobalVar.LastDirs[#GlobalVar.LastDirs])
    else
      printMessage("AutoSlip Erro", "No last direction available")
      return
    end
  end

  if not dir then
    printMessage("AutoSlip Error", "No direction specified")
    return
  end
  
  -- if no target is provided, we'll pick a random mob that's not on the exclusion list
  if not target then
    -- no target specified by player, find one
    for _,mob in pairs(gmcp.Room.Players) do
      if(tonumber(mob.name) ~= nil and ArrayHasSubstring(TargetExclusions, mob.fullname) == false) then
        target = tonumber(mob.name)
        --break
      end
    end      
  end
  
  if not target then
    printMessage("AutoSlip", "No target found")
    return
  end
   
  if GlobalVar.AutoTarget then
    GlobalVar.AutoTarget = false
    safeEventHandler("AutoSlipResetAutoTargetOnMobDeath", "OnMobDeath", function() GlobalVar.AutoTarget = true; end, true)
  end
  
  if not (StatTable.Enemy == nil or StatTable.Enemy == "") then 
    if StatTable.Class == "Rogue" and StatTable.SubLevel &gt;= 25 then
      send("disengage " .. dir)
    else
      printMessage("AutoSlip", "In combat, can't slip")
      return
    end
  else
    send(dir)
  end
  
  send("remove '" .. weapon_keyword .. "'")
  send("slip " .. ReverseDir(dir) .. " " .. target)
  send("wield '" .. weapon_keyword .. "'")
  send("assassinate " .. target)

end

</script>
						<eventHandlerList>
							<string>gmcp.Room.Players</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Damage Counter</name>
						<packageName></packageName>
						<script>DamageCounter = DamageCounter or {}
DamageCounter.Players = DamageCounter.Players or {}

function DamageCounter.PlayerExists(ch)
  assert(ch,"DamageCounter.PlayerExists(): ch is nil")
  ch = GMCP_name(ch)
  if (DamageCounter.Players[ch]==nil) then
    DamageCounter.Players[ch] = {}
    DamageCounter.Players[ch].dmg = 0
    DamageCounter.Players[ch].bashdmg = 0
    DamageCounter.Players[ch].bashrounds = 0
    DamageCounter.Players[ch].rounds = 0
    DamageCounter.Players[ch].highest = 0
    DamageCounter.Players[ch].terminal = 0
    DamageCounter.Players[ch].brandishes = 0    
    return false
  else
    return true
  end
end

function DamageCounter.AddDmg(ch, dmgdesc, bash)
  ch = GMCP_name(ch)
  bash = bash or false
  if ch == "Someone" then return end
  
  DamageCounter.PlayerExists(ch)
  
  if (dmgdesc == "terminal") then
    DamageCounter.Players[ch].terminal = tonumber(DamageCounter.Players[ch].terminal) + 1
    return
  end
  
  amt = tonumber(DamageCounter.dmgtonum(dmgdesc))
  
  if not (amt&gt;=0) then return end
  assert(amt&gt;=0, "Non-attack related line was picked up by trigger, ignoring.")
  
  -- Only count a round if we record damage (ie non-terminal) so that our avg dmg is calc'd correctly
  -- This solution may miss out on rounds that have no damage.
  DamageCounter.Players[ch].rounds = DamageCounter.Players[ch].rounds + 1
  
  
  DamageCounter.Players[ch].dmg = DamageCounter.Players[ch].dmg + amt
  if bash then 
    DamageCounter.Players[ch].bashdmg = DamageCounter.Players[ch].bashdmg + amt 
    DamageCounter.Players[ch].bashrounds = DamageCounter.Players[ch].bashrounds + 1
  end

  if (DamageCounter.Players[ch].highest &lt; amt) then DamageCounter.Players[ch].highest = amt end
--print("Total Damage from " .. ch .. ": " .. DamageCounter.Players[ch].dmg .. " (Highest: " .. DamageCounter.Players[ch].highest .. ")")
  return
end

function DamageCounter.AddBrandish(ch)
  ch = GMCP_name(ch)
  if ch == "Someone" then return end
  
  DamageCounter.PlayerExists(ch)
  
  if not DamageCounter.Players[ch].brandishes then DamageCounter.Players[ch].brandishes = 0 end
  
  DamageCounter.Players[ch].brandishes = DamageCounter.Players[ch].brandishes + 1
end

function DamageCounter.Reset()
  DamageCounter.Players = {}
end

function DamageCounter.Report()
  local player_sort = {}
  local player_brands = {}
  local rank = 1
  
  for n,m in pairs(DamageCounter.Players) do
    -- Begin sorting with terms included
    --local avgdmg = math.floor(m.dmg / m.rounds+.05)
    --local dmgwithterms = m.dmg + (avgdmg * m.terminal)
    -- end sorting with terms included
    --table.insert(player_sort, {dmgwithterms, n}) 
    table.insert(player_sort, {m.dmg, n})
    if m.brandishes &gt; 0 then table.insert(player_brands, {m.brandishes, n}) end 
  end
  
  table.sort(player_sort,rcompare)
  
  
  for i,n in ipairs(player_sort) do 
    v = DamageCounter.Players[n[2]]
    k = n[2]
  --for k,v in pairs(DamageCounter.Players) do
    if (v.rounds &gt;= 1) then 
      local avgdmg = math.floor((v.dmg - v.bashdmg) / (v.rounds - v.bashrounds) +.05)
      --local dmgwithterms = v.dmg + (avgdmg * v.terminal)
      local msg = rank .. ". |BW|" .. k .. "|N|: " .. format_int(math.floor(v.dmg+.05)) .. " (avg: |BY|" .. DamageCounter.numtodmg(avgdmg) .. "|N| / max: |BY|" .. DamageCounter.numtodmg(v.highest) .."|N|)"
      msg = string.gsub(msg,"=","-") -- server doesn't allow '=', replace with '-'
      if (rank &lt; 7) then send("gtell " .. msg,false) end
      rank = rank + 1
      
      --print(k,avgdmg,DamageCounter.numtodmg(avgdmg))
    end
  end
  
  if #player_brands &gt; 0 then 
    table.sort(player_brands,rcompare)
    
    local brand_msg = "gtell |BW|Top Brandishers: |N|"
    
    for i,n in ipairs(player_brands) do
      if i &gt; 8 then break end
      
      brand_msg = brand_msg .. n[2] .. " (|BY|" .. n[1] .. "|N|), "
      
    end 
    
    brand_msg = brand_msg:sub(1,-3)
    send(brand_msg)
  end
end

function DamageCounter.ReportEcho()
  print("Damage Report:")
  print("------------------")
  
  local player_sort = {}
  local player_brands = {}
  local rank = 1
  
  for n,m in pairs(DamageCounter.Players) do
    -- Begin sorting with terms included
    --local avgdmg = math.floor(m.dmg / m.rounds+.05)
    --local dmgwithterms = m.dmg + (avgdmg * m.terminal)
    -- end sorting with terms included
    --table.insert(player_sort, {dmgwithterms, n}) 
    table.insert(player_sort, {m.dmg, n}) 
    if m.brandishes &gt; 0 then table.insert(player_brands, {m.brandishes, n}) end
  end
  
  table.sort(player_sort,rcompare)
  
  
  for i,n in ipairs(player_sort) do 
    v = DamageCounter.Players[n[2]]
    k = n[2]
  --for k,v in pairs(DamageCounter.Players) do
    if (v.rounds &gt;= 1) then 
      local avgdmg = math.floor((v.dmg - v.bashdmg) / (v.rounds - v.bashrounds) +.05)
      --local dmgwithterms = v.dmg + (avgdmg * v.terminal)
      local msg = rank .. ". " .. k
      if (string.len(k)&gt;4) then
        msg = msg .. "\t"
      else
        msg = msg .. "\t\t"
      end
      -- \t\t section needs to consider if number is two digits (if so, should be &lt;7)
      msg = msg .. format_int(math.floor(v.dmg+.05)) .. ((string.len(format_int(math.floor(v.dmg+.05))) &lt; 8 and "\t\t" or "\t")) .. "(avg: " .. DamageCounter.numtodmg(avgdmg) .. " / highest: " .. DamageCounter.numtodmg(v.highest) .. " / terms: " .. v.terminal .. ")"
      --msg = msg .. format_int(math.floor(dmgwithterms+.05)) .. "\t(avg: " .. DamageCounter.numtodmg(avgdmg) .. " / highest: " .. DamageCounter.numtodmg(v.highest) .. " / terminals: " .. v.terminal .. ")"
      
      print(msg)
      rank = rank + 1
      
      --print(k,avgdmg,DamageCounter.numtodmg(avgdmg))
      end
    end
    
   if #player_brands &gt; 0 then 
    table.sort(player_brands,rcompare)
    
    local brand_msg = "Top Brandishers: "
    
    for i,n in ipairs(player_brands) do
      if i &gt; 8 then break end
      
      brand_msg = brand_msg .. n[2] .. " (" .. n[1] .. "), "
      
    end 
    
    brand_msg = brand_msg:sub(1,-3)
    print(brand_msg)
  end
end

function DamageCounter.dmgtonum(dmgdesc)
  if (dmgdesc == "nil") then return 0 end
  if (dmgdesc == "pathetic") then return 1.5 end
  if (dmgdesc == "weak") then return 3.5 end
  if (dmgdesc == "punishing") then return 7.5 end
  if (dmgdesc == "surprising") then return 9.5 end
  if (dmgdesc == "amazing") then return 12.5 end
  if (dmgdesc == "astonishing") then return 16.5 end
  if (dmgdesc == "mauling") then return 20.5 end
  if (dmgdesc == "MAULING") then return 24.5 end
  if (dmgdesc == "*MAULING*") then return 28.5 end
  if (dmgdesc == "**MAULING**") then return 32.5 end
  if (dmgdesc == "***MAULING***") then return 36.5 end
  if (dmgdesc == "decimating") then return 40.5 end
  if (dmgdesc == "DECIMATING") then return 44.5 end
  if (dmgdesc == "*DECIMATING*") then return 48 end
  if (dmgdesc == "**DECIMATING**") then return 52.5 end
  if (dmgdesc == "***DECIMATING***") then return 58 end
  if (dmgdesc == "devastating") then return 63 end
  if (dmgdesc == "DEVASTATING") then return 68 end
  if (dmgdesc == "*DEVASTATING*") then return 73 end
  if (dmgdesc == "**DEVASTATING**") then return 78 end
  if (dmgdesc == "***DEVASTATING***") then return 83 end
  if (dmgdesc == "pulverizing") then return 88 end
  if (dmgdesc == "PULVERIZING") then return 93 end
  if (dmgdesc == "*PULVERIZING*") then return 98 end
  if (dmgdesc == "**PULVERIZING**") then return 105.5 end
  if (dmgdesc == "***PULVERIZING***") then return 115.5 end
  if (dmgdesc == "maiming") then return 125.5 end
  if (dmgdesc == "MAIMING") then return 135.5 end
  if (dmgdesc == "*MAIMING*") then return 145.5 end
  if (dmgdesc == "**MAIMING**") then return 155.5 end
  if (dmgdesc == "***MAIMING***") then return 165.5 end
  if (dmgdesc == "eviscerating") then return 175.5 end
  if (dmgdesc == "EVISCERATING") then return 185.5 end
  if (dmgdesc == "*EVISCERATING*") then return 195.5 end
  if (dmgdesc == "**EVISCERATING**") then return 213 end
  if (dmgdesc == "***EVISCERATING***") then return 238 end
  if (dmgdesc == "mutilating") then return 263 end
  if (dmgdesc == "MUTILATING") then return 288 end
  if (dmgdesc == "*MUTILATING*") then return 313 end
  if (dmgdesc == "**MUTILATING**") then return 338 end
  if (dmgdesc == "***MUTILATING***") then return 363 end
  if (dmgdesc == "disemboweling") then return 388 end
  if (dmgdesc == "DISEMBOWELING") then return 413 end
  if (dmgdesc == "*DISEMBOWELING*") then return 438 end
  if (dmgdesc == "**DISEMBOWELING**") then return 463 end
  if (dmgdesc == "***DISEMBOWELING***") then return 488 end
  if (dmgdesc == "dismembering") then return 520.5 end
  if (dmgdesc == "DISMEMBERING") then return 562 end
  if (dmgdesc == "*DISMEMBERING*") then return 606 end
  if (dmgdesc == "**DISMEMBERING**") then return 675 end
  if (dmgdesc == "***DISMEMBERING***") then return 730 end
  if (dmgdesc == "massacring") then return 769 end
  if (dmgdesc == "MASSACRING") then return 810 end
  if (dmgdesc == "*MASSACRING*") then return 867 end
  if (dmgdesc == "**MASSACRING**") then return 907.5 end
  if (dmgdesc == "***MASSACRING***") then return 958 end
  if (dmgdesc == "mangling") then return 1050.5 end
  if (dmgdesc == "MANGLING") then return 1150.5 end
  if (dmgdesc == "*MANGLING*") then return 1250.5 end
  if (dmgdesc == "**MANGLING**") then return 1350.5 end
  if (dmgdesc == "***MANGLING***") then return 1450.5 end
  if (dmgdesc == "demolishing") then return 1550.5 end
  if (dmgdesc == "DEMOLISHING") then return 1650.5 end
  if (dmgdesc == "*DEMOLISHING*") then return 1750.5 end
  if (dmgdesc == "**DEMOLISHING**") then return 1850.5 end
  if (dmgdesc == "***DEMOLISHING***") then return 1950.5 end
  if (dmgdesc == "obliterating") then return 2100.5 end
  if (dmgdesc == "OBLITERATING") then return 2300.5 end
  if (dmgdesc == "*OBLITERATING*") then return 2500.5 end
  if (dmgdesc == "**OBLITERATING**") then return 2700.5 end
  if (dmgdesc == "***OBLITERATING***") then return 2900.5 end
  if (dmgdesc == "annihilating") then return 3100.5 end
  if (dmgdesc == "ANNIHILATING") then return 3300.5 end
  if (dmgdesc == "*ANNIHILATING*") then return 3500.5 end
  if (dmgdesc == "**ANNIHILATING**") then return 3700.5 end
  if (dmgdesc == "***ANNIHILATING***") then return 3950.5 end
  if (dmgdesc == "&gt;***ANNIHILATING***&lt;") then return 4300.5 end
  if (dmgdesc == "&gt;&gt;***ANNIHILATING***&lt;&lt;") then return 4754 end
  if (dmgdesc == "&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;") then return 5704.5 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;&lt;") then return 5902 end
  if (dmgdesc == "eradicating") then return 6200 end
  if (dmgdesc == "ERADICATING") then return 6500 end
  if (dmgdesc == "*ERADICATING*") then return 7000 end
  if (dmgdesc == "**ERADICATING**") then return 7500 end
  if (dmgdesc == "***ERADICATING***") then return 7800 end
  if (dmgdesc == "&gt;***ERADICATING***&lt;") then return 8200 end
  if (dmgdesc == "&gt;&gt;***ERADICATING***&lt;&lt;") then return 8500 end
  if (dmgdesc == "&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;") then return 9000 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;&lt;") then return 9500 end
  if (dmgdesc == "vaporizing") then return 10000 end
  if (dmgdesc == "VAPORIZING") then return 11000 end
  if (dmgdesc == "*VAPORIZING*") then return 12000 end
  if (dmgdesc == "**VAPORIZING**") then return 13000 end
  if (dmgdesc == "***VAPORIZING***") then return 14000 end
  if (dmgdesc == "&gt;***VAPORIZING***&lt;") then return 15000 end
  if (dmgdesc == "&gt;&gt;***VAPORIZING***&lt;&lt;") then return 16500 end
  if (dmgdesc == "&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;") then return 18000 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;&lt;") then return 19000 end
  if (dmgdesc == "destructive") then return 20000 end
  if (dmgdesc == "DESTRUCTIVE") then return 21000 end
  if (dmgdesc == "*DESTRUCTIVE*") then return 22000 end
  if (dmgdesc == "**DESTRUCTIVE**") then return 23000 end
  if (dmgdesc == "***DESTRUCTIVE***") then return 24000 end
  if (dmgdesc == "****DESTRUCTIVE****") then return 25000 end
  if (dmgdesc == "&gt;****DESTRUCTIVE****&lt;") then return 26000 end
  if (dmgdesc == "&gt;&gt;****DESTRUCTIVE****&lt;&lt;") then return 27000 end
  if (dmgdesc == "&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;") then return 28000 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;&lt;") then return 29000 end
  if (dmgdesc == "=&gt;&gt;&gt;&gt;***DESTRUCTIVE***&lt;&lt;&lt;&lt;=") then return 30000 end
  if (dmgdesc == "==&gt;&gt;&gt;&gt;**DESTRUCTIVE**&lt;&lt;&lt;&lt;==") then return 31000 end
  if (dmgdesc == "===&gt;&gt;&gt;&gt;*DESTRUCTIVE*&lt;&lt;&lt;&lt;===") then return 32000 end
  if (dmgdesc == "====&gt;&gt;&gt;&gt;DESTRUCTIVE&lt;&lt;&lt;&lt;====") then return 33000 end
  if (dmgdesc == "extreme") then return 34000 end
  if (dmgdesc == "EXTREME") then return 35000 end
  if (dmgdesc == "*EXTREME*") then return 36000 end
  if (dmgdesc == "**EXTREME**") then return 37000 end
  if (dmgdesc == "***EXTREME***") then return 38000 end
  if (dmgdesc == "****EXTREME****") then return 39000 end
  if (dmgdesc == "&gt;****EXTREME****&lt;") then return 40000 end
  if (dmgdesc == "&gt;&gt;****EXTREME****&lt;&lt;") then return 41000 end
  if (dmgdesc == "&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;") then return 42000 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;&lt;") then return 43000 end
  if (dmgdesc == "=&gt;&gt;&gt;&gt;***EXTREME***&lt;&lt;&lt;&lt;=") then return 44500 end
  if (dmgdesc == "==&gt;&gt;&gt;&gt;**EXTREME**&lt;&lt;&lt;&lt;==") then return 47000 end
  if (dmgdesc == "===&gt;&gt;&gt;&gt;*EXTREME*&lt;&lt;&lt;&lt;===") then return 48000 end
  if (dmgdesc == "====&gt;&gt;&gt;&gt;EXTREME&lt;&lt;&lt;&lt;====") then return 50000 end
  if (dmgdesc == "porcine") then return 51000 end
  if (dmgdesc == "PORCINE") then return 53000 end
  if (dmgdesc == "*PORCINE*") then return 55000 end
  if (dmgdesc == "**PORCINE**") then return 57000 end
  if (dmgdesc == "***PORCINE***") then return 59000 end
  if (dmgdesc == "&gt;***PORCINE***&lt;") then return 61000 end
  if (dmgdesc == "&gt;&gt;***PORCINE***&lt;&lt;") then return 65000 end
  if (dmgdesc == "&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;") then return 70000 end
  if (dmgdesc == "&gt;&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;&lt;") then return 75000 end
  if (dmgdesc == "divine") then return 80000 end
  if (dmgdesc == "daunting") then return 100000 end
  return -1
end

function DamageCounter.numtodmg(dmgamt)
  assert(dmgamt&gt;=0)
  assert(type(dmgamt)=="number")
  
  if (dmgamt == 0) then return "nil" 
  elseif (dmgamt &lt;= 2) then return "pathetic" 
  elseif (dmgamt &lt;= 4) then return "weak" 
  elseif (dmgamt &lt;= 8) then return "punishing" 
  elseif (dmgamt &lt;= 10) then return "surprising" 
  elseif (dmgamt &lt;= 14) then return "amazing" 
  elseif (dmgamt &lt;= 18) then return "astonishing" 
  elseif (dmgamt &lt;= 22) then return "mauling" 
  elseif (dmgamt &lt;= 26) then return "MAULING" 
  elseif (dmgamt &lt;= 30) then return "*MAULING*" 
  elseif (dmgamt &lt;= 34) then return "**MAULING**" 
  elseif (dmgamt &lt;= 38) then return "***MAULING***" 
  elseif (dmgamt &lt;= 42) then return "decimating" 
  elseif (dmgamt &lt;= 46) then return "DECIMATING" 
  elseif (dmgamt &lt;= 49) then return "*DECIMATING*" 
  elseif (dmgamt &lt;= 55) then return "**DECIMATING**" 
  elseif (dmgamt &lt;= 60) then return "***DECIMATING***" 
  elseif (dmgamt &lt;= 65) then return "devastating" 
  elseif (dmgamt &lt;= 70) then return "DEVASTATING" 
  elseif (dmgamt &lt;= 75) then return "*DEVASTATING*" 
  elseif (dmgamt &lt;= 80) then return "**DEVASTATING**" 
  elseif (dmgamt &lt;= 85) then return "***DEVASTATING***" 
  elseif (dmgamt &lt;= 90) then return "pulverizing" 
  elseif (dmgamt &lt;= 95) then return "PULVERIZING" 
  elseif (dmgamt &lt;= 100) then return "*PULVERIZING*" 
  elseif (dmgamt &lt;= 110) then return "**PULVERIZING**" 
  elseif (dmgamt &lt;= 120) then return "***PULVERIZING***" 
  elseif (dmgamt &lt;= 130) then return "maiming" 
  elseif (dmgamt &lt;= 140) then return "MAIMING" 
  elseif (dmgamt &lt;= 150) then return "*MAIMING*" 
  elseif (dmgamt &lt;= 160) then return "**MAIMING**" 
  elseif (dmgamt &lt;= 170) then return "***MAIMING***" 
  elseif (dmgamt &lt;= 180) then return "eviscerating" 
  elseif (dmgamt &lt;= 190) then return "EVISCERATING" 
  elseif (dmgamt &lt;= 200) then return "*EVISCERATING*" 
  elseif (dmgamt &lt;= 225) then return "**EVISCERATING**" 
  elseif (dmgamt &lt;= 250) then return "***EVISCERATING***" 
  elseif (dmgamt &lt;= 275) then return "mutilating" 
  elseif (dmgamt &lt;= 300) then return "MUTILATING" 
  elseif (dmgamt &lt;= 325) then return "*MUTILATING*" 
  elseif (dmgamt &lt;= 350) then return "**MUTILATING**" 
  elseif (dmgamt &lt;= 375) then return "***MUTILATING***" 
  elseif (dmgamt &lt;= 400) then return "disemboweling" 
  elseif (dmgamt &lt;= 425) then return "DISEMBOWELING" 
  elseif (dmgamt &lt;= 450) then return "*DISEMBOWELING*" 
  elseif (dmgamt &lt;= 475) then return "**DISEMBOWELING**" 
  elseif (dmgamt &lt;= 500) then return "***DISEMBOWELING***" 
  elseif (dmgamt &lt;= 540) then return "dismembering" 
  elseif (dmgamt &lt;= 574) then return "DISMEMBERING" 
  elseif (dmgamt &lt;= 606) then return "*DISMEMBERING*" 
  elseif (dmgamt &lt;= 675) then return "**DISMEMBERING**" 
  elseif (dmgamt &lt;= 730) then return "***DISMEMBERING***" 
  elseif (dmgamt &lt;= 769) then return "massacring" 
  elseif (dmgamt &lt;= 810) then return "MASSACRING" 
  elseif (dmgamt &lt;= 884) then return "*MASSACRING*" 
  elseif (dmgamt &lt;= 915) then return "**MASSACRING**" 
  elseif (dmgamt &lt;= 1000) then return "***MASSACRING***" 
  elseif (dmgamt &lt;= 1100) then return "mangling" 
  elseif (dmgamt &lt;= 1200) then return "MANGLING" 
  elseif (dmgamt &lt;= 1300) then return "*MANGLING*" 
  elseif (dmgamt &lt;= 1400) then return "**MANGLING**" 
  elseif (dmgamt &lt;= 1500) then return "***MANGLING***" 
  elseif (dmgamt &lt;= 1600) then return "demolishing" 
  elseif (dmgamt &lt;= 1700) then return "DEMOLISHING" 
  elseif (dmgamt &lt;= 1800) then return "*DEMOLISHING*" 
  elseif (dmgamt &lt;= 1900) then return "**DEMOLISHING**" 
  elseif (dmgamt &lt;= 2000) then return "***DEMOLISHING***" 
  elseif (dmgamt &lt;= 2200) then return "obliterating" 
  elseif (dmgamt &lt;= 2400) then return "OBLITERATING" 
  elseif (dmgamt &lt;= 2600) then return "*OBLITERATING*" 
  elseif (dmgamt &lt;= 2800) then return "**OBLITERATING**" 
  elseif (dmgamt &lt;= 3000) then return "***OBLITERATING***" 
  elseif (dmgamt &lt;= 3200) then return "annihilating" 
  elseif (dmgamt &lt;= 3400) then return "ANNIHILATING" 
  elseif (dmgamt &lt;= 3600) then return "*ANNIHILATING*" 
  elseif (dmgamt &lt;= 3800) then return "**ANNIHILATING**" 
  elseif (dmgamt &lt;= 4100) then return "***ANNIHILATING***" 
  elseif (dmgamt &lt;= 4500) then return "&gt;***ANNIHILATING***&lt;" 
  elseif (dmgamt &lt;= 5007) then return "&gt;&gt;***ANNIHILATING***&lt;&lt;" 
  elseif (dmgamt &lt;= 5901) then return "&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 5902) then return "&gt;&gt;&gt;&gt;***ANNIHILATING***&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 6200) then return "eradicating" 
  elseif (dmgamt &lt;= 6500) then return "ERADICATING" 
  elseif (dmgamt &lt;= 7000) then return "*ERADICATING*" 
  elseif (dmgamt &lt;= 7500) then return "**ERADICATING**" 
  elseif (dmgamt &lt;= 7800) then return "***ERADICATING***" 
  elseif (dmgamt &lt;= 8200) then return "&gt;***ERADICATING***&lt;" 
  elseif (dmgamt &lt;= 8500) then return "&gt;&gt;***ERADICATING***&lt;&lt;" 
  elseif (dmgamt &lt;= 9000) then return "&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 9500) then return "&gt;&gt;&gt;&gt;***ERADICATING***&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 10000) then return "vaporizing" 
  elseif (dmgamt &lt;= 11000) then return "VAPORIZING" 
  elseif (dmgamt &lt;= 12000) then return "*VAPORIZING*" 
  elseif (dmgamt &lt;= 13000) then return "**VAPORIZING**" 
  elseif (dmgamt &lt;= 14000) then return "***VAPORIZING***" 
  elseif (dmgamt &lt;= 15000) then return "&gt;***VAPORIZING***&lt;" 
  elseif (dmgamt &lt;= 16500) then return "&gt;&gt;***VAPORIZING***&lt;&lt;" 
  elseif (dmgamt &lt;= 18000) then return "&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 19000) then return "&gt;&gt;&gt;&gt;***VAPORIZING***&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 20000) then return "destructive" 
  elseif (dmgamt &lt;= 21000) then return "DESTRUCTIVE" 
  elseif (dmgamt &lt;= 22000) then return "*DESTRUCTIVE*" 
  elseif (dmgamt &lt;= 23000) then return "**DESTRUCTIVE**" 
  elseif (dmgamt &lt;= 24000) then return "***DESTRUCTIVE***" 
  elseif (dmgamt &lt;= 25000) then return "****DESTRUCTIVE****" 
  elseif (dmgamt &lt;= 26000) then return "&gt;****DESTRUCTIVE****&lt;" 
  elseif (dmgamt &lt;= 27000) then return "&gt;&gt;****DESTRUCTIVE****&lt;&lt;" 
  elseif (dmgamt &lt;= 28000) then return "&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 29000) then return "&gt;&gt;&gt;&gt;****DESTRUCTIVE****&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 30000) then return "=&gt;&gt;&gt;&gt;***DESTRUCTIVE***&lt;&lt;&lt;&lt;=" 
  elseif (dmgamt &lt;= 31000) then return "&lt;=&gt;&gt;&gt;&gt;**DESTRUCTIVE**&lt;&lt;&lt;&lt;&lt;=" 
  elseif (dmgamt &lt;= 32000) then return "&lt;==&gt;&gt;&gt;&gt;*DESTRUCTIVE*&lt;&lt;&lt;&lt;&lt;==" 
  elseif (dmgamt &lt;= 33000) then return "&lt;=&lt;=&gt;&gt;&gt;&gt;DESTRUCTIVE&lt;&lt;&lt;&lt;&lt;=&lt;=" 
  elseif (dmgamt &lt;= 34000) then return "extreme" 
  elseif (dmgamt &lt;= 35000) then return "EXTREME" 
  elseif (dmgamt &lt;= 36000) then return "*EXTREME*" 
  elseif (dmgamt &lt;= 37000) then return "**EXTREME**" 
  elseif (dmgamt &lt;= 38000) then return "***EXTREME***" 
  elseif (dmgamt &lt;= 39000) then return "****EXTREME****" 
  elseif (dmgamt &lt;= 40000) then return "&gt;****EXTREME****&lt;" 
  elseif (dmgamt &lt;= 41000) then return "&gt;&gt;****EXTREME****&lt;&lt;" 
  elseif (dmgamt &lt;= 42000) then return "&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 43000) then return "&gt;&gt;&gt;&gt;****EXTREME****&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 44500) then return "=&gt;&gt;&gt;&gt;***EXTREME***&lt;&lt;&lt;&lt;=" 
  elseif (dmgamt &lt;= 47000) then return "&lt;=&gt;&gt;&gt;&gt;**EXTREME**&lt;&lt;&lt;&lt;&lt;=" 
  elseif (dmgamt &lt;= 48000) then return "&lt;==&gt;&gt;&gt;&gt;*EXTREME*&lt;&lt;&lt;&lt;&lt;==" 
  elseif (dmgamt &lt;= 50000) then return "&lt;=&lt;=&gt;&gt;&gt;&gt;EXTREME&lt;&lt;&lt;&lt;&lt;=&lt;=" 
  elseif (dmgamt &lt;= 51000) then return "porcine" 
  elseif (dmgamt &lt;= 53000) then return "PORCINE" 
  elseif (dmgamt &lt;= 55000) then return "*PORCINE*" 
  elseif (dmgamt &lt;= 57000) then return "**PORCINE**" 
  elseif (dmgamt &lt;= 59000) then return "***PORCINE***" 
  elseif (dmgamt &lt;= 61000) then return "&gt;***PORCINE***&lt;" 
  elseif (dmgamt &lt;= 65000) then return "&gt;&gt;***PORCINE***&lt;&lt;" 
  elseif (dmgamt &lt;= 70000) then return "&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 75000) then return "&gt;&gt;&gt;&gt;***PORCINE***&lt;&lt;&lt;&lt;" 
  elseif (dmgamt &lt;= 80000) then return "divine" 
  elseif (dmgamt &lt;= 100000) then return "daunting" 
  else return "BIG NUMBER!!" end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Battle Tracker</name>
						<packageName></packageName>
						<script>BattleTracker = BattleTracker or {}
BattleTracker.MobHealth = BattleTracker.MobHealth or ""

function BattleTracker.UpdateMobAttackTable()
  local initmsg = "\nGroupies being aggied:\n"
  local msg = initmsg
  local mobcount = 0
  local rescuetarget = ""
  local rescuehp_pct = 0
  
  
  local tblmsg = {}

  for k,v in pairs(GroupiesUnderAttack) do
    table.insert(tblmsg,{v, k}) 
    msg = msg .. k .. " : " .. v .. " mob(s) attacking them\n" 
    mobcount = mobcount + v
    rescuetarget = k
  end

  if (GlobalVar.GUI) then
    BattleTracker.UpdateGUI(tblmsg)
  else
    if msg ~= initmsg then echo(msg) end
  end
  
  BattleTracker.TryRescue(mobcount, rescuetarget)
    
end


function BattleTracker.RoundOver()
  BattleTracker.UpdateMobAttackTable()
  GroupiesUnderAttack = {}
end

function BattleTracker.TryRescue(mobcount, rescuetarget)
  local my_char_name = firstToUpper(string.lower(StatTable.CharName))
    -- rescue paladin script
    
  if not GlobalVar.PaladinRescue then return end
  
  if (mobcount&gt;0) and StatTable.Class == "Paladin" and (StatTable.JoinedBoon or StatTable.SharedBoon) and tonumber(gmcp.Char.Vitals.lag) &lt;= 2 and (StatTable.current_health / StatTable.max_health) &gt; 0.50 and StatTable.Sanctuary then  

    rescuehp_pct = GlobalVar.GroupMates[rescuetarget].hp / GlobalVar.GroupMates[rescuetarget].maxhp
    
    if (mobcount == 1 and BattleTracker.MobHealth == "is in awful condition." and rescuetarget ~= my_char_name and rescuehp_pct &lt; 1 and GlobalVar.GroupMates[rescuetarget].class ~= "Pal") then TryAction("r " .. rescuetarget,2) end
    -- for easier runs, uncomment below
    if (StatTable.Level &lt;= 51 and mobcount == 1 and BattleTracker.MobHealth == "looks pretty hurt." and rescuetarget ~= my_char_name and rescuehp_pct &lt; 1 and GlobalVar.GroupMates[rescuetarget].class ~= "Pal") then TryAction("r " .. rescuetarget,2) end
    -- Trial run on self healing paladins
    if ((StatTable.current_health / StatTable.max_health) &lt; 0.6 and (StatTable.current_mana / StatTable.max_mana) &gt; 0.5) then TryCast("cast div",10) end
  end 
end

-- think we can remove this and the commented lines below but test first
--function CallbackSend(arg)
--  send(arg)
--end

function BattleTracker.UpdateGUI(tblmsg)
  if (#tblmsg&gt;0) then
    Victim1Label:hide()
    Victim2Label:hide()
    Victim3Label:hide()
    Victim1Label:setClickCallback("")
    Victim2Label:setClickCallback("")
    Victim3Label:setClickCallback("")
    
    
    if (#tblmsg&gt;1) then table.sort(tblmsg,rcompare) end
    
    if (#tblmsg &gt; 2) then
      Victim3Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[3][2]) .. ": " .. tblmsg[3][1] .. " mob(s) attacking&lt;/left&gt;")
      Victim3Label:show()
      --if (tblmsg[3][2]~=my_char_name) then Victim3Label:setClickCallback("CallbackSend","rescue " .. tblmsg[3][2]) end
      if (tblmsg[3][2]~=my_char_name) then Victim3Label:setClickCallback(function() send("r " .. tblmsg[3][2]) end) end
    end
    
    if (#tblmsg &gt; 1) then
      Victim2Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[2][2]) .. ": " .. tblmsg[2][1] .. " mob(s) attacking&lt;/left&gt;")
      Victim2Label:show()
      --if (tblmsg[2][2]~=my_char_name) then Victim2Label:setClickCallback("CallbackSend","r " .. tblmsg[2][2]) end
      if (tblmsg[2][2]~=my_char_name) then Victim2Label:setClickCallback(function() send("r " .. tblmsg[2][2]) end) end
    end
    
    Victim1Label:echo("&lt;left&gt;" .. firstToUpper(tblmsg[1][2]) .. ": " .. tblmsg[1][1] .. " mob(s) attacking&lt;/left&gt;")
    Victim1Label:show()
    --if (tblmsg[1][2]~=my_char_name) then Victim1Label:setClickCallback("CallbackSend","r " .. tblmsg[1][2]) end
    if (tblmsg[1][2]~=my_char_name) then Victim1Label:setClickCallback(function() send("r " .. tblmsg[1][2]) end) end
  end

end


</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Misc scripts</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>OnJunk</name>
						<packageName></packageName>
						<script>OnDropJunk = OnDropJunk or {}
OnDropJunk.isOpen = OnDropJunk.isOpen or false
OnDropJunk.len = OnDropJunk.len or 0
OnDropJunk.Queue = OnDropJunk.Queue or {}
OnDropJunk.isProcessing = OnDropJunk.isProcessing or false


function OnDropJunk.parseLine(line)
  -- First, trim any leading/trailing whitespace.
  local parsed_line = line:gsub("^%s*(.-)%s*$", "%1")
  
  -- Remove a leading parenthesized number, e.g. "( 8) "
  parsed_line = parsed_line:gsub("^%(%s*%d+%s*%)%s*", "")
  
  -- Remove the condition message enclosed in brackets, e.g. "[Pristine  ] "
  parsed_line = parsed_line:gsub("^%[[^%]]+%]%s*", "")
  
  -- Remove any parenthesized words (for example, "(Glowing)") if present.
  parsed_line = parsed_line:gsub("%((%a+)%) ", "")
  parsed_line = parsed_line:gsub("%((%a+ %a+)%) ", "")
  
  -- Remove any leading article
  parsed_line = RemoveArticle(parsed_line)
  parsed_line = parsed_line:gsub("^%s*%d+%s+", "")
  
  -- (Optionally) Trim again in case extra spaces remain.
  parsed_line = parsed_line:gsub("^%s*(.-)%s*$", "%1")

  return parsed_line
end

function OnDropJunk.sendNext()
  if #OnDropJunk.Queue &gt; 0 then
    send(OnDropJunk.Queue[1])
    table.remove(OnDropJunk.Queue, 1)
    -- Use tempTimer to wait (e.g., 1 second) before sending the next command.
    tempTimer(0.1, OnDropJunk.sendNext)
  else
    -- No more commands to process.
    OnDropJunk.isProcessing = false
  end
end

</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>PSI Scripts</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Psi Weapon Triggers</name>
						<packageName></packageName>
						<script>PSITrigger = PSITrigger or {}
PSITrigger.TriedLookUp = PSITrigger.TriedLookUp or {}
PSITrigger.OnlinePath = "https://raw.githubusercontent.com/raretypeoffox/vagonuth-package/main"
PSITrigger.DownloadPath = getMudletHomeDir()
PSITrigger.Filename = "/PsiTriggers.lua"

PSITrigger.PsiTriggers = {}
PSITrigger.GravitasMobs = PSITrigger.GravitasMobs or {} -- used for gravitas trigger

-- Psi Triggers README
-- Psi Triggers by default are downloaded from https://raw.githubusercontent.com/raretypeoffox/vagonuth-package/main/PsiTriggers.lua
-- This keeps your Psi Trigger list up to date without you having to manually manage it.
-- To add your own Psi Triggers or if the online list is out of date, add the triggers to the table below (PSIWeaponLookUp)
-- The triggers in the table below will overwrite the online trigger.

-- PSIWeaponLookup Table
-- Add groupmate's psi weapons in the table below.
-- Format:
-- ["CharName"] = {w1name = "full weapon's name", w1keyword = "keyword", w2name = "full weapon's name", w2keyword = "keyword"},
-- Note for Heroes: just use w1name / w1 keyword
local PSIWeaponLookup = {
  ["Xanur"] = {w1name = "Xanur's Masamune", w1keyword = "xanur.wield", w2name = "Xanur's Murasame", w2keyword = "xanur.off"},
  ["Forseti"] = {w1name = "Fleshslicer", w1keyword = "forseti", w2name="Fleshrender", w2keyword = "forseti"},
  ["NinehundreD"] = {w1name = "*-&lt;PAIN&gt;-*", w1keyword = "pain", w2name="*-&lt;AGONY&gt;-*", ws2keyword = "agony"},
  ["Vulkan"] = {w1name = "A Winged Angel", w1keyword = "lordkdr", w2name = "A Winged Devil", w2keyword = "lordkrd"},
  ["Eanruig"] = {w1name = "Chondrite Longsword", w1keyword = "eanruigw", w2name = "Chondrite Shortsword", w2keyword = "eanruigo"},
  ["Volexios"] = {w1name = "a quarterstaff that whispers 'Volexios'", w1keyword = "volexios"},
  }
  
  
  

function PSITrigger.Create(charname, weaponname, weaponkeyword)
  -- ^(.*) clatters to the ground!$
  -- ^You get (.*) from corpse of
  -- ^(.*) falls to the ground, lifeless.
  
  -- TODO add this trigger: You need to wield a lighter weapon in your offhand.
  local TriggerID = charname .. weaponname
  print("CreatePsiTrigger called: ", charname, weaponname, weaponkeyword)

  if charname == StatTable.CharName then
    safeTempTrigger(TriggerID .. "A", weaponname .. " clatters to the ground!", function() send("get '" .. weaponkeyword .. "'"); send("wear '" .. weaponkeyword .. "'") end, "begin")
    safeTempTrigger(TriggerID .. "B", "You get " .. weaponname .. " from corpse of ", function() send("wear '" .. weaponkeyword .. "'") end, "begin")
    safeTempTrigger(TriggerID .. "C", weaponname .. " falls to the ground, lifeless.", function() send("get '" .. weaponkeyword .. "'"); send("wear '" .. weaponkeyword .. "'") end, "begin")
    safeTempTrigger(TriggerID .. "D", "gives you several items.", function() send("wear '" .. weaponkeyword .. "'") end, "substring")
    safeTempTrigger(TriggerID .. "E", "You must be wielding two weapons to use this spell!", function() send("wear '" .. weaponkeyword .. "'") end, "begin")
    safeTempTrigger(TriggerID .. "F", "gives you " .. weaponname .. ".", function() send("wear '" .. weaponkeyword .. "'") end, "substring")
    
  else
    safeTempTrigger(TriggerID .. "A", weaponname .. " clatters to the ground!", function() send("get '" .. weaponkeyword .. "'"); send("give '" .. weaponkeyword .. "'" .. " " .. charname) end, "begin")
    safeTempTrigger(TriggerID .. "B", "You get " .. weaponname .. " from corpse of ", function() send("give '" .. weaponkeyword .. "'" .. " " .. charname) end, "begin")
    safeTempTrigger(TriggerID .. "C", weaponname .. " falls to the ground, lifeless.", function() send("get '" .. weaponkeyword .. "'"); send("give '" .. weaponkeyword .. "'" .. " " .. charname) end, "begin")
  end

end

-- Called by GMCP GroupUpdate when there's a new Psi in the gorup
function PSITrigger.Update()
  if not GlobalVar or not GlobalVar.GroupMates then return false end

  for char, chartbl in pairs(GlobalVar.GroupMates) do
    if chartbl.class == "Psi" then
      -- Iterates over every Psi in the group that's not me

      -- Record that we've looked up this Psi already
      PSITrigger.TriedLookUp[char] = true

      if PSITrigger.PsiTriggers[char] then -- If we have weapon details for this Psi, create a trigger
        local w1name, w1keyword = PSITrigger.PsiTriggers[char].w1name or nil, PSITrigger.PsiTriggers[char].w1keyword or nil
        local w2name, w2keyword = PSITrigger.PsiTriggers[char].w2name or nil, PSITrigger.PsiTriggers[char].w2keyword or nil

        if w1name and w1keyword then
          PSITrigger.Create(char, w1name, w1keyword)
        end
        
        if w2name and w2keyword then
          PSITrigger.Create(char, w2name, w2keyword)
        end
        
      end
    end
  end -- end for loop
end


function PSITrigger.Load()
  local PsiTriggersFromFile = {}
  if io.exists(PSITrigger.DownloadPath .. PSITrigger.Filename) then
    table.load(PSITrigger.DownloadPath .. PSITrigger.Filename, PsiTriggersFromFile)
    PSITrigger.PsiTriggers = deepcopy(PsiTriggersFromFile)
  end
  for char_name, psitrigger in pairs(PSIWeaponLookup) do
    PSITrigger.PsiTriggers[char_name] = psitrigger
  end
  PSITrigger.TriedLookUp = {}
  PSITrigger.Update()
end

function PSITrigger.DownloadFile()
    if not io.exists(PSITrigger.DownloadPath) then lfs.mkdir(PSITrigger.DownloadPath) end
    PSITrigger.Downloading=true
    downloadFile(PSITrigger.DownloadPath .. PSITrigger.Filename, PSITrigger.OnlinePath .. PSITrigger.Filename)
end

function PSITrigger.onFileDownloaded(event, ...)
  if event == "sysDownloadDone" and PSITrigger.Downloading then
      local file = arg[1]
      if string.ends(file,PSITrigger.Filename) then
          PSITrigger.Downloading=false
          PSITrigger.Load()
      end
  end
end

PSITrigger.Load()
PSITrigger.downloadFileHandler = safeEventHandler("PSIFileDownloadFileHandler", 'sysDownloadDone', "PSITrigger.onFileDownloaded")
safeTempTimer("PsiTriggerDownloadTimer", 2, [[PSITrigger.DownloadFile()]])




</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>AutoEquip Blindfold</name>
						<packageName></packageName>
						<script>-- if exporting, requires:
-- + SafeMudlet Script
-- + raiseEvent("CustomGameLoop") somewhere (timer for example, I use every 5 seconds)

AutoEquipBlindfold = AutoEquipBlindfold or {}

AutoEquipBlindfold.Init = AutoEquipBlindfold.Init or false
AutoEquipBlindfold.Count = AutoEquipBlindfold.Count or 0
AutoEquipBlindfold.isEquipped = AutoEquipBlindfold.isEquipped or false

-- optional args, comment out if not using
local MindsEyeBagName = "loot"
local MindsEyeAltGear = "crown pain wire shards glass"

function AutoEquipBlindfold.Equip()
  local isAsleep = (StatTable.Position == "Sleep" and true or false)
  
  if isAsleep then send("rest") end
  
  if MindsEyeBagName then
    send("get 'yorimandil blindfold' '" .. MindsEyeBagName .. "'")
  end
  
  send("wear 'yorimandil blindfold'")
  
  if MindsEyeBagName and MindsEyeAltGear then
    send("put '" .. MindsEyeAltGear .. "' '" .. MindsEyeBagName .. "'")
  end
  
  if isAsleep then send("sleep") end
end

function AutoEquipBlindfold.Remove()
  local isAsleep = (StatTable.Position == "Sleep" and true or false)
  
  if isAsleep then send("rest") end
  
  send("remove 'yorimandil blindfold'")
  
  if MindsEyeBagName then 
    send("put 'yorimandil blindfold' '" .. MindsEyeBagName .. "'")
    if MindsEyeAltGear then
      send("get '" .. MindsEyeAltGear .. "' '" .. MindsEyeBagName .. "'")
      send("wear '" .. MindsEyeAltGear .. "'")
    end
  end

  if isAsleep then send("sleep") end
  
end

function AutoEquipBlindfold.Check()
  if not StatTable.MindsEye then
    if AutoEquipBlindfold.Init then
      safeKillTrigger("AutoEquipBlindfold.Wear")
      safeKillTrigger("AutoEquipBlindfold.Worn")
      safeKillTrigger("AutoEquipBlindfold.Worn2")
      safeKillTrigger("AutoEquipBlindfold.Removed")
      safeKillTrigger("AutoEquipBlindfoldPickup")
      safeKillAlias("AutoEquipBlindfoldAblut")
      AutoEquipBlindfold.Init = false
    end
    return 
  end

  if not AutoEquipBlindfold.Init then
    safeTempTrigger("AutoEquipBlindfold.Wear", "You wear Yorimandil's Blindfold on your head.", function() AutoEquipBlindfold.isEquipped = true end, "begin")
    safeTempTrigger("AutoEquipBlindfold.Worn", "&lt;worn on head&gt;      Yorimandil's Blindfold", function() AutoEquipBlindfold.isEquipped = true end, "begin")
    safeTempTrigger("AutoEquipBlindfold.Worn2", "&lt;worn on head&gt;      (Magical) Yorimandil's Blindfold", function() AutoEquipBlindfold.isEquipped = true end, "begin")
    safeTempTrigger("AutoEquipBlindfold.Removed", "You stop using Yorimandil's Blindfold.", function() AutoEquipBlindfold.isEquipped = false end, "begin")
    safeTempTrigger("AutoEquipBlindfoldPickup", "You get Yorimandil's Blindfold from corpse of " .. StatTable.CharName, function() if AutoEquipBlindfold.isEquipped then AutoEquipBlindfold.Remove() end; end, "begin")
    safeTempAlias("AutoEquipBlindfoldAblut", "^c(ast)? ablut", function() if AutoEquipBlindfold.isEquipped then AutoEquipBlindfold.Remove() end; send("cast ablution") end)
    AutoEquipBlindfold.Init = true
  end

  if AutoEquipBlindfold.Count &lt; 0 then
    AutoEquipBlindfold.Count = AutoEquipBlindfold.Count + 1
    return
  end
  
  if AutoEquipBlindfold.isEquipped == false and StatTable.MindsEye &gt; 50 then
    AutoEquipBlindfold.Equip()
    AutoEquipBlindfold.Count = -10 -- waits 10 calls of CustomGameLoop (about 5 seconds per loop or 50 seconds in total)
  elseif AutoEquipBlindfold.isEquipped and StatTable.MindsEye &lt; 2 then
    AutoEquipBlindfold.Remove()
    AutoEquipBlindfold.Count = -10 -- waits 10 calls of CustomGameLoop (about 5 seconds per loop or 50 seconds in total)
  end

end

safeEventHandler("AutoEquipBlindfold", "CustomGameLoop", "AutoEquipBlindfold.Check", false)
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Psi Kinetic Enhancers</name>
						<packageName></packageName>
						<script>KineticEnhancers = {
  "StunningWeapon",
  "DistractingWeapon",
  "DisablingWeapon",
  "RestrictingWeapon",
  "FellingWeapon",
  "ConsciousWeapon",
  "IntelligentWeapon",
}

-- hack for now
GlobalVar.KineticEnhancerOne = GlobalVar.KineticEnhancerOne or nil
GlobalVar.KineticEnhancerTwo = GlobalVar.KineticEnhancerTwo or nil

function checkKineticEnhancers()
  local count = 0

  for _, kin in ipairs(KineticEnhancers) do
    if StatTable[kin] ~= nil then
      count = count + 1
      if count &gt;= 2 then
        return 2  -- Early return if there are at least two spells
      end
    end
  end

  return count
end

-- Function to match input string to one of the KineticEnhancers
function matchKineticEnhancer(input)
    if not input then return nil end
    
    -- Normalize the input by removing quotes and extra spaces, then converting to lowercase
    local normalizedInput = input:lower():gsub("['\"]", ""):gsub("%s+", "")

    -- Iterate through each value in KineticEnhancers
    for _, enhancer in ipairs(KineticEnhancers) do
        -- Normalize the enhancer value by removing spaces and converting to lowercase
        local normalizedEnhancer = enhancer:lower():gsub("%s+", "")

        -- Check for a partial match
        if normalizedEnhancer:find(normalizedInput) then
            return enhancer
        end
    end

    -- Return nil if no match is found
    return nil
end

-- Called by GameLoop is you're a Psi
function castKineticEnhancers()
  if Battle.Combat then return end
  if StatTable.Level &lt;= 51 and StatTable.SubLevel &lt; 500 then return end -- first spell is at hero 500
  if StatTable.current_mana &lt; 5000 then return end -- set a minimum amount of mana
  
  local enhancersCount = checkKineticEnhancers()

  if enhancersCount == 2 or (enhancersCount == 1 and StatTable.Level == 51) then return end

  if GlobalVar.KineticEnhancerOne and matchKineticEnhancer(GlobalVar.KineticEnhancerOne) and not StatTable[matchKineticEnhancer(GlobalVar.KineticEnhancerOne)] then
    TryAction("cast '" .. GlobalVar.KineticEnhancerOne .. "'", 5)
    return  
  end
  
  if GlobalVar.KineticEnhancerTwo and matchKineticEnhancer(GlobalVar.KineticEnhancerTwo) and not StatTable[matchKineticEnhancer(GlobalVar.KineticEnhancerTwo)] then
    TryAction("cast '" .. GlobalVar.KineticEnhancerTwo .. "'", 5)
    return  
  end
  
end





    


</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>OnMobDeath</name>
					<packageName></packageName>
					<script>-- Dependencies: TryAction, pdebug(), splitstring

MobDeath = MobDeath or {}
MobDeath.Queue = MobDeath.Queue or {}
MobDeath.LastCommand = MobDeath.LastCommand or ""

MobDeath.CommandCheck = MobDeath.CommandCheck or {}

function MobDeath.UpdateCommandCheck()
  MobDeath.CommandCheck["cast sanctuary"] = StatTable.Sanctuary or 0
  MobDeath.CommandCheck["cast 'iron monk'"] = StatTable.Sanctuary or 0
  if (StatTable.Sanctuary == "continuous") then MobDeath.CommandCheck["cast sanctuary"] = 99 end
  MobDeath.CommandCheck["cast frenzy"] = StatTable.Frenzy or 0
  MobDeath.CommandCheck["cast mystical"] = StatTable.Mystical or 0
  MobDeath.CommandCheck["cast 'death shroud'"] = StatTable.DeathShroud or 0
  MobDeath.CommandCheck["cast 'glorious conquest'"] = StatTable.GloriousConquest or 0
  MobDeath.CommandCheck["cast 'artificer blessing'"] = StatTable.ArtificerBlessing or 0
  MobDeath.CommandCheck["cast discordia"] = StatTable.Discordia or 0

  MobDeath.CommandCheck["sneak"] = StatTable.Sneak or 0
  MobDeath.CommandCheck["move hidden"] = StatTable.MoveHidden or 0
  MobDeath.CommandCheck["cast intervention"] = StatTable.Intervention or 0
  MobDeath.CommandCheck["cast 'ether link'"] = StatTable.EtherLink or 0
  MobDeath.CommandCheck["cast 'ether warp'"] = StatTable.EtherWarp or 0
  
  MobDeath.CommandCheck["cast 'dagger hand'"] = StatTable.DaggerHand or 0
  MobDeath.CommandCheck["cast 'stone fist'"] = StatTable.StoneFist or 0
  
  MobDeath.CommandCheck["cast 'gravitas'"] = StatTable.Gravitas or 0
  MobDeath.CommandCheck["cast 'hive mind'"] = StatTable.HiveMind or 0
  
  -- Paladin
  if (GlobalVar.PrayerName ~= "") then
    MobDeath.CommandCheck["cast prayer '" .. GlobalVar.PrayerName .. "'"] = StatTable.Prayer or 0
  end
  MobDeath.CommandCheck["cast fervor"] = StatTable.Fervor or 0
  if (StatTable.Fervor == nil and StatTable.Frenzy ~= nil) then MobDeath.CommandCheck["cast fervor"] = StatTable.Frenzy end
  MobDeath.CommandCheck["cast 'holy zeal'"] = StatTable.HolyZeal or 0
  
  --Psi
  MobDeath.CommandCheck["cast 'kinetic chain'"] = StatTable.KineticChain or 0
  MobDeath.CommandCheck["cast 'stunning weapon'"] = StatTable.StunningWeapon or 0
  MobDeath.CommandCheck["cast savvy"] = StatTable.Savvy or 0
  
  -- Rogue-likes
  MobDeath.CommandCheck["alertness"] = StatTable.Alertness or 0
end



function OnMobDeath()

    MobDeath.UpdateCommandCheck()
    
    -- TODO better implementation
    if (StatTable.Class == "Paladin" and StatTable.Oath ~= "" and GlobalVar.PaladinRescue) then
      if (StatTable.Level == 51 and StatTable.SubLevel &gt;= 250 and StatTable.JoinedBoon == nil and StatTable.HeroicBoon == nil and StatTable.Foci) then TryAction("cast 'joined boon'",30) end
      if (StatTable.Level == 125 and StatTable.SharedBoon == nil and StatTable.ValorousBoon == nil and StatTable.FinalBoon == nil and StatTable.Foci) then TryAction("cast 'shared boon'",30) end
    end

    if (MobDeath.LastCommand ~= "") then
      if (MobDeath.CommandCheck[MobDeath.LastCommand] == 0) then
        printGameMessageVerbose("OnMobDeath", "Trying again: " .. MobDeath.LastCommand)
        OnMobDeathQueuePriority(MobDeath.LastCommand)
      end
      MobDeath.LastCommand = ""
    end
    
    if #MobDeath.Queue &lt; 1 then
      return -- Queue is empty, return
    end

    -- Check if the last command was a) in our CommandCheck list and b) if it was not cast successfully. If both true, try it again
    if (MobDeath.CommandCheck[MobDeath.Queue[1]] ~= nil and tonumber(MobDeath.CommandCheck[MobDeath.Queue[1]]) and MobDeath.CommandCheck[MobDeath.Queue[1]] &gt; 0) then
      pdebug("OnMobDeath(): You already have " .. MobDeath.Queue[1] .. " - not casting again")
      table.remove(MobDeath.Queue, 1)
      OnMobDeath()
      return
    end
    
    -- Quick check to see if we still need to cast certain spells
    if MobDeath.Queue[1] == "cast 'cure blindness'" and not StatTable.Blindness then
      table.remove(MobDeath.Queue, 1)
      return
    end
    
    
    -- We have something in the queue and we passed our checks, let's try casting it!
    pdebug("OnMobDeath(): Queue is positive with # of entries: " .. #MobDeath.Queue)
    pdebug("OnMobDeath(): Next command: " .. MobDeath.Queue[1])
    printGameMessageVerbose("OnMobDeath", "Trying: " .. MobDeath.Queue[1])
    MobDeath.LastCommand = MobDeath.Queue[1]
    TryAction(MobDeath.LastCommand,3)
    table.remove(MobDeath.Queue, 1)
      
end

function OnMobDeathQueuePriority(command)
  pdebug("OnMobDeathQueuePriority(): Command added to top of queue: " .. command)
  printGameMessageVerbose("OnMobDeath", command .. " added to queue (priority)")
  table.insert(MobDeath.Queue, 1, command)
end

function OnMobDeathQueueClear(echo)
  if echo ~= false then echo = true end
  pdebug("OnMobDeathQueueClear()")
  if echo then printGameMessageVerbose("OnMobDeath", "queue cleared") end
  MobDeath.Queue = {}
  MobDeath.LastCommand = ""
end

function OnMobDeathQueue(command)
  pdebug("OnMobDeathQueue(): Command added to bottom of queue: " .. command)
  printGameMessageVerbose("OnMobDeath", command .. " added to queue")
  table.insert(MobDeath.Queue, command)
end

function OnMobDeathWake()
    if (#MobDeath.Queue &gt; 0) then
      if MobDeath.CommandCheck[MobDeath.Queue[1]] == nil then
        pdebug("OnMobDeathWake(): next command a self spell, called OnMobDeath()")
        OnMobDeath()
      end
    end
end
</script>
					<eventHandlerList>
						<string>OnMobDeath</string>
					</eventHandlerList>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>New script group</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
					</ScriptGroup>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CheckMissing</name>
					<packageName></packageName>
					<script>function CheckMissingGtell()
  local MissingPlayers = CheckMissing()

  if (next(MissingPlayers) == nil) then
    send("gtell |BW|All players accounted for!|N|")
  else
    local missing = ""
    for i=1,#MissingPlayers do
      missing = missing .. MissingPlayers[i] .. " "
    end
    send("gtell |BW|Missing: |Y|" .. missing .. "|N|")
  end
end

function CheckMissingEcho()
  local MissingPlayers = CheckMissing()
  
  if (next(MissingPlayers) == nil) then
    cecho("GroupChat","&lt;yellow&gt;All players accounted for!\n")
  else
    local missing = ""
      for i=1,#MissingPlayers do
        missing = missing .. MissingPlayers[i] .. " "
      end
      cecho("GroupChat","&lt;white&gt;Missing: &lt;yellow&gt;" .. missing .. "\n")
  end

end

function CheckMissing()

  local RoomPlayers = {}
  local GroupPlayers = {}
  local MissingPlayers = {}
  
  -- Add all groupmates to GroupPlayers
  for k,v in ipairs(gmcp.Char.Group.List) do
    table.insert(GroupPlayers,string.lower(v.name))
  end
  
  -- Only add Playable Characters in room to RoomPlayers
  for k,v in pairs(gmcp.Room.Players) do
    if (tonumber(v.name) == nil) then
      table.insert(RoomPlayers,string.lower(v.name))
    end
  end
  
  -- For Each GroupMate, check if they are in the room
  --for k,v in pairs(GroupPlayers) do
  for i=1,#GroupPlayers do
    if (ArrayHasValue(RoomPlayers,GroupPlayers[i]) == false) then
      table.insert(MissingPlayers,GroupPlayers[i])
    end
  end
  
  return MissingPlayers
end


</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>RunStats</name>
					<packageName></packageName>
					<script>-- rewrite 24 Nov 23

RunStats = RunStats or {}

-- Run XP
RunStats.CharName = RunStats.CharName or ""

RunStats.RunXp = RunStats.RunXp or 0
RunStats.RunKills = RunStats.RunKills or 0
RunStats.RunLevels = RunStats.RunLevels or 0
RunStats.RunHP = RunStats.RunHP or 0
RunStats.RunMP = RunStats.RunMP or 0
RunStats.RunMV = RunStats.RunMV or 0
RunStats.RunPrac = RunStats.RunPrac or 0
RunStats.RunHealXp = RunStats.RunHealXp or 0
RunStats.RunStartLevel = RunStats.RunStartLevel or 0
RunStats.SpellLevelProcs = RunStats.SpellLevelProcs or 0
if (RunStats.RunStartLevel == 0) then
  tempTimer(15, function() if StatTable.Level ~= nil and StatTable.Level &lt; 51 then RunStats.RunStartLevel = StatTable.Level else RunStats.RunStartLevel = StatTable.SubLevel end end)
end

if GlobalVar.GUI then
  RunXPLabel:echo(RunStats.RunXp)
  RunKillsLabel:echo(RunStats.RunKills)
  RunLevelsLabel:echo(RunStats.RunLevels .. " Levels")
  RunStatsLabel:echo(RunStats.RunHP .. "HP / " .. RunStats.RunMP .. "MP" )
end

-- TODO: consider a check on StatTable.CharName to deal with gmcp issues

-- TODO: will be rewriting SessionXP to track seperately for each character
-- We will be using an array of tables, one for each character, eg., RunStats.SessionsXP[CharName] = 0
RunStats.SessionXp = RunStats.SessionXp or {}

function RunStats.SessionXpInit(char_name)
  if RunStats.SessionXp[char_name] then return false; end

  RunStats.SessionXp[char_name] = {}
  RunStats.SessionXp[char_name].SessionXp = 0
  RunStats.SessionXp[char_name].SessionKills = 0
  RunStats.SessionXp[char_name].SessionLevels = 0
  RunStats.SessionXp[char_name].SessionHP = 0
  RunStats.SessionXp[char_name].SessionMP = 0
  RunStats.SessionXp[char_name].SessionMV = 0
  RunStats.SessionXp[char_name].SessionPrac = 0
  RunStats.SessionXp[char_name].SessionHealXp = 0
  RunStats.SessionXp[char_name].SessionStartLevel = 0

  return true
end


function InitSessionXPOnLogin()
  -- Initialize the Session XP table if this is our first time logging in with this character this session
  RunStats.SessionXpInit(StatTable.CharName)

  -- Set the characters session start level if it hasn't been set yet
  if (RunStats.SessionXp[StatTable.CharName].SessionStartLevel == 0) then
    safeTempTimer("RunStatsInit", 5, function() 
      if StatTable.Level ~= nil and StatTable.Level &lt; 51 then 
        RunStats.SessionXp[StatTable.CharName].SessionStartLevel = StatTable.Level 
      else 
        RunStats.SessionXp[StatTable.CharName].SessionStartLevel = StatTable.SubLevel 
      end
    end)
  end
  
end


safeEventHandler("InitSessionXPOnLoginID", "CustomProfileInit", "InitSessionXPOnLogin", false)
safeEventHandler("KillRunStatsInitOnDisco", "sysDisconnectionEvent", function() RunStats.Reset(); safeKillTimer("RunStatsInit"); safeKillTimer("RunStatsInit2") end, false)


function RunStats.Reset()
  RunStats.CharName = StatTable.CharName
  local char_name = RunStats.CharName

  if not RunStats.SessionXp[char_name]  then RunStats.SessionXpInit(char_name) end
  RunStats.SessionXp[char_name].SessionXp = RunStats.SessionXp[char_name].SessionXp + RunStats.RunXp
  RunStats.SessionXp[char_name].SessionKills = RunStats.SessionXp[char_name].SessionKills + RunStats.RunKills
  RunStats.SessionXp[char_name].SessionLevels = RunStats.SessionXp[char_name].SessionLevels + RunStats.RunLevels
  RunStats.SessionXp[char_name].SessionHP = RunStats.SessionXp[char_name].SessionHP + RunStats.RunHP
  RunStats.SessionXp[char_name].SessionMP = RunStats.SessionXp[char_name].SessionMP + RunStats.RunMP
  RunStats.SessionXp[char_name].SessionMV = RunStats.SessionXp[char_name].SessionMV + RunStats.RunMV
  RunStats.SessionXp[char_name].SessionPrac = RunStats.SessionXp[char_name].SessionPrac + RunStats.RunPrac
  RunStats.SessionXp[char_name].SessionHealXp = RunStats.SessionXp[char_name].SessionHealXp + RunStats.RunHealXp
  RunStats.RunXp = 0
  RunStats.RunKills = 0
  RunStats.RunLevels = 0
  RunStats.RunHP = 0
  RunStats.RunMP = 0
  RunStats.RunMV = 0
  RunStats.RunPrac = 0
  RunStats.RunHealXp = 0
  RunStats.SpellLevelProcs = 0
  tempTimer(5, function() if StatTable.Level ~= nil and StatTable.Level &lt; 51 then RunStats.RunStartLevel = StatTable.Level else RunStats.RunStartLevel = StatTable.SubLevel end end)
  RunXPLabel:echo(RunStats.RunXp)
  RunKillsLabel:echo(RunStats.RunKills)
  RunLevelsLabel:echo(RunStats.RunLevels .. " Levels")
  RunStatsLabel:echo(RunStats.RunHP .. "HP / " .. RunStats.RunMP .. "MP" )
end

safeEventHandler("RunResetOnInit", "CustomProfileInit", RunStats.Reset, false)

function RunStats.Report()
  send("gtell |R|XP Gained: |BP|".. format_int(RunStats.RunXp) .. "|R| Kills: |BW|".. RunStats.RunKills .. " |R|HP/MP Gained: |BW|" .. RunStats.RunHP .. "|N|/|BW|" .. RunStats.RunMP .. "|R| Levels: |BW|".. RunStats.RunLevels .. "|N|")
end

function RunStats.Echo()
  print("XP Gained: ".. format_int(RunStats.RunXp) .. " Kills: ".. RunStats.RunKills .. " HP/MP Gained: " .. RunStats.RunHP .. "/" .. RunStats.RunMP .. " Levels: ".. RunStats.RunLevels .. "\n")
end

function RunStats.ReportSession(char_name)
  local char_name = char_name or StatTable.CharName
  send("gtell |R|SESSION XP Gained: |BP|".. format_int(RunStats.SessionXp[char_name].SessionXp + RunStats.RunXp) .. "|R| Kills: |BW|".. (RunStats.SessionXp[char_name].SessionKills + RunStats.RunKills) .. " |R|HP/MP Gained: |BW|" .. (RunStats.SessionXp[char_name].SessionHP + RunStats.RunHP) .. "|N|/|BW|" .. (RunStats.SessionXp[char_name].SessionMP + RunStats.RunMP) .. "|R| Levels: |BW|".. RunStats.SessionXp[char_name].SessionLevels + RunStats.RunLevels .. "|N|")
end

function RunStats.EchoSession(char_name)
  local char_name = char_name or StatTable.CharName
  print(string.format("%-15sSESSION Stats: XP: %s Kills: %d HP/MP Gained: %d/%d Levels: %d\n",
                    char_name,
                    format_int(RunStats.SessionXp[char_name].SessionXp + RunStats.RunXp),
                    RunStats.SessionXp[char_name].SessionKills + RunStats.RunKills,
                    RunStats.SessionXp[char_name].SessionHP + RunStats.RunHP,
                    RunStats.SessionXp[char_name].SessionMP + RunStats.RunMP,
                    RunStats.SessionXp[char_name].SessionLevels + RunStats.RunLevels))
end

function RunStats.EchoSessionAll()
  local default_formatting = "%-15s%10s%10s%10s%15s%15s\n"
  cecho(string.format(default_formatting, "Character", "XP Earned", "Kills", "Levels", "HP/MP Gains", "Avg Gains"))
  cecho("----------------------------------------------------------------------------\n")
  
  for char_name, _ in pairs(RunStats.SessionXp) do
      if RunStats.SessionXp[char_name].SessionXp &gt; 0 or StatTable.CharName == char_name then
        
        local formatStr = 
                      (string.format(default_formatting,
                      char_name,
                      
                      format_int(RunStats.SessionXp[char_name].SessionXp + tonumber((StatTable.CharName == char_name) and RunStats.RunXp or 0)),
                      
                      RunStats.SessionXp[char_name].SessionKills + tonumber((StatTable.CharName == char_name) and RunStats.RunKills or 0),
                      
                      RunStats.SessionXp[char_name].SessionLevels + tonumber((StatTable.CharName == char_name) and RunStats.RunLevels or 0),                
                      
                      string.format("%s / %s", RunStats.SessionXp[char_name].SessionHP + tonumber((StatTable.CharName == char_name) and RunStats.RunHP or 0),
                      RunStats.SessionXp[char_name].SessionMP + tonumber((StatTable.CharName == char_name) and RunStats.RunMP or 0)),
                      
                      ((RunStats.SessionXp[char_name].SessionLevels + tonumber((StatTable.CharName == char_name) and RunStats.RunLevels or 0) &gt; 0) and
                      
                      string.format("%.2f / %.2f", 
                      (RunStats.SessionXp[char_name].SessionHP + tonumber((StatTable.CharName == char_name) and RunStats.RunHP or 0))/
                      (RunStats.SessionXp[char_name].SessionLevels + tonumber((StatTable.CharName == char_name) and RunStats.RunLevels or 0)),
                      
                      
                      (RunStats.SessionXp[char_name].SessionMP + tonumber((StatTable.CharName == char_name) and RunStats.RunMP or 0))/
                      (RunStats.SessionXp[char_name].SessionLevels + tonumber((StatTable.CharName == char_name) and RunStats.RunLevels or 0))) 
                      or "0.00 / 0.00")                 
                      
                      
                      ))
        cecho(formatStr)
      end
  end
end



</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>PreachUp Script</name>
					<packageName></packageName>
					<script>CustomPreachup = {
["Xanur"] = "cast 'minds eye'",
--["Zephyra"] = "cast solitude",
["Qhax"] = "cast prayer soothe",
}

CustomFrenzyList = {
  --"Azarael",
  "Thistleshade",
  "Bruzzorli",
}

function CustomMDAYPreachup()
  CustomPreachup["Xanur"] = "cast 'minds eye'" .. cs .."cast steel olodagh" .. cs .. "cast steel glugruk" .. cs .. "cast steel azalad" .. cs .. "cast steel zallah"
  CustomPreachup["Neuralisk"] = "cast steel zhonya" .. cs .. "cast steel xykoi" .. cs .. "cast steel jayla" .. cs .. "cast steel forgeflare" .. cs .. "cast steel markath" .. cs .. "cast steel zeno"
  CustomPreachup["Kindroth"] = "cast barkskin olodagh" .. cs .. "cast barkskin glugruk" .. cs .. "cast barkskin azalad" .. cs .. "cast barkskin zallah"
  CustomPreachup["Ilthuryn"] =  "cast barkskin zhonya" .. cs .. "cast barkskin xykoi" .. cs .. "cast barkskin jayla" .. cs .. "cast barkskin forgeflare"
  CustomPreachup["Vagouth"] =  "cast barkskin zapwick" .. cs .. "cast barkskin zapwizz" .. cs .. "cast barkskin zapwow" .. cs .. "cast barkskin aeryn"
  CustomPreachup["Aphroros"] = "cast barkskin zeno" .. cs .. "cast barkskin markath" .. cs .. "cast barkskin zephyra" .. cs .. "cast barkskin ayas"
  CustomPreachup["Forgeflare"] = "stance veil" .. cs .. "bt enter" .. cs .. "bt deepen" .. cs .. "bt deepen"
  CustomPreachup["Xamur"] = "cast frenzy"
end



function PreachUp()
  if StatTable.Position ~= "Stand" then send("stand") end
  
  if SafeArea() then
    cecho("&lt;white&gt;AutoPreachUp Script&lt;ansi_white&gt;: attempting to get spells from bots, checking if bots are on this plane")
    TryLook()
    getOnlinePlayers()
    tempTimer(2, function() LookForPreachupBots() end)
  end
  
  if IsMDAY() then CustomMDAYPreachup() end
  
  raiseEvent("OnPreachUp")
end

function PreachUpAutoMonitor()
  local monitor_name = nil
  local is_bodyguard = StatTable.Class == "Bodyguard"
  local is_berserker = StatTable.Class == "Berserker"

  local lowest_maxhp = is_bodyguard and math.huge or nil
  
  if StatTable.Monitor and IsGroupMate(StatTable.Monitor) then return end --we're already monitoring someone in the group

  for _, v in ipairs(gmcp.Char.Group.List) do
    if v.name ~= StatTable.CharName then
      if is_bodyguard then
        -- Bodyguard logic: find the group member with the lowest max HP
        local maxhp = tonumber(v.maxhp)
        if maxhp and maxhp &lt; lowest_maxhp then
          lowest_maxhp = maxhp
          monitor_name = v.name
        end
      elseif is_berserker and v.class == "Cle" then
        -- Berserker logic: prioritize cleric ("Cle")
        monitor_name = v.name
        break
      elseif v.class == "Bld" then
        -- Default logic: prioritize bladedancer ("Bld")
        monitor_name = v.name
        break
      end
    end
  end


  if not monitor_name then return nil end
  if monitor_name == "Someone" then printGameMessage("PreachUp", "Couldn't monitor, groupie is invis"); return nil; end

  
  local monitor_type = is_bodyguard and "splat" or (is_berserker and "cleric" or "bladedancer")
  printGameMessage("PreachUp", "Monitoring the " .. monitor_type .. ": " .. monitor_name)
  return monitor_name
end


function LookForPreachupBots() 
  local Players = gmcp.Room.Players
  local DruidInRoom = false
  local PsiInRoom = false
  
  -- Only check for / invite the bots to plane if we're in Sanctum / Thorngate
  if not SafeArea() then GetSpellsAtPreachup() end

  for _, player in ipairs(StaticVars.DruidBots) do
    if Players[player] then
      DruidInRoom = true
      break
    end
  end
  
  for _, player in ipairs(StaticVars.PsiBots) do
    if Players[player] then
      PsiInRoom = true
      break
    end
  end
  
  
  if DruidInRoom and PsiInRoom then
    cecho("&lt;white&gt;AutoPreachUp Script&lt;ansi_white&gt;: bots on this plane, getting spells")
    GetSpellsAtPreachup()
  else
    if IsMDAY() then cecho("&lt;white&gt;AutoPreachUp Script&lt;ansi_white&gt;: on MDAY, ask bots to plane manually"); GetSpellsAtPreachup(); return end
    cecho("&lt;white&gt;AutoPreachUp Script&lt;ansi_white&gt;: bots NOT on this plane, asking them to plane")
    if not DruidInRoom then
      for _, player in ipairs(StaticVars.DruidBots) do
        if GlobalVar.OnlinePlayers[player] then
          send("tell " .. player .. " " .. (StatTable.Level == 125 and "thorn" or "mid"), false)
          break
        end
      end
    end
  
    if not PsiInRoom then
      for _, player in ipairs(StaticVars.PsiBots) do
        if GlobalVar.OnlinePlayers[player] then
          send("tell " .. player .. " " .. (StatTable.Level == 125 and "thorn" or "mid"), false)
          break
        end
      end
    end
    -- give the bots time to plane
    tempTimer(8, function() if StatTable.Position ~= "Stand" then send("stand") end; TryLook() end)
    tempTimer(10, function() printGameMessageVerbose("PreachUp", "Asking bots to plane"); GetSpellsAtPreachup() end)
  end
end 

-- Helper function to iterate over a bot list and ask for a spell
local function AskBotForSpell(commandList, Players, botList, spell)
  for _, player in ipairs(botList) do
    if Players[player] then
      table.insert(commandList, "tell " .. player .. " " .. spell)
      break
    end
  end
end

function GetSpellsAtPreachup()
  local Players = gmcp.Room.Players
  local commands = {}
  local MyClass = StatTable.Class
  local MyLevel = StatTable.Level
  local MySubLevel = StatTable.SubLevel
  local isMDAY = IsMDAY()
  
  printGameMessageVerbose("PreachUp", "Getting spells from bots")

  if MyLevel == 125 then
    commands = {"stand", "config -savespell", "config +autoloot", "sneak"}
  else
    commands = {"stand", "config +savespell", "sneak", "move hidden"}
  end
  
  if (not StatTable.Concentrate and not ((MyClass == "Paladin" and MyLevel &lt; 125) or MyClass == "Berserker")) then
    table.insert(commands, "cast concentrate")
  end
  
  if not StatTable.Barkskin then
    if IsMDAY and ((IsClass({"Archer", "Druid", "Fusilier"}) and (MyLevel == 125 or MySubLevel &gt; 69)) or (IsClass({"Wizard"}) and MyLevel == 125)) then
      table.insert(commands, "cast barkskin")
    else
      AskBotForSpell(commands, Players, StaticVars.DruidBots, "bark")
    end
  end
  
  if not StatTable.SteelSkeleton then
    if IsMDAY and ((IsClass({"Psionicist", "Mindbender"}) and MyLevel &gt;= 50) or (IsClass({"Black Circle Initiate"}) and MyLevel == 125)) then
      table.insert(commands, "cast 'steel skeleton'")
    else
      AskBotForSpell(commands, Players, StaticVars.PsiBots, "steel")
    end
  end 
  
  if not StatTable.DarkEmbrace and IsRace(StaticVars.DarkRaces) then
    if IsMDAY and IsNotClass({"Paladin", "Priest", "Berserker", "Druid"}) and (MyLevel == 125 or MySubLevel &gt; 29) then
      table.insert(commands, "cast 'dark embrace'")
    else
      AskBotForSpell(commands, Players, StaticVars.PsiBots, "de")
    end
  end
  
  if StatTable.Race ~= "High Elf" and GlobalVar.AutoFrenzy and StatTable.Level &gt;= 51 and (IsClass(StaticVars.FrenzyClasses) or ArrayHasValue(CustomFrenzyList, StatTable.CharName)) then
    if IsMDAY and IsNotClass({"Berserker","Priest"}) and (MyLevel == 125 or MySubLevel &gt; 41) then
      table.insert(commands, "cast frenzy")
    else
      AskBotForSpell(commands, Players, StaticVars.DruidBots, "frenzy")
    end
  end
  
  -- Paladins and Psionicists have their own cases
  if MyClass == "Paladin" then
    if not StatTable.Fervor then table.insert(commands, "cast fervor") end
    if not StatTable.Prayer and GlobalVar.PrayerName ~= "" then table.insert(commands, "cast prayer '" .. GlobalVar.PrayerName .. "'") end
    if (MyLevel == 125 or MySubLevel &gt; 101) and StatTable.Oath == "war" then table.insert(commands, "cast 'holy zeal'") end
    if (MyLevel == 125 or MySubLevel &gt; 250) and StatTable.Oath == "evolution" and not StatTable.JoinedBoon and not StatTable.SharedBoon then
      local evolBoon = "cast " .. (MyLevel == 125 and "shared" or "joined")
      table.insert(commands, evolBoon) 
    end
    
  elseif MyClass == "Priest" and (MyLevel == 125 or MySubLevel &gt; 250) and not StatTable.Intervention and not StatTable.InterventionExhaust then
    table.insert(commands, "cast intervention " .. (GlobalVar.InterventionTarget and GlobalVar.InterventionTarget or ""))
  elseif MyClass == "Cleric" then
    castPantheonSpell()    
  elseif MyClass == "Psionicist" and MyLevel &gt;= 51 and StatTable.max_mana &gt; 3000 then
    if not StatTable.KineticChain then  table.insert(commands, "cast 'kinetic chain'") end
    
    if (MyLevel == 125 or MySubLevel &gt;= 500) and matchKineticEnhancer(GlobalVar.KineticEnhancerOne) and checkKineticEnhancers() &lt; 1 then
      table.insert(commands, "cast '" .. GlobalVar.KineticEnhancerOne .. "'")
    end
    if MyLevel == 125 and matchKineticEnhancer(GlobalVar.KineticEnhancerTwo) and checkKineticEnhancers() &lt; 2 then
        table.insert(commands, "cast '" .. GlobalVar.KineticEnhancerTwo .. "'")
    end
    

    if (MyLevel == 125 or MySubLevel &gt; 101) and not StatTable.Savvy then table.insert(commands, "cast savvy") end
    if MyLevel == 125 then
      --table.insert(commands, "quicken 5")
      --table.insert(commands, "cast 'magic light'")
      --table.insert(commands, "cast 'magic light'")
      --table.insert(commands, "cast 'magic light'")
      --table.insert(commands, "quicken off")
      if MySubLevel &gt; 200 and not StatTable.Gravitas then table.insert(commands, "cast 'gravitas'") end
    end
  elseif MyClass == "Mindbender" and MyLevel == 125 then
    if not StatTable.MindHive then table.insert(commands, "cast 'hive mind'") end
  
  elseif MyClass == "Mage" and MyLevel &gt;= 51 then
    if (MyLevel == 125 or MySubLevel &gt; 101) and not StatTable.Savvy then table.insert(commands, "cast savvy") end
    if (StatTable.max_mana &gt; 5000) and not StatTable.Mystical then table.insert(commands, "cast mystical") end 
    
  elseif MyClass == "Wizard" and MyLevel &gt;= 51 then
    if (StatTable.max_mana &gt; 5000) and not StatTable.Savvy then table.insert(commands, "cast savvy") end
    if (StatTable.max_mana &gt; 5000) and not StatTable.Mystical then table.insert(commands, "cast mystical") end
    if MyLevel == 125 then table.insert(commands, "cast 'ether link'") end
    
  elseif MyClass == "Stormlord" and MyLevel &gt;= 51 then
    if (MyLevel == 125 or MySubLevel &gt; 101) and not StatTable.Savvy then table.insert(commands, "cast savvy") end
    if (MyLevel == 125 and not StatTable.GaleStratum) then table.insert(commands, "cast stratum gale") end
    
  elseif MyClass == "Sorcerer" and MyLevel &gt;= 51 then
    if (StatTable.max_mana &gt; 5000) and not StatTable.Savvy then table.insert(commands, "cast savvy") end
    if (StatTable.max_mana &gt; 5000) and not StatTable.Mystical then table.insert(commands, "cast mystical") end
    if (MyLevel == 125 and MySubLevel &gt;= 200) and not StatTable.VilePhilosophy then table.insert(commands, "cast 'vile philosophy'") end
    if not StatTable.DeathShroud then table.insert(commands, "cast 'death shroud'") end
    if MyLevel &gt;= 51 and not StatTable.SummonNecrit then table.insert(commands, "cast 'summon necrit'") end
  elseif MyClass == "Black Circle Initiate" and MyLevel &gt;= 51 then
    if not StatTable.Nightcloak then table.insert(commands, "cast nightcloak") end
  elseif MyClass == "Bladedancer" and MyLevel == 125 then
    if not BldDancing() then
      table.insert(commands, "stance unending")
    end
  elseif MyClass == "Monk" then
    if MyLevel == 125 then
      if not StatTable.BlindDevotion then table.insert(commands, "cast 'blind devotion'") end
      if not StatTable.Consummation then table.insert(commands, "cast consummation") end
      if not StatTable.StoneFist then table.insert(commands, "cast 'stone fist'") end
    elseif MyLevel == 51 then
      if MySubLevel &gt; 150 and StatTable.ArmorClass &lt; -500 then -- only cast if in hit mode
        table.insert(commands, "cast 'dagger hand'")
      end
    end
  elseif MyClass == "Shadowfist" then
    if MyLevel == 125 then
      if not StatTable.Consummation then table.insert(commands, "cast consummation") end
      if not StatTable.StoneFist then table.insert(commands, "cast 'stone fist'") end
    elseif MyLevel == 51 then
      if MySubLevel &gt; 150 and StatTable.ArmorClass &lt; -500 then -- only cast if in hit mode
        table.insert(commands, "cast 'dagger hand'")
      elseif MySubLevel &gt; 200 then
        table.insert(commands, "cast 'stone fist'")
      end
    end 
  end
  
  if MyLevel == 125 and (MyClass == "Assassin" or MyClass == "Rogue" or MyClass == "Black Circle Initiate") then 
    table.insert(commands, "sn") 
    table.insert(commands, "alertness")  
  end
  
  if StatTable.Race == "Drider" then table.insert(commands, "racial imbue") end
  
  
  if MyLevel == 125 and MyClass == "Berserker" then table.insert(commands, "rest"); table.insert(commands, "gtell remember to send the bzk :)")  end
  
  if MyLevel == 125 and IsNotClass({"Soldier", "Berserker", "Shadowfist", "Black Circle Initiate"}) and StatTable.current_mana &gt; 2000 and Grouped() then table.insert(commands, "cast 'detect haven'") end

  
  if StatTable.max_moves &lt; 750 and StatTable.SubLevel &gt; 7 and not StatTable.Endurance and IsNotClass({"Berserker"}) then table.insert(commands, "cast endurance") end
  
  if CustomPreachup[StatTable.CharName] then table.insert(commands, CustomPreachup[StatTable.CharName]) end
  
  if not StatTable.ProtectionGood and StatTable.Alignment &lt; -300 then
    table.insert(commands, "cast 'protection good'")
  end
  
  safeCall(ClearGurneyTriggers)
  if GroupLeader() and SafeArea() then sendGMCP("Char.Group.List"); tempTimer(4, [[GroupOrder()]]) end
  
  -- sneak
  if MyLevel &gt;= 51 and IsNotClass({"Paladin", "Priest", "Berserker", "Wizard", "Bodyguard", "Stormlord"}) then
    if MyClass == "Sorcerer" and (MyLevel == 125 or MySubLevel &gt;= 5) then
      table.insert(commands, "shadow form")
    else
      table.insert(commands, "sneak")
    end
  end
  
  -- For solo preachups
  if not Grouped() then
  
    
    
    if MyLevel == 125 then
      -- Grab intervention before we go at lord
      if not StatTable.Intervention then
        for _, player in ipairs(StaticVars.PrsBots) do
          if Players[player] then
            table.insert(commands, "tell " .. player .. " intervention")
          break
          end  
        end
      end
      
      
      if not StatTable.Invis then table.insert(commands, "cast 'improved invis'") end
      
    
    end
    
    
    if MyClass == "Sorcerer" and not StatTable.DefiledFlesh and (MySubLevel &gt;= 250 or MyLevel &gt;= 51) then
      table.insert(commands, "cast defiled")
      for _, player in ipairs(StaticVars.PrsBots) do
        if Players[player] then
          table.insert(commands, "tell " .. player .. " comf3")
        break
        end  
      end
    end
    
    
  else -- end of solo preachup spells
    if StatTable.Surge &gt; 0 then table.insert(commands, "surge off") end
    if StatTable.Augment &gt; 0 then table.insert(commands, "augment off") end
    if StatTable.Quicken &gt; 0 then table.insert(commands, "quicken off") end
    GlobalVar.SurgeLevel = 2
  end 
  
  -- choose a monitor target
  local monitor_name = PreachUpAutoMonitor()
  if monitor_name then table.insert(commands, "monitor " .. monitor_name) end 

  
  
  if MyLevel &lt; 125 and not GroupLeader() then table.insert(commands, "sleep") end
  
  for _, cmd in ipairs(commands) do
    send(cmd)
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Grouporder script</name>
					<packageName></packageName>
					<script>-- Class priorities
local priorityGroups = {
    { classes = { "War", "Bod", "Bzk", "Rip", "Mon", "Bld", "Shf" }, sortBy = "maxhp" },
    { classes = { "Rog", "Asn", "Bci", "Arc", "Sld", "Fus" }, sortBy = "maxhp" },
    { classes = { "Mag", "Wzd", "Stm", "Sor", "Psi", "Mnd" }, sortBy = "maxmp" },
}

-- table.indexof function to find an index of a value in a table
function table.indexof(t, value)
    for k, v in ipairs(t) do
        if v == value then return k end
    end
    return nil
end

local function sortGroupMembers(a, b)
    local aPriority, bPriority = nil, nil
    local aSortBy, bSortBy = nil, nil

    for idx, group in ipairs(priorityGroups) do
        if table.indexof(group.classes, a.class) then
            aPriority = idx
            aSortBy = group.sortBy
        end

        if table.indexof(group.classes, b.class) then
            bPriority = idx
            bSortBy = group.sortBy
        end
    end

    if aPriority and bPriority then
        if aPriority == bPriority then
            return tonumber(a[aSortBy]) &gt; tonumber(b[bSortBy])
        else
            return aPriority &lt; bPriority
        end
    elseif aPriority then
        return true
    elseif bPriority then
        return false
    else
        return tonumber(a.maxmp) &gt; tonumber(b.maxmp)
    end
end

function GroupOrder()
  if not Grouped() or not GroupLeader() then return end
  if not gmcp or not gmcp.Char or not gmcp.Char.Group or not gmcp.Char.Group.List then error("GroupOrder(): no data in gmcp.Char.Group.List") end
  
  local sortedMembers = {}
  local finalcmd = ""
  
  for i, member in ipairs(gmcp.Char.Group.List) do
      table.insert(sortedMembers, member)
  end
  
  table.sort(sortedMembers, sortGroupMembers)
  
  for i = #sortedMembers, 1, -1 do
      local member = sortedMembers[i]
      if GMCP_name(member.name) == StatTable.CharName then
        if #sortedMembers == i then 
          finalcmd = "grouporder " .. StatTable.CharName .. " front"
        else
          finalcmd = "grouporder " .. StatTable.CharName .. " after " .. sortedMembers[i+1].name
        end
      else 
        send("grouporder " .. member.name .. " front")
      end
  end
  send(finalcmd)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Direction Script</name>
					<packageName></packageName>
					<script>GlobalVar.LastDirs = GlobalVar.LastDirs or {}
GlobalVar.LastPop = GlobalVar.LastPop or nil
GlobalVar.DirCount = GlobalVar.DirCount or 0

local MAXDIRS = 30

function AddDir(dir)
  if not GlobalVar.LastDirs then GlobalVar.LastDirs = {} end
  
  if #GlobalVar.LastDirs &gt;= MAXDIRS then
    GlobalVar.LastPop = GlobalVar.LastDirs[1]
    table.remove(GlobalVar.LastDirs, 1)
  end
  
  table.insert(GlobalVar.LastDirs, dir:sub(1,1))
  GlobalVar.DirCount = GlobalVar.DirCount + 1
end

function RemoveDir(dir)
  if not GlobalVar.LastDirs then GlobalVar.LastDirs = {}; return end

  dir = dir:sub(1,1)
  
  if GlobalVar.LastDirs[#GlobalVar.LastDirs] == dir then
    table.remove(GlobalVar.LastDirs)
  end
  
  if #GlobalVar.LastDirs == (MAXDIRS -1) and GlobalVar.LastPop then table.insert(GlobalVar.LastDirs, 1, GlobalVar.LastPop) end
  
  return
end

function ClearDirs()
  GlobalVar.LastDirs = {}
  GlobalVar.DirCount = 0
  return 
end

function FormatDirs()
  local ret_str = ""
  
  if not GlobalVar.LastDirs then return ret_str end
  
  ret_str = ret_str .. "&lt;white&gt;"

  for n,dir in ipairs(GlobalVar.LastDirs) do
    if n == #GlobalVar.LastDirs then 
      ret_str = ret_str .. "&lt;yellow&gt;" .. dir .. "\n"
    else
      ret_str = ret_str .. dir .. ","
    end
  end

  return ret_str

end

function FormatDirsAlt(tbl)
    if not tbl or type(tbl) ~= "table" then
        return ""
    end

    local result = "&lt;white&gt;"
    local count = 1 -- Start with 1 since we count the first occurrence
    local n = #tbl

    for i = 1, n do
        local currentElement = tbl[i]
        local nextElement = tbl[i + 1]

        if currentElement == nextElement then
            count = count + 1
        else
            if count &gt; 1 then
                result = result .. count
            end
            
            if i ~= #tbl then 
              result = result .. currentElement .. ","
            else
              result = result .. "&lt;yellow&gt;" .. currentElement .. "\n"
            end
            count = 1
        end
    end

    return result
end


function ShowDirs()

  local string_format = FormatDirsAlt(GlobalVar.LastDirs)
  cecho(string_format)
  cecho("\nTotal Dirs:\t" .. GlobalVar.DirCount .. "\n")

end

safeEventHandler("OnPlaneResetDirs", "OnPlane", function() ClearDirs() end)</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Tank Direction Trigger</name>
					<packageName></packageName>
					<script>function TankDirection()
  -- Make sure the request came from the GroupLeader (should always be the case)
  if matches.leader ~= GlobalVar.GroupLeader then 
    pdebug("TankDirection() debug: matches.leader (" .. matches.leader .. ") didn't match GlobalVar.GroupLeader (" .. GlobalVar.GroupLeader .. ")")
    return 
  end
  
  -- Only move if we have AutoRescue on
  if not AR.Status then
    printGameMessage("TankDir", "Groupleader requested you to move but AutoRescue is off (will only move if AR is on)")
    QuickBeep()
    return
  end
  
  printGameMessage("TankDir", "Moving " .. matches.dir .. " in 2 secs on group leader's request")
  
  local dir = matches.dir
  
  tempTimer(2, function()
    send(dir)
    -- Every class other than Berserker should have access to burning hands. Berserker can whirlwind but only in combat
    if StatTable.Class == "Berserker" then
      safeEventHandler("BerserkerTankDirection", "OnCombat", function() send("whirlwind") end, true)
    else
      send("cast 'burning hands'")
    end
  end)
end

function TankDirectionCleanup()
    safeKillTrigger("TankDirectionID")
end

function TankDirectionInit()
    if not StatTable then printMessage("DEBUG ERROR", "TankDirectionInit() has no StatTable!!", "yellow") return end
    if not StatTable.CharName then printMessage("DEBUG ERROR", "TankDirectionInit() has no charname!!", "yellow") end

    printMessage("DEBUG", "TankDirectionInit() successfully called", "yellow")
    
    -- Initialize the pattern
    local pattern = "^\\*(?&lt;leader&gt;\\w+)\\* tells the group '(?i)" .. string.sub(StatTable.CharName, 1, 3)
    
    if string.len(StatTable.CharName) &gt; 3 then
        for i = 4, string.len(StatTable.CharName) do
            pattern = pattern .. "[" .. string.sub(StatTable.CharName, i, i) .. "]*"
        end
    end

    pattern = pattern .. "\\,? (?&lt;dir&gt;north|west|east|south|up|down|n|w|e|s|u|d)'$"

    safeTempTrigger("TankDirectionID", pattern, TankDirection, "regex")
    safeEventHandler("TankDirectionCleanupID", "sysDisconnectionEvent", TankDirectionCleanup, true)
end

-- TankDirection() will be called everytime ProfileInit is (eg, every login)
safeEventHandler("TankDirectionInitID", "CustomProfileInit", TankDirectionInit, true)</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Pantheon Spells</name>
					<packageName></packageName>
					<script>local PantheonSpells = {
  "ArtificerBlessing",
  "Discordia",
  "DivineAdjutant",
  "DivineGrace",
  "GloriousConquest",
  "GrimHarvest",
  "HallowedNimbus",
  "ProtectiveVigil",
  "SylvanBenediction",
  "UnholyRampage"
}


GlobalVar.PantheonSpell = GlobalVar.PantheonSpell or nil
GlobalVar.PantheonCounter = GlobalVar.PantheonCounter or 0

function checkPantheonSpells()
  for _, spell in ipairs(PantheonSpells) do
    if StatTable[spell] ~= nil then
      return spell
    end
  end
  return false
end

-- Called by GameLoop is you're a Cleric
function castPantheonSpell()
 if Battle.Combat then return end
 if checkPantheonSpells() then return end
 if not GlobalVar.PantheonSpell then return end
 
 
 TryAction("cast '" .. GlobalVar.PantheonSpell .. "'", 5) 
end

function PantheonSpellSetInit()
  if not StatTable or not StatTable.CharName then return end
  if StatTable.Class == "Cleric" and StatTable.Level &gt;= 51 then
  
    if StaticVars.Default_Pantheon[charname] then
      GlobalVar.PantheonSpell = StaticVars.Default_Pantheon[charname]
      printGameMessage("Pantheon", "Default set to " .. StaticVars.Default_Pantheon[charname])
    end
    
    safeEventHandler("PantheonActiID", "OnMobDeath", "PantheonActivator", false)
  else
    safeKillEventHandler("PantheonGrimHarvestID")
  end
end

function PantheonActivator()
  if not StatTable.GrimHarvest and not StatTable.UnholyRampage then return end
  if (StatTable.GrimHarvest and StatTable.GrimHarvestAura) or (StatTable.UnholyRampage and StatTable.UnholyRampageAura) then GlobalVar.PantheonCounter = 0; return end
  
  GlobalVar.PantheonCounter = GlobalVar.PantheonCounter + 1
  
  if GlobalVar.PantheonCounter &gt;= StaticVars.PantheonNumber then
    if StatTable.GrimHarvest and not StatTable.GrimHarvestAura then
      Battle.DoAfterCombat("cast 'grim harvest' activate")
    elseif StatTable.UnholyRampage and not StatTable.UnholyRampageAura then
      Battle.DoAfterCombat("cast 'unholy rampage' activate")
    end
  end
  
end


safeEventHandler("PantheonSpellSetInitID", "CustomProfileInit", "PantheonSpellSetInit", false)

</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Alpha (WIP) Scripts</name>
					<packageName></packageName>
					<script>-- Scripts that are still be tested, use at your own risk :)</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>AutoFletch Script</name>
						<packageName></packageName>
						<script>AutoFletch = AutoFletch or {}

AutoFletch.Status = AutoFletch.Status or false
AutoFletch.ExhaustTable = AutoFletch.ExhaustTable or {}
AutoFletch.NextSpecialFletch = AutoFletch.NextSpecialFletch or nil
AutoFletch.AntiSpam = AutoFletch.AntiSpam or 0

ArrowTable = ArrowTable or {}

-- In the game, special arrows are crafted on a hidden exhaust timer
-- That is, as soon as you begin crafting you of the special arrows, a
-- 50 minute hidden timer starts. During that time, you will only be able
-- to successfully craft those arrows 6 times in total.

-- We are writing a script to cycle through the different arrow types 

-- TODO: add poison for terror arrows



function AutoFletch.SetUpExhaustTable(char_name)
    if not char_name then
        error("AutoFletch.SetUpExhaustTable: char_name is nil")
        return false
    end

    if AutoFletch.ExhaustTable[char_name] then return true end

    AutoFletch.ExhaustTable[char_name] = {}

    for _, arrow in ipairs(ArrowTable) do
        AutoFletch.ExhaustTable[char_name][arrow] = {qty = 0, time = 0, amount = 0}
    end

    return true
end

function AutoFletch.ResetExhaustTable(char_name)
    if not char_name then
        error("AutoFletch.SetUpExhaustTable: char_name is nil")
        return false
    end

    AutoFletch.ExhaustTable[char_name] = {}

    for _, arrow in ipairs(ArrowTable) do
        AutoFletch.ExhaustTable[char_name][arrow] = {qty = 0, time = 0, amount = 0}
    end

    return true
end

    -- Lordly arrow success messages:
    -- Your efforts produced 1 lordly Sableroix arrow
    -- Your efforts produced 2 lordly Sableroix arrows
    -- Hero arrow success messages:
    -- Your efforts produced 1 Sableroix arrow
    -- Your efforts produced 2 Sableroix arrows

    -- Failed message: You fail to produce anything worth shooting.


function AutoFletch.SetNextSpecialAmmo(char_name)
    if not char_name or not AutoFletch.ExhaustTable[char_name] then
        error("AutoFletch.SetNextSpecialAmmo: char_name is nil or ExhaustTable[char_name] is nil")
        return false
    end

    -- As each arrow type starts its own hidden timer, the first thing we want to do is ensure we've
    -- crafted at least one of every arrow type. From there we want to swap through the arrow types
    -- crafiting until we've made 6 of each type.

    -- First, check if we've crafted at least one of each arrow type
    for _, arrow in ipairs(ArrowTable) do
        print(arrow, AutoFletch.ExhaustTable[char_name][arrow].qty)
        if AutoFletch.ExhaustTable[char_name][arrow].qty == 0 then
            AutoFletch.NextSpecialFletch = arrow
            return true
        end
    end

    -- If we've crafted at least one of each arrow type, then we want to swap through the arrow types
    -- crafting until we've made 6 of each type. The next arrow we want to fletch is the one we've fletched
    -- the least of.
    local min = 6
    for _, arrow in ipairs(ArrowTable) do
        if AutoFletch.ExhaustTable[char_name][arrow].qty &lt; min then
            min = AutoFletch.ExhaustTable[char_name][arrow].qty
            AutoFletch.NextSpecialFletch = arrow
        end
    end
    
    if min &lt; 6 then return true end

    printMessage("AutoFletch", "Finished crafting all special arrows on this character.")
    
    -- We finished all our special arrows:
    -- stop fletching
    AutoFletch.SpecialAmmoCleanUp()
    send("sleep")
    -- in 50 mins, clear exhaust table and attempt to restart (these are broken into two because AutoFletch.Restart can be killed by OnQuit
    safeTempTimer("AutoFletch.ClearExhaustTable", 50*60, function() AutoFletch.ResetExhaustTable(char_name); end)
    safeTempTimer("AutoFletch.Restart", 50*60, function() send("stand"); AutoFletch.SpecialAmmoInit() end)
    safeEventHandler("AutoFletch.KillRestartOnQuit", "OnQuit", function() safeKillTimer("AutoFletch.Restart") end, true)


end

function AutoFletch.FletchAmmo(ammo, ammo_type)
    if AutoFletch.Status then
        send("fletch '" .. ammo .. "' '" .. ammo_type .. "'", true)
    end
end
   

function AutoFletch.SpecialAmmo(char_name, ammo, tier)
    if not char_name or not AutoFletch.ExhaustTable[char_name] then
        error("AutoFletch.SpecialAmmo: char_name is nil or ExhaustTable[char_name] is nil")
        return false
    end

    AutoFletch.SetNextSpecialAmmo(char_name)

    if (AutoFletch.Status == false) then
        return false
    end

    -- Add mana check

    local ammo = ammo or "arrow"
    local ammo_type = AutoFletch.NextSpecialFletch

    if (not tier and StatTable.Level == 125) or tier == "lord" then
        if ammo_type == "Sableroix" or ammo_type == "explosive" then
            ammo_type = "lordly " .. ammo_type
        end
    end

    local success_pattern = "Your efforts produced (\\d+) " .. ammo_type .. " " .. ammo
    
    
    safeTempTrigger("AutoFletch.SpecialSuccess", success_pattern, function()
        print("Success Pattern called on " .. ammo_type .. " " .. ammo)
        if AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].qty == 0 then 
            AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].time = os.time()
            local next_fletch = AutoFletch.NextSpecialFletch
            safeTempTimer("AutoFletch.Reset" .. char_name .. next_fletch, 60 * 50, function() 
                AutoFletch.ExhaustTable[char_name][next_fletch].qty = 0
                AutoFletch.ExhaustTable[char_name][next_fletch].time = 0
            end)
        end
        AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].qty = AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].qty + 1
        AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].amount = AutoFletch.ExhaustTable[char_name][AutoFletch.NextSpecialFletch].amount + 1
        tempTimer(0, function() AutoFletch.SpecialAmmo(char_name, ammo, tier) end)
    end, "regex", 1)
    
    safeTempTrigger("AutoFletch.SpecialFail", "You fail to produce anything worth shooting.", function() tempTimer(0, function() AutoFletch.SpecialAmmo(char_name, ammo, tier) end) end, "begin", 1)

    --local lag = tonumber(gmcp.Char.Vitals.lag) or 0
    print("got to AutoFletch.FletchAmmo", ammo, ammo_type)
    
    if AutoFletch.AntiSpam &lt; 10 then
      send("fletch '" .. ammo .. "' '" .. ammo_type .. "'", true)
      AutoFletch.AntiSpam = AutoFletch.AntiSpam + 1
    else
      send("fletch '" .. ammo .. "' '" .. ammo_type .. "'" ..  getCommandSeparator() .. "inv", true)
      AutoFletch.AntiSpam = 0
    end
    --safeTempTimer("AutoFletch.SendFletchCmd", lag, function() AutoFletch.FletchAmmo(ammo, ammo_type) end)

end

function AutoFletch.SpecialAmmoInit(ammo, tier)
    if (AutoFletch.Status == true) then
        printMessage("AutoFletch", "Error, already running.")
        return
    end
    
    if StatTable.Position == "Sleep" then send("stand") end

    if IsNotClass({"Archer", "Assassin", "Fusilier"}) then
        printMessage("AutoFletch", "You are not an Archer, Assassin, or Fusilier -- cannot fletch special ammo.")
        return
    end

    local char_name = StatTable.CharName -- will do something more clever later
    local tier = tier or "lord" -- will do something more clever later
    local ammo = ammo or "arrow"
    AutoFletch.AntiSpam = 0

    safeTempTrigger("AutoFletch.SpecialNoFletch", "You are not carrying a fletch.", function() AutoFletch.SpecialAmmoCleanUp() end, "begin", 1)
    safeTempTrigger("AutoFletch.SpecialFletchNotEquipped", "You lack the proper tools.", function() send("wear fletch", true); AutoFletch.SpecialAmmo(char_name, ammo, tier)  end, "begin")
    safeTempTrigger("AutoFletch.SpecialOutOfFletch", "You discard your empty toolkit.", function() send("wear fletch", true); AutoFletch.SpecialAmmo(char_name, ammo, tier)  end, "begin")
    safeTempTrigger("AutoFletch.OutOfMana", "You don't have enough mana to make .* arrows.", function() AutoFletch.OutOfMana(char_name, ammo, tier) end, "regex")
    safeTempTrigger("AutoFletch.HigherLevelToolkit", "You will need a higher level toolkit", function() printMessage("AutoFletch", "Error, please use an appropriate level toolkit"); AutoFletch.SpecialAmmoCleanUp() end, "begin", 1)
    safeTempTrigger("AutoFletch.NoSkill", "^You do not know how to make (.*) (arrows|bolts|sling stones|darts).$", function() 
      for index, arrow in ipairs(ArrowTable) do
        if arrow == matches[2] then table.remove(ArrowTable, index); 
        AutoFletch.SpecialAmmo(char_name, ammo, tier)
        return; end
      end
      printMessage("AutoFletch", "Error, not expected to get here. Couldn't find arrow type to remove from ArrowTable")
      AutoFletch.SpecialAmmoCleanUp()
    end, "regex")
    
    send("config -savespell", false)
    AutoFletch.Status = true
    AutoFletch.NextSpecialFletch = "Sableroix"
    AutoFletch.SetArrowTypesTable()
    AutoFletch.SetUpExhaustTable(char_name)
    AutoFletch.SpecialAmmo(char_name, ammo, tier)

end

function AutoFletch.SpecialAmmoCleanUp()
    AutoFletch.Status = false
    AutoFletch.NextSpecialFletch = nil
    AutoFletch.AntiSpam = 0

    -- Kill all Triggers
    safeKillTrigger("AutoFletch.SpecialFail")
    safeKillTrigger("AutoFletch.SpecialSuccess")
    safeKillTrigger("AutoFletch.SpecialNoFletch")
    safeKillTrigger("AutoFletch.SpecialFletchNotEquipped")
    safeKillTrigger("AutoFletch.SpecialOutOfFletch")
    safeKillTrigger("AutoFletch.OutOfMana")
    safeKillTrigger("AutoFletch.HigherLevelToolkit")
    safeKillTrigger("AutoFletch.NoSkill")

    -- Kill all Timers (except cooldown timers)
    safeKillTimer("AutoFletch.SendFletchCmd")
    safeKillTimer("AutoFletch.Restart")
    
    -- Kill all Event handlers
    safeKillEventHandler("AutoFletch.KillRestartOnQuit")
    
    
    send("remove fletch")
end

function AutoFletch.OutOfMana(char_name, ammo, tier)
  if StatTable.Position ~= "Sleep" then
    send("sleep")
  end
  
  coroutine.wrap(function()
  
    repeat
      wait(10)
    until StatTable.current_mana == StatTable.max_mana
  
    send("stand")
    
    if AutoFletch.Status then 
      AutoFletch.SpecialAmmo(char_name, ammo, tier)
    end
  end)()
end


function AutoFletch.SetArrowTypesTable()

    local class = StatTable.Class
    local level = StatTable.Level
    local sublevel = StatTable.SubLevel


    -- Initialize ArrowTable as an empty table
    ArrowTable = {}
    
    if class == "Archer" then
        if level == 125 or (level == 51 and sublevel &gt;= 200) then
            table.insert(ArrowTable, "Sableroix")
        end
        if level == 125 or (level == 51 and sublevel &gt;= 250) then
            table.insert(ArrowTable, "explosive")
        end
        if level == 125 and sublevel &gt;= 100 then
            table.insert(ArrowTable, "glass")
        end
        if level == 125 and sublevel &gt;= 150 then
            table.insert(ArrowTable, "ebony")
        end
    elseif class == "Assassin" then
        if level == 125 or (level == 51 and sublevel &gt;= 200) then
            table.insert(ArrowTable, "Sableroix")
        end
        if level == 125 and sublevel &gt;= 150 then
            table.insert(ArrowTable, "glass")
        end
        --if level == 125 and sublevel &gt;= 200 then
        --    table.insert(ArrowTable, "terror")
        --end
    elseif class == "Fusilier" then
        if level == 125 or (level == 51 and sublevel &gt;= 250) then
            table.insert(ArrowTable, "explosive")
        end
        if level == 125 and sublevel &gt;= 150 then
            table.insert(ArrowTable, "ebony")
        end
    end
end

function AutoFletch.ReportSpecialAmmo()
    for char_name, ammo_table in pairs(AutoFletch.ExhaustTable) do
        for ammo_type, ammo_data in pairs(ammo_table) do
            if ammo_data.qty &gt; 0 then
                printMessage("AutoFletch", char_name .. " has crafted " .. ammo_data.qty .. " " .. ammo_type .. " arrows.")
                if ammo_data.time &gt; 0 and (60 * 50 - (os.time() - ammo_data.time)) &gt; 0 then
                    printMessage("AutoFletch", "The next " .. ammo_type .. " ammo for " .. char_name .. " will be available in " .. (60 * 50 - (os.time() - ammo_data.time)) .. " seconds.")
                end
            end
        end
    end
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>OnInventoryUpdate</name>
						<packageName></packageName>
						<script>
function OnInventoryUpdate()
  if gmcp.Char.Items.List.location ~= "inv" or StatTable.Position == "Sleep" then
    return
  end

  if not TryLock("OnInvUpdate", 5) then
    return
  end

  local Item_Tracker = {
    ["consecrated ashes"] = 0,
    ["sulfurous ashes"] = 0
  }
  
  local mindtrick = ""
  
  
  if StatTable.Level == 125 and StatTable.Class == "Psionicist" then
    mindtrick = "|B|" .. gmcp.Char.Status.character_name .. "'s glowing mindtrick|N|" -- use gmcp here not StatTable.CharName to preserve capitalization (to test, colours)
    Item_Tracker[mindtrick] = 0
  end 

  for _, item in ipairs(gmcp.Char.Items.List.items) do
    if Item_Tracker[item.name] then
      Item_Tracker[item.name] = Item_Tracker[item.name] + 1

      if Item_Tracker[item.name] &gt; 1 and item.name ~= mindtrick then
        TryAction("put '" .. item.name .. "' '" .. StaticVars.LootBagName .. "'", 500)
      end
    end
  end
  
  if mindtrick then
    GlobalVar.Mindtricks = Item_Tracker[mindtrick]
  end
end



safeTempTrigger("MagicLightInvUpdate", "You twiddle your thumbs", function() sendGMCP("Char.Items.Inv") end, "begin")
</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.List</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Bld support funcs</name>
						<packageName></packageName>
						<script>          
function BldDanceCheck()
  if StatTable.Class ~= "Bladedancer" then return "NotBld", -1 end
  if StatTable.InspireTimer then
    return "Inspire", StatTable.InspireTimer
  elseif StatTable.BladedanceTimer then
    return "Bladedance", StatTable.BladedanceTimer
  elseif StatTable.DervishTimer then
    return "Dervish", StatTable.DervishTimer
  elseif StatTable.VeilTimer then
    return "Veil", StatTable.VeilTimer
  elseif StatTable.UnendTimer then
    return "Unend", StatTable.UnendTimer
  else
    return "NotDance", -1
  end
end

function BldDancing()
  local dance, _ = BldDanceCheck()
  if dance == "NotDance" then
    return false
  else
    return true
  end
end

function BldTest()
  dance, timer = BldDanceCheck()
  print(dance,timer)
  if dance == "Inspire" then print("inspire is up!") end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Drider Script</name>
						<packageName></packageName>
						<script>function DriderPoisonOnCombat()
  if not (StatTable.Level == 125 and StatTable.Race == "Drider") then return end
  
  if IsNotClass({"Soldier", "Priest", "Berserker", "Black Circle Initiate", "Bodyguard", "Stormlord"}) and not StatTable.RacialExpungeFatigue then
    TryAction("cast poison", 5)
    
    -- poison for a HiE is 7 mana base, 42 (quicken 5) and 70 (quicken 9)
  end
  
  TryAction("racial poison", 5)
  
  safeTempTrigger("DriderExpunge", "looks pretty hurt.", function() 
    if not StatTable.RacialExpungeFatigue and 
    (StatTable.Level == 125 and tonumber(gmcp.Char.Status.opponent_level) &gt; 160) then 
      TryAction("racial expunge", 5) 
    end
  end, "substring", 1)

end
                                       
safeEventHandler("DriderOnCombatID", "OnCombat", "DriderPoisonOnCombat", false)</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Legend Scripts</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Req Script</name>
							<packageName></packageName>
							<script>-- Global tables to hold the req queue and cooldown timestamps.
reqQueue = reqQueue or {}       -- Holds all pending req requests.
reqCooldown = reqCooldown or {} -- Tracks last req time for each target.

-- Function to add a new request to the queue.
function addReqRequest(sender, target)
  local now = os.time()
  
  -- Check if this target was already req'd within the last 5 minutes (300 seconds).
  if reqCooldown[target] and (now - reqCooldown[target] &lt; 300) then
    send("tell " .. sender .. " Sorry, " .. target .. " was req'd recently. Please try again later.")
    return
  end

  -- Record the time for this target to enforce the cooldown.
  reqCooldown[target] = now
  
  -- Add the request to the queue.
  table.insert(reqQueue, {sender = sender, target = target, time = now})
  
  -- Inform the sender if their request has been queued.
  if #reqQueue &gt; 1 then
    send("tell " .. sender .. " Your req for " .. target .. " is queued. Please wait your turn.")
  else
    send("tell " .. sender .. " Req'ing " .. target)
    processReqQueue()  -- If the queue was empty, start processing immediately.
  end
end

-- Function to process the req queue one entry at a time.
function processReqQueue()
  -- If the queue is empty, nothing to do.
  if #reqQueue == 0 then return end
  
  local currentReq = reqQueue[1]
  local sender = currentReq.sender
  local target = currentReq.target
  
  -- (Optional) Check if you are in the correct room for casting.
  if gmcp.Room.Info.name ~= "A Sphere of Silver Light" then
    send("tell " .. sender .. " You must be in a Sphere of Silver Light to cast requiem.")
    table.remove(reqQueue, 1)
    tempTimer(1, processReqQueue)  -- Process the next request after a short delay.
    return
  end

  -- If needed, stand up (or do any pre-cast checks).
  local wasAsleep = false
  if StatTable.Position == "sleep" then
    wasAsleep = true
    send("stand")
  end

  -- Now do the req commands (in your example, 5 casts).
  for i = 1, 5 do
    send("cast requiem " .. target)
  end
  
  send("tell " .. sender .. " " .. target .. " req'd 5 times")
  
  if wasAsleep then
    send("sleep")
  end
  
  -- Remove the processed request from the queue.
  table.remove(reqQueue, 1)
  
  -- Schedule the processing of the next request after a delay (the req takes about 60 seconds).
  if #reqQueue &gt; 0 then
    tempTimer(60, processReqQueue)
  end
end
</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>GetPlaneName</name>
						<packageName></packageName>
						<script>  local planeLookup = {
    ["{ LORD } Dev     The Sun Cabal"]               = "Nowhere",
    ["{ LORD } Vorak   Lord Mud School"]              = "Thorngate",
    ["{ LORD } Crom    Thorngate"]                    = "Thorngate",
    ["{ LORD } Crom    The House of Bandu"]           = "Thorngate",
    ["{ LORD } Odin    A Temple of Gorn"]             = "Thorngate",
    ["{ LORD } Dev     Thorngate Keep"]               = "Thorngate",
    ["{ LORD } Dev     Rietta's Wonders"]             = "Thorngate",
    ["{ LORD } Odin    Labyrinth of Bo'vul"]          = "Hell",
    ["{ LORD } Snikt   Outland"]                      = "Outland",
    ["{ LORD } Kylara  Tarterus"]                     = "Tarterus",
    ["{ LORD } Dev     The Garden"]                   = "Tarterus",
    ["{ LORD } Ducer   Fire Realm"]                   = "Fire",
    ["{ LORD } Mimir   Cinderheim"]                   = "Fire",
    ["{ LORD } Dev     Airscape"]                     = "Air",
    ["{ LORD } Crowe   Plane of Water"]               = "Water",
    ["{ LORD } Crowe   World of Stone"]               = "Stone",
    ["{ LORD } Yevaud  Mountain of Madness"]          = "Stone",
    ["{ LORD } Yevaud  The Accursed Lands"]           = "Karnath",
    ["{ LORD } Yevaud  The Silent Sphinx"]            = "Karnath",
    ["{ LORD } Yevaud  The Dark Pyramid"]             = "Karnath",
    ["{ LORD } Yevaud  The Reckoning"]                = "Water",
    ["{ LORD } Yevaud  The Ascension"]                = "Tarterus",
    ["{ LORD } Dev     Citadel Arcadia"]              = "Arcadia",
    ["{ LORD } Dev     Dark Fae Tower"]               = "Arcadia",
    ["{ LORD } Dev     The Fantasy Forest"]           = "Arcadia",
    ["{ LORD } Andi    The Astral Plane"]             = "Astral",
    ["{ LORD } Dev     Memory Lane"]                  = "Astral",
    ["{ LORD } Dev     Astral Invasion"]              = "Astral",
    ["{ LORD } Ctibor  Shadowlands"]                = "Midgaardia", -- call "Midgaardia" so hero spells are used
    ["{ LORD } Ctibor  Netherworld"]                = "Midgaardia", -- call "Midgaardia" so hero spells are used
    ["{ LORD } Zahri   The Shunned World"]            = "Kzinti",
    ["{ LORD } CC-Ctib Savage Jungle"]               = "Kzinti",
    ["{ LORD } CC-Ctib Inferno Peak"]                = "Kzinti",
    ["{ LORD } CC-Ctib Kzinti Spire of Knowledge"]   = "Kzinti",
    ["{ LORD } CC-Ctib Kzinti Spire of War"]          = "Kzinti",
    ["{ LORD } Mimir   Patriarchs' Gulch"]            = "Karnath",
    ["{ LORD } Mim&amp;Mel Forbidden Wasteland"]         = "Karnath",
    ["{ LORD } Dev     Under the Stars"]              = "Noctopia",
    ["{ LORD } Dev     The Shiftwatch Orb"]           = "Noctopia",
    ["{ LORD } Dev     Obsidian Arena; Stands"]         = "Noctopia",
    ["{ LORD } Dev     Obsidian Arena; Floor"]          = "Noctopia",
    ["{ LORD } Dev     Pits of Blood and Chain"]        = "Noctopia",
    ["{ LORD } Dev     The Unravelling"]              = "Nowhere",
    ["{ LORD } Kariya  Temple of the Council"]        = "Tarterus",
    ["{ LORD } Mal     Demi-plane of Dread"]          = "DEFAULT",
    ["{ LORD } Skorn   Soulchar Desolation"]          = "Stone",
    ["{ LORD } Silence Githzerai Keep"]               = "Outland",
    ["{ LORD } Moir    Battle of Avalon"]             = "Shard",
    ["{ LORD } WntRose The Conundrum"]                = "Shard",
    ["{ LORD } Mal     Dreamscape"]                 = "Shard",
    ["{ LORD } Jaromil When Elements Align"]         = "Shard",
    ["{ LORD } Ginta   Eragoran Laylines"]            = "Shard",
    ["{ LORD } Mimir   Forsaken Asylum"]              = "Shard",
    ["{ LORD } Waite   Soulgorger's Lair"]             = "Shard",
    ["{ LORD } Imij    Spirit Forge"]                 = "Shard",
    ["{ LORD } Mirlion The Shattered Mirror"]         = "Shard",
    ["{ LORD } Yrth    Tribulations of Zin"]          = "Shard",
    ["{ LORD } MalFlor Echo Monastery"]              = "Transmog",
    ["{ LORD } MalShrt  Tssasskkas's Lair Redux"]      = "Transmog",
    ["{ LORD } MalKar  Darker Castle"]                = "Transmog",
    ["{ LORD } ChoMal  Borley's Bond"]                = "Transmog",
    ["{ LORD } Jaromal Overgrowth"]                  = "Transmog",
    ["{ LORD } Megamal Kwalashai"]                    = "Transmog",
    ["{ LORD } Mal     Flayer Keep"]                 = "Transmog",
    ["{ LORD } DevMal  Stalemate"]                   = "Transmog",
    ["{ LORD } Draeger Silmavar Lost"]               = "Transmog", 
    ["{ LORD } Mal     Nexus of the Crisis"]         = "Tarterus",
    ["{ LORD } Ctibor  Realm of Chaos"]              = "Special",
    ["{ LORD } Ctibor  Domain of Law"]               = "Astral",
    ["{ LORD } Mal     The Bond"]                    = "Special",
    ["{ LORD } DevMal  Apotheosis"]                  = "DEFAULT",
    ["{ LORD } Mal     Horavacui"]                   = "Horavacui",
    ["{ LORD } Tyberos Mindscape"]                   = "Outland",
    ["{ LORD } Mal     Accursed Graveyard"]          = "Horavacui",
    ["{ LORD } Ctibor  Gem Repository"]              = "Air",
    ["{ LORD } Akharan Bo'Vul's Imagery Gate"]         = "Air",
    ["{ LORD } Ctibor  Gate of Indecision"]          = "Air",
    ["{ LORD } Ctibor  Arcadian Menagerie"]          = "Air",
    ["{ LORD } Ctibor  Elemental Menagerie"]         = "Air",
    ["{ LORD } Ctibor  Tarterus Menagerie"]          = "Air",
    ["{ LORD } Santana Bo'Vul's Mermen Gate"]         = "Air",
    ["{ LORD } Ctibor  Bo'Vul's Vault"]              = "Air",
  }

function GetTier(area_name)
  if not area_name then area_name = gmcp.Room.Info.zone end
  
  if StatTable.Level &lt; 125 then return "Hero" end
  if StatTable.Level == 250 then return "Legend" end
  
  if area_name == "{ LORD } Ctibor  Shadowlands" or
     area_name == "{ LORD } Ctibor  Netherworld" then
      return "Hero"
  end
  
  
  if string.sub(area_name, 1, 8) == "{ LORD }" then return "Lord" end
  
  -- Check if the area_name contains two numbers inside curly braces.
  local x, y = area_name:match("{%s*(%d+)%s*(%d+)%s*}")
  if x and y then
    return "LowMort"
  end
  
  return "Hero"
end


function GetPlaneName(area_name)
  if not area_name then area_name = gmcp.Room.Info.zone end
  --print("Area name:", area_name)
  
  if GetTier(area_name) ~= "Lord" then return "Midgaardia" end
 
  -- Look up the area name in the table and return the result,
  -- or "Unknown" if the area name is not found.
  return planeLookup[area_name] or "Unknown"
end


function GetAreaName(area_name)
  --\{( |\*)(\w+)( |\*)\} (\w+)\s*(.*)
  --{ LORD } Ctibor  Tarterus Menagerie
  --{ HERO } Mimir   Temple of Quixoltan
  --{*HERO*} Dev     Abishai's Pass

end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>Vagonuth-Package</name>
			<packageName>Vagonuth-Package</packageName>
			<script></script>
			<command></command>
			<keyCode>0</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Vagonuth Package</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>33554431</keyCode>
				<keyModifier>0</keyModifier>
				<KeyGroup isActive="yes" isFolder="yes">
					<name>Run Keyboard Shortcuts</name>
					<packageName>Base Package 4-1-22</packageName>
					<script></script>
					<command></command>
					<keyCode>0</keyCode>
					<keyModifier>0</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>5</name>
						<packageName></packageName>
						<script></script>
						<command>scan</command>
						<keyCode>53</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>8</name>
						<packageName></packageName>
						<script></script>
						<command>n</command>
						<keyCode>56</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>4</name>
						<packageName></packageName>
						<script></script>
						<command>w</command>
						<keyCode>52</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>2</name>
						<packageName></packageName>
						<script></script>
						<command>s</command>
						<keyCode>50</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>6</name>
						<packageName></packageName>
						<script></script>
						<command>e</command>
						<keyCode>54</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>-</name>
						<packageName></packageName>
						<script></script>
						<command>down</command>
						<keyCode>45</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>+</name>
						<packageName></packageName>
						<script></script>
						<command>up</command>
						<keyCode>43</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="no" isFolder="no">
						<name>1</name>
						<packageName></packageName>
						<script></script>
						<command>scan</command>
						<keyCode>49</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="no" isFolder="no">
						<name>0</name>
						<packageName></packageName>
						<script></script>
						<command>enter portal</command>
						<keyCode>48</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>1</name>
						<packageName></packageName>
						<script></script>
						<command>k ghost</command>
						<keyCode>49</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>0</name>
						<packageName></packageName>
						<script></script>
						<command>k spec</command>
						<keyCode>48</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>3</name>
						<packageName></packageName>
						<script></script>
						<command>k wraith</command>
						<keyCode>51</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>look</name>
						<packageName></packageName>
						<script></script>
						<command>look</command>
						<keyCode>55</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>9</name>
						<packageName></packageName>
						<script>send("sparekey")</script>
						<command></command>
						<keyCode>57</keyCode>
						<keyModifier>536870912</keyModifier>
					</Key>
				</KeyGroup>
				<Key isActive="yes" isFolder="no">
					<name>Reconnect</name>
					<packageName></packageName>
					<script>reconnect()
raiseEvent("OnReconnect")</script>
					<command></command>
					<keyCode>82</keyCode>
					<keyModifier>67108864</keyModifier>
				</Key>
			</KeyGroup>
		</KeyGroup>
	</KeyPackage>
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
